DEBUG: Executing shell function do_compile
NOTE: make -j 1
make crosspatch
make[1]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
test ! -f cnf/diffs/perl5-5.36.0/dynaloader.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/dynaloader.patch && touch cnf/diffs/perl5-5.36.0/dynaloader.applied) || echo "cnf/diffs/perl5-5.36.0/dynaloader.applied exist"
File ext/DynaLoader/hints/linux.pl is read-only; trying to patch anyway
patching file ext/DynaLoader/hints/linux.pl
test ! -f cnf/diffs/perl5-5.36.0/findext.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/findext.patch && touch cnf/diffs/perl5-5.36.0/findext.applied) || echo "cnf/diffs/perl5-5.36.0/findext.applied exist"
File win32/FindExt.pm is read-only; trying to patch anyway
patching file win32/FindExt.pm
test ! -f cnf/diffs/perl5-5.36.0/xconfig.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/xconfig.patch && touch cnf/diffs/perl5-5.36.0/xconfig.applied) || echo "cnf/diffs/perl5-5.36.0/xconfig.applied exist"
File perl.h is read-only; trying to patch anyway
patching file perl.h
File perl_langinfo.h is read-only; trying to patch anyway
patching file perl_langinfo.h
test ! -f cnf/diffs/perl5-5.36.0/installscripts.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/installscripts.patch && touch cnf/diffs/perl5-5.36.0/installscripts.applied) || echo "cnf/diffs/perl5-5.36.0/installscripts.applied exist"
File installman is read-only; trying to patch anyway
patching file installman
File installperl is read-only; trying to patch anyway
patching file installperl
test ! -f cnf/diffs/perl5-5.36.0/constant.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/constant.patch && touch cnf/diffs/perl5-5.36.0/constant.applied) || echo "cnf/diffs/perl5-5.36.0/constant.applied exist"
File cpan/ExtUtils-Constant/t/Constant.t is read-only; trying to patch anyway
patching file cpan/ExtUtils-Constant/t/Constant.t
test ! -f cnf/diffs/perl5-5.36.0/posix-makefile.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/posix-makefile.patch && touch cnf/diffs/perl5-5.36.0/posix-makefile.applied) || echo "cnf/diffs/perl5-5.36.0/posix-makefile.applied exist"
File ext/POSIX/Makefile.PL is read-only; trying to patch anyway
patching file ext/POSIX/Makefile.PL
test ! -f cnf/diffs/perl5-5.36.0/test-checkcase.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/test-checkcase.patch && touch cnf/diffs/perl5-5.36.0/test-checkcase.applied) || echo "cnf/diffs/perl5-5.36.0/test-checkcase.applied exist"
File t/porting/checkcase.t is read-only; trying to patch anyway
patching file t/porting/checkcase.t
test ! -f cnf/diffs/perl5-5.36.0/liblist.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/liblist.patch && touch cnf/diffs/perl5-5.36.0/liblist.applied) || echo "cnf/diffs/perl5-5.36.0/liblist.applied exist"
File cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm is read-only; trying to patch anyway
patching file cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm
test ! -f cnf/diffs/perl5-5.36.0/test-makemaker.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/test-makemaker.patch && touch cnf/diffs/perl5-5.36.0/test-makemaker.applied) || echo "cnf/diffs/perl5-5.36.0/test-makemaker.applied exist"
File cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Utils.pm is read-only; trying to patch anyway
patching file cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Utils.pm
test ! -f cnf/diffs/perl5-5.36.0/makemaker.applied && (patch -p1 -i cnf/diffs/perl5-5.36.0/makemaker.patch && touch cnf/diffs/perl5-5.36.0/makemaker.applied) || echo "cnf/diffs/perl5-5.36.0/makemaker.applied exist"
File cpan/ExtUtils-MakeMaker/lib/ExtUtils/MM_Unix.pm is read-only; trying to patch anyway
patching file cpan/ExtUtils-MakeMaker/lib/ExtUtils/MM_Unix.pm
make[1]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
make miniperl
make[1]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o miniperlmain.host.o miniperlmain.c
In file included from perl.h:7247,
                 from miniperlmain.c:57:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o av.host.o av.c
In file included from perl.h:7247,
                 from av.c:20:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o scope.host.o scope.c
In file included from perl.h:7247,
                 from scope.c:27:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o doop.host.o doop.c
In file included from perl.h:7247,
                 from doop.c:24:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o doio.host.o doio.c
In file included from perl.h:7247,
                 from doio.c:27:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o dump.host.o dump.c
In file included from perl.h:7247,
                 from dump.c:29:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o gv.host.o gv.c
In file included from perl.h:7247,
                 from gv.c:41:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o hv.host.o hv.c
In file included from perl.h:7247,
                 from hv.c:35:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o mg.host.o mg.c
In file included from perl.h:7247,
                 from mg.c:45:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o reentr.host.o reentr.c
In file included from perl.h:7247,
                 from reentr.c:33:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o mro_core.host.o mro_core.c
In file included from perl.h:7247,
                 from mro_core.c:31:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o perly.host.o perly.c
In file included from perl.h:7247,
                 from perly.c:26:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp.host.o pp.c
In file included from perl.h:7247,
                 from pp.c:28:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp_hot.host.o pp_hot.c
pp_hot.c:2920:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
 2920 | S_should_we_output_Debug_r(pTHX_ regexp *prog)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from perl.h:7247,
                 from pp_hot.c:36:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp_ctl.host.o pp_ctl.c
In file included from perl.h:7247,
                 from pp_ctl.c:35:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp_sys.host.o pp_sys.c
In file included from perl.h:7247,
                 from pp_sys.c:31:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o regcomp.host.o regcomp.c
In file included from perl.h:7247,
                 from regcomp.c:132:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o regexec.host.o regexec.c
In file included from perl.h:7247,
                 from regexec.c:75:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o utf8.host.o utf8.c
In file included from perl.h:7247,
                 from utf8.c:33:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o sv.host.o sv.c
In file included from perl.h:7247,
                 from sv.c:32:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o taint.host.o taint.c
In file included from perl.h:7247,
                 from taint.c:24:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o toke.host.o toke.c
In file included from perl.h:7247,
                 from toke.c:40:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o util.host.o util.c
In file included from perl.h:7247,
                 from util.c:26:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o deb.host.o deb.c
In file included from perl.h:7247,
                 from deb.c:25:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o run.host.o run.c
In file included from perl.h:7247,
                 from run.c:26:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o universal.host.o universal.c
In file included from perl.h:7247,
                 from universal.c:31:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pad.host.o pad.c
In file included from perl.h:7247,
                 from pad.c:150:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -o generate_uudmap generate_uudmap.c
./generate_uudmap uudmap.h bitcount.h mg_data.h
./generate_uudmap uudmap.h bitcount.h mg_data.h
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o globals.host.o globals.c
In file included from perl.h:7247,
                 from globals.c:25:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o keywords.host.o keywords.c
In file included from perl.h:7247,
                 from keywords.c:9:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o perlio.host.o perlio.c
In file included from perl.h:7247,
                 from perlio.c:43:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o numeric.host.o numeric.c
In file included from perl.h:7247,
                 from numeric.c:27:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o mathoms.host.o mathoms.c
In file included from perl.h:7247,
                 from mathoms.c:69:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o locale.host.o locale.c
In file included from perl.h:7247,
                 from locale.c:49:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp_pack.host.o pp_pack.c
In file included from perl.h:7247,
                 from pp_pack.c:33:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o pp_sort.host.o pp_sort.c
pp_sort.c:334:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  334 | S_sortsv_flags_impl(pTHX_ gptr *base, size_t nmemb, SVCOMPARE_t cmp, U32 flags)
      | ^~~~~~~~~~~~~~~~~~~
pp_sort.c:175:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  175 | dynprep(pTHX_ gptr *list1, gptr *list2, size_t nmemb, const SVCOMPARE_t cmp)
      | ^~~~~~~
In file included from perl.h:7247,
                 from pp_sort.c:31:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o caretx.host.o caretx.c
In file included from perl.h:7247,
                 from caretx.c:32:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o dquote.host.o dquote.c
In file included from perl.h:7247,
                 from dquote.c:10:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o time64.host.o time64.c
In file included from perl.h:7247,
                 from time64.c:44:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -c -o builtin.host.o builtin.c
In file included from perl.h:7247,
                 from builtin.c:15:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
cp -f op.c opmini.c
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -DPERL_EXTERNAL_GLOB -c -o opmini.host.o opmini.c
In file included from perl.h:7247,
                 from op.c:163:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
cp -f perl.c perlmini.c
gcc -DPERL_CORE -DUSE_CROSS_COMPILE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -DPERL_IS_MINIPERL -c -o perlmini.host.o perlmini.c
In file included from perl.h:7247,
                 from perl.c:38:
sv_inline.h:519:1: warning: ‘always_inline’ function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
gcc  -o miniperl miniperlmain.host.o av.host.o scope.host.o doop.host.o doio.host.o dump.host.o gv.host.o hv.host.o mg.host.o reentr.host.o mro_core.host.o perly.host.o pp.host.o pp_hot.host.o pp_ctl.host.o pp_sys.host.o regcomp.host.o regexec.host.o utf8.host.o sv.host.o taint.host.o toke.host.o util.host.o deb.host.o run.host.o universal.host.o pad.host.o globals.host.o keywords.host.o perlio.host.o numeric.host.o mathoms.host.o locale.host.o pp_pack.host.o pp_sort.host.o caretx.host.o dquote.host.o time64.host.o builtin.host.o opmini.host.o perlmini.host.o -lm -lcrypt -ldl
make[1]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
make dynaloader
make[1]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
sh cflags.SH
cflags.SH: Adding -std=c99.
cflags.SH: Adding -Werror=pointer-arith.
cflags.SH: Adding -Werror=vla.
cflags.SH: Adding -Wextra.
cflags.SH: Adding -Wno-long-long.
cflags.SH: Adding -Wno-declaration-after-statement.
cflags.SH: Adding -Wc++-compat.
cflags.SH: Adding -Wwrite-strings.
cflags.SH: cc       = arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot
cflags.SH: ccflags  =  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
cflags.SH: stdflags =  -std=c99
cflags.SH: optimize = -fwrapv -fno-strict-aliasing
cflags.SH: warn     =  -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings
Extracting cflags (with variable substitutions)
./miniperl_top make_patchnum.pl
Updating 'git_version.h' and 'lib/Config_git.pl'
./miniperl_top configpm
written lib/Config.pod
updated lib/Config.pm
updated lib/Config_heavy.pl
cp -f ext/re/re.pm lib/re.pm
cd dist/lib/ && ../../miniperl_top -I../../lib Makefile.PL \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for lib
make -C dist/lib/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/lib'
"../../miniperl_top" "-I../../lib" lib_pm.PL lib.pm 
Extracting lib.pm (with variable substitutions)
cp lib.pm ../../lib/lib.pm
Manifying 1 pod document
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/lib'
cp -f dist/ExtUtils-ParseXS/lib/ExtUtils/xsubpp lib/ExtUtils/xsubpp
cd ext/DynaLoader/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for DynaLoader
make -C ext/DynaLoader/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=static
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/DynaLoader'
"../../miniperl_top" "-I../../lib" DynaLoader_pm.PL DynaLoader.pm 
cp DynaLoader.pm ../../lib/DynaLoader.pm
rm -f DynaLoader.xs
cp dl_dlopen.xs DynaLoader.xs
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/DynaLoader/../../lib/ExtUtils/typemap'  DynaLoader.xs > DynaLoader.xsc
mv DynaLoader.xsc DynaLoader.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.52\" -DXS_VERSION=\"1.52\" -fPIC -Wno-unused-function "-I../.."  -DLIBC="" DynaLoader.c
In file included from ../../perl.h:7246,
                 from DynaLoader.xs:136:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
DynaLoader.c: In function 'boot_DynaLoader':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:396:23: note: in expansion of macro 'HS_KEY'
  396 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)
      |                       ^~~~~~
../../XSUB.h:186:18: note: in expansion of macro 'XS_SETXSUBFN_POPMARK'
  186 |         I32 ax = XS_SETXSUBFN_POPMARK;  \
      |                  ^~~~~~~~~~~~~~~~~~~~
dlutils.c:26:32: note: in expansion of macro 'dXSBOOTARGSNOVERCHK'
   26 | #define dXSBOOTARGSXSAPIVERCHK dXSBOOTARGSNOVERCHK
      |                                ^~~~~~~~~~~~~~~~~~~
DynaLoader.c:554:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  554 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:396:23: note: in expansion of macro 'HS_KEY'
  396 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)
      |                       ^~~~~~
../../XSUB.h:186:18: note: in expansion of macro 'XS_SETXSUBFN_POPMARK'
  186 |         I32 ax = XS_SETXSUBFN_POPMARK;  \
      |                  ^~~~~~~~~~~~~~~~~~~~
dlutils.c:26:32: note: in expansion of macro 'dXSBOOTARGSNOVERCHK'
   26 | #define dXSBOOTARGSXSAPIVERCHK dXSBOOTARGSNOVERCHK
      |                                ^~~~~~~~~~~~~~~~~~~
DynaLoader.c:554:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  554 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -rf ../../DynaLoader.o
cp DynaLoader.o ../../DynaLoader.o
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/DynaLoader'
cp ext/DynaLoader/DynaLoader.o DynaLoader.o
make[1]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
make perl nonxs_ext utilities extensions pods
make[1]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
./miniperl_top make_ext_Makefile.pl ext/ExtUtils-Miniperl/Makefile.PL
Creating ext/ExtUtils-Miniperl/Makefile.PL for ExtUtils::Miniperl
cd ext/ExtUtils-Miniperl/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::Miniperl
make -C ext/ExtUtils-Miniperl/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/ExtUtils-Miniperl'
cp lib/ExtUtils/Miniperl.pm ../../lib/ExtUtils/Miniperl.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/ExtUtils-Miniperl'
./miniperl_top -MExtUtils::Miniperl -e 'writemain(\"perlmain.c", @ARGV)' DynaLoader 
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o perlmain.o perlmain.c
In file included from perl.h:7246,
                 from perlmain.c:51:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
cd ext/DynaLoader/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for DynaLoader
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o op.o op.c
In file included from perl.h:7246,
                 from op.c:163:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from op.c:165:
feature.h: In function 'S_enable_feature_bundle':
feature.h:223:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1006632961' to '3288334335' [-Wsign-conversion]
  223 |     PL_hints = (PL_hints &~ HINT_FEATURE_MASK)
      |                          ^
feature.h:224:14: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  224 |              | (
      |              ^
feature.h:248:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
  248 |     else                            PL_hints &= ~HINT_UNI_8_BIT;
      |                                              ^~
op.c: In function 'S_new_slab':
op.c:262:31: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  262 |     slab->opslab_free_space = sz;
      |                               ^~
op.c: In function 'S_link_freed_op':
op.c:270:34: warning: conversion from 'unsigned int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  270 | #define OPSLOT_SIZE_TO_INDEX(sz) ((sz) - OPSLOT_SIZE_BASE)
      |                                  ^
op.c:276:17: note: in expansion of macro 'OPSLOT_SIZE_TO_INDEX'
  276 |     U16 index = OPSLOT_SIZE_TO_INDEX(sz);
      |                 ^~~~~~~~~~~~~~~~~~~~
op.c:302:35: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  302 |         slab->opslab_freed_size = newsize;
      |                                   ^~~~~~~
op.c: In function 'Perl_Slab_Alloc':
op.c:270:34: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  270 | #define OPSLOT_SIZE_TO_INDEX(sz) ((sz) - OPSLOT_SIZE_BASE)
      |                                  ^
op.c:361:27: note: in expansion of macro 'OPSLOT_SIZE_TO_INDEX'
  361 |         for (base_index = OPSLOT_SIZE_TO_INDEX(sz_in_p);
      |                           ^~~~~~~~~~~~~~~~~~~~
op.c:212:5: warning: conversion from 'unsigned int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  212 |     (assert(((char *)(p) - (char *)(o)) % sizeof(I32**) == 0), \
      |     ^
op.c:380:35: note: in expansion of macro 'DIFF'
  380 |             slot->opslot_offset = DIFF(&slab2->opslab_slots, slot) ;    \
      |                                   ^~~~
op.c:394:13: note: in expansion of macro 'INIT_OPSLOT'
  394 |             INIT_OPSLOT(slab2->opslab_free_space);
      |             ^~~~~~~~~~~
op.c:212:5: warning: conversion from 'unsigned int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  212 |     (assert(((char *)(p) - (char *)(o)) % sizeof(I32**) == 0), \
      |     ^
op.c:380:35: note: in expansion of macro 'DIFF'
  380 |             slot->opslot_offset = DIFF(&slab2->opslab_slots, slot) ;    \
      |                                   ^~~~
op.c:414:5: note: in expansion of macro 'INIT_OPSLOT'
  414 |     INIT_OPSLOT(sz_in_p);
      |     ^~~~~~~~~~~
op.c:414:17: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  414 |     INIT_OPSLOT(sz_in_p);
      |                 ^~~~~~~
op.c:381:33: note: in definition of macro 'INIT_OPSLOT'
  381 |             slot->opslot_size = s;                      \
      |                                 ^
op.c:414:17: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  414 |     INIT_OPSLOT(sz_in_p);
      |                 ^~~~~~~
op.c:382:41: note: in definition of macro 'INIT_OPSLOT'
  382 |             slab2->opslab_free_space -= s;              \
      |                                         ^
op.c: In function 'S_no_bareword_allowed':
op.c:717:22: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
  717 |     o->op_private &= ~OPpCONST_STRICT; /* prevent warning twice about the same OP */
      |                      ^
op.c: In function 'Perl_allocmy':
op.c:746:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  746 |     if (flags & ~SVf_UTF8)
      |               ^
In file included from perl.h:3003:
op.c: In function 'Perl_alloccopstash':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
op.c:829:9: note: in expansion of macro 'Renew'
  829 |         Renew(PL_stashpad, PL_stashpadmax + 10, HV *);
      |         ^~~~~
In file included from perl.h:5841:
op.c: In function 'S_cop_free':
cop.h:660:37: warning: conversion to 'ssize_t' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ~~~~^~~~~~~~~~~
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
op.c:1330:51: note: in expansion of macro 'CopLINE'
 1330 |             SV * const * const svp = av_fetch(av, CopLINE(cop), FALSE);
      |                                                   ^~~~~~~
op.c: In function 'S_forget_pmop':
op.c:1356:36: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1356 |             U32 count = mg->mg_len / sizeof(PMOP**);
      |                                    ^
op.c:1363:34: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1363 |                     mg->mg_len = count * sizeof(PMOP**);
      |                                  ^~~~~
op.c: In function 'Perl_op_sibling_splice':
op.c:1576:33: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
 1576 |             parent->op_flags &= ~OPf_KIDS;
      |                                 ^
op.c:1597:24: warning: conversion to 'U32' {aka 'unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1597 |                 type = parent->op_targ;
      |                        ^~~~~~
op.c: In function 'Perl_alloc_LOGOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:1678:5: note: in expansion of macro 'OpTYPE_set'
 1678 |     OpTYPE_set(logop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_scalar':
op.c:1956:23: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 1956 |         o->op_flags = (o->op_flags & ~OPf_WANT) | OPf_WANT_SCALAR;
      |                       ^
op.c:1969:37: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
 1969 |                     o->op_private &=~ OPpREPEAT_DOLIST;
      |                                     ^
op.c: In function 'Perl_scalarvoid':
op.c:2148:23: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 2148 |         o->op_flags = (o->op_flags & ~OPf_WANT) | OPf_WANT_VOID;
      |                       ^
op.c: In function 'S_voidnonfinal':
op.c:2673:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 2673 |         o->op_flags &= ~OPf_PARENS;
      |                        ^
In file included from perl.h:4114:
op.c: In function 'S_maybe_multiconcat':
op.c:3372:21: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 3372 |                     *  (
      |                     ^
iperlsys.h:901:57: note: in definition of macro 'PerlMemShared_malloc'
  901 | #  define PerlMemShared_malloc(size)            malloc((size))
      |                                                         ^~~~
op.c:3473:35: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3473 |                     lenp->ssize = l;
      |                                   ^
op.c:3475:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3475 |                     lenp->ssize += l;
      |                                 ^~
op.c:3475:36: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3475 |                     lenp->ssize += l;
      |                                    ^
op.c:3551:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3551 |     aux[PERL_MULTICONCAT_IX_PLAIN_LEN].ssize = utf8 ?    0 : total_len;
      |                                                ^~~~
op.c:3553:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3553 |     aux[PERL_MULTICONCAT_IX_UTF8_LEN].ssize  = total_len;
      |                                                ^~~~~~~~~
op.c:3568:51: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3568 |         aux[PERL_MULTICONCAT_IX_UTF8_LEN].ssize = ulen;
      |                                                   ^~~~
op.c: In function 'S_lvref':
op.c:4227:31: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
 4227 |                 o->op_flags &=~ OPf_KIDS;
      |                               ^
op.c: In function 'Perl_op_lvalue_flags':
op.c:4823:28: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-129' [-Wsign-conversion]
 4823 |             o->op_flags &= ~OPf_SPECIAL;
      |                            ^
op.c: In function 'Perl_apply_attrs_string':
op.c:5237:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5237 |                                         newSVpvn(sstr, attrstr-sstr)));
      |                                                        ~~~~~~~^~~~~
embed.h:416:63: note: in definition of macro 'op_append_elem'
  416 | #define op_append_elem(a,b,c)   Perl_op_append_elem(aTHX_ a,b,c)
      |                                                               ^
op.c:5236:33: note: in expansion of macro 'newSVOP'
 5236 |                                 newSVOP(OP_CONST, 0,
      |                                 ^~~~~~~
op.c:5237:41: note: in expansion of macro 'newSVpvn'
 5237 |                                         newSVpvn(sstr, attrstr-sstr)));
      |                                         ^~~~~~~~
op.c: In function 'Perl_bind_match':
op.c:5561:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-17' [-Wsign-conversion]
 5561 |         right->op_private &= ~OPpTARGET_MY;
      |                              ^
op.c: In function 'Perl_cmpchain_start':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:5616:5: note: in expansion of macro 'OpTYPE_set'
 5616 |     OpTYPE_set(op, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_cmpchain_extend':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:5639:5: note: in expansion of macro 'OpTYPE_set'
 5639 |     OpTYPE_set(op, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_block_start':
op.c:5791:14: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
 5791 |     PL_hints &= ~HINT_BLOCK_SCOPE;
      |              ^~
op.c: In function 'S_op_integerize':
op.c:6123:41: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 6123 |         cUNOPo->op_first->op_private &= ~OPpCONST_STRICT;
      |                                         ^
op.c: In function 'S_fold_constants':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1144:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-131073' to '4294836223' [-Wsign-conversion]
 1144 | #define SvPADTMP_off(sv)        (SvFLAGS(sv) &= ~SVs_PADTMP)
      |                                              ^~
sv.h:1144:46: note: in definition of macro 'SvPADTMP_off'
 1144 | #define SvPADTMP_off(sv)        (SvFLAGS(sv) &= ~SVs_PADTMP)
      |                                              ^~
op.c: In function 'S_gen_constant_list':
op.c:6425:20: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-17' [-Wsign-conversion]
 6425 |     o->op_flags &= ~OPf_REF;    /* treat \(1..2) like an ordinary list */
      |                    ^
op.c: In function 'Perl_op_prepend_elem':
op.c:6550:35: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 6550 |                 last->op_flags &= ~OPf_PARENS;
      |                                   ^
op.c: In function 'Perl_op_convert_list':
op.c:6583:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 6583 |         o->op_flags &= ~OPf_WANT;
      |                        ^
op.c:6584:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-129' [-Wsign-conversion]
 6584 |         o->op_private &= ~OPpLVAL_INTRO;
      |                          ^
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6602:9: note: in expansion of macro 'OpTYPE_set'
 6602 |         OpTYPE_set(o, type);
      |         ^~~~~~~~~~
op.c:6604:20: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 6604 |     o->op_flags |= flags;
      |                    ^~~~~
op.c: In function 'Perl_newLISTOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6699:5: note: in expansion of macro 'OpTYPE_set'
 6699 |     OpTYPE_set(listop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6753:5: note: in expansion of macro 'OpTYPE_set'
 6753 |     OpTYPE_set(o, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newUNOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6807:5: note: in expansion of macro 'OpTYPE_set'
 6807 |     OpTYPE_set(unop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newUNOP_AUX':
op.c:6840:21: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
 6840 |     unop->op_type = (OPCODE)type;
      |                     ^
op.c: In function 'S_newMETHOP_internal':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6901:5: note: in expansion of macro 'OpTYPE_set'
 6901 |     OpTYPE_set(methop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newBINOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:6957:5: note: in expansion of macro 'OpTYPE_set'
 6957 |     OpTYPE_set(binop, type);
      |     ^~~~~~~~~~
op.c: In function 'S_pmtrans':
op.c:7193:44: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7193 |         SV * inverted_tlist = _new_invlist(tlen);
      |                                            ^~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
op.c:7253:66: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7253 |             sv_catpvn(inverted_tstr, (char *) temp, temp_end_pos - temp);
      |                                                     ~~~~~~~~~~~~~^~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
op.c:7253:13: note: in expansion of macro 'sv_catpvn'
 7253 |             sv_catpvn(inverted_tstr, (char *) temp, temp_end_pos - temp);
      |             ^~~~~~~~~
op.c:7258:70: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7258 |                 sv_catpvn(inverted_tstr, (char *) temp, temp_end_pos - temp);
      |                                                         ~~~~~~~~~~~~~^~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
op.c:7258:17: note: in expansion of macro 'sv_catpvn'
 7258 |                 sv_catpvn(inverted_tstr, (char *) temp, temp_end_pos - temp);
      |                 ^~~~~~~~~
op.c:7559:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7559 |             i = j;
      |                 ^
op.c:8077:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 8077 |         o->op_private &= ~OPpTRANS_USE_SVOP;
      |                          ^
iperlsys.h:904:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  904 | #  define PerlMemShared_calloc(num, size)       calloc((num), (size))
      |                                                        ^~~~~
op.c:8079:29: note: in expansion of macro 'PerlMemShared_calloc'
 8079 |         tbl = (OPtrans_map*)PerlMemShared_calloc(struct_size, 1);
      |                             ^~~~~~~~~~~~~~~~~~~~
op.c: In function 'Perl_newPMOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:8206:5: note: in expansion of macro 'OpTYPE_set'
 8206 |     OpTYPE_set(pmop, type);
      |     ^~~~~~~~~~
op.c:8227:56: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 8227 |         if (reflags && SvOK(reflags)) pmop->op_pmflags |= SvIV(reflags);
      |                                                        ^~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.h:1411:17: note: in expansion of macro 'SvCUR_set'
 1411 |                 SvCUR_set(sv, (val) - SvPVX(sv)); } STMT_END
      |                 ^~~~~~~~~
op.c:8247:9: note: in expansion of macro 'SvEND_set'
 8247 |         SvEND_set(repointer_list, p);
      |         ^~~~~~~~~
op.c: In function 'Perl_pmruntime':
op.c:8592:28: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 8592 |         rcop->op_flags |=  ((PL_hints & HINT_RE_EVAL) ? OPf_SPECIAL : 0)
      |                            ^
op.c: In function 'Perl_newSVOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:8696:5: note: in expansion of macro 'OpTYPE_set'
 8696 |     OpTYPE_set(svop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newPADOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:8751:5: note: in expansion of macro 'OpTYPE_set'
 8751 |     OpTYPE_set(padop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_newPVOP':
op.c:659:22: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  659 |         o->op_type = (OPCODE)type;              \
      |                      ^
op.c:8818:5: note: in expansion of macro 'OpTYPE_set'
 8818 |     OpTYPE_set(pvop, type);
      |     ^~~~~~~~~~
op.c: In function 'Perl_package_version':
op.c:8855:14: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 8855 |     PL_hints &= ~HINT_STRICT_VARS;
      |              ^~
op.c: In function 'S_extract_shortver':
op.c:8880:21: warning: conversion from 'long int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 8880 |         shortver |= major << 8;
      |                     ^~~~~
op.c:8886:21: warning: conversion from 'long int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 8886 |         shortver |= minor;
      |                     ^~~~~
op.c: In function 'Perl_utilize':
op.c:8997:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 8997 |                 PL_hints &= ~HINT_STRICT_REFS;
      |                          ^~
op.c:8999:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-513' to '4294966783' [-Wsign-conversion]
 8999 |                 PL_hints &= ~HINT_STRICT_SUBS;
      |                          ^~
op.c:9001:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 9001 |                 PL_hints &= ~HINT_STRICT_VARS;
      |                          ^~
op.c: In function 'Perl_newASSIGNOP':
op.c:9349:33: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
 9349 |             left->op_private &= ~ OPpSLICEWARNING;
      |                                 ^
op.c:9456:36: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 9456 |                 right->op_flags &= ~OPf_WANT;
      |                                    ^
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
op.c: In function 'Perl_newSTATEOP':
cop.h:660:37: warning: conversion to 'ssize_t' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ~~~~^~~~~~~~~~~
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
op.c:9595:51: note: in expansion of macro 'CopLINE'
 9595 |             SV * const * const svp = av_fetch(av, CopLINE(cop), FALSE);
      |                                                   ^~~~~~~
op.c: In function 'Perl_newLOOPOP':
op.c:10176:20: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
10176 |     o->op_flags |= flags;
      |                    ^~~~~
op.c: In function 'Perl_newWHILEOP':
op.c:10302:20: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
10302 |     o->op_flags |= flags;
      |                    ^~~~~
op.c:10303:22: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
10303 |     o->op_private |= (flags >> 8);
      |                      ^
op.c: In function 'Perl_newFOROP':
op.c:10464:28: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
10464 |         range->op_flags &= ~OPf_KIDS;
      |                            ^
op.c: In function 'S_ref_array_or_hash':
op.c:10599:27: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-19' [-Wsign-conversion]
10599 |         cond->op_flags &= ~(OPf_WANT_SCALAR | OPf_REF);
      |                           ^
op.c: In function 'Perl_cv_ckproto_len_flags':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
sv.h:2172:48: note: in expansion of macro 'HEK_LEN'
 2172 |             sv_catpvn_flags(sv, HEK_KEY(bmxk), HEK_LEN(bmxk),          \
      |                                                ^~~~~~~
op.c:10931:17: note: in expansion of macro 'sv_cathek'
10931 |                 sv_cathek(name, CvNAME_HEK(MUTABLE_CV(SvRV_const(gv))));
      |                 ^~~~~~~~~
op.c: In function 'S_already_defined':
op.c:11077:19: warning: conversion to 'cv_flags_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11077 |                   & ~(CVf_LVALUE * pureperl));
      |                   ^
In file included from perl.h:4164:
op.c: In function 'Perl_newMYSUB':
pad.h:105:41: warning: conversion to 'PADOFFSET' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  105 | #define PARENT_PAD_INDEX(pn)            (pn)->xpadn_low
      |                                         ^
op.c:11140:15: note: in expansion of macro 'PARENT_PAD_INDEX'
11140 |         pax = PARENT_PAD_INDEX(name);
      |               ^~~~~~~~~~~~~~~~
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
op.c:11312:29: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2065' to '4294965231' [-Wsign-conversion]
11312 |             CvFLAGS(compcv) &= ~(CVf_SLABBED|CVf_WEAKOUTSIDE);
      |                             ^~
In file included from perl.h:4165:
cv.h:196:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
cv.h:196:46: note: in definition of macro 'CvSLABBED_off'
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
op.c: In function 'Perl_newATTRSUB_x':
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
op.c:11825:21: note: in expansion of macro 'prepare_SV_for_RV'
11825 |                     prepare_SV_for_RV((SV *)gv);
      |                     ^~~~~~~~~~~~~~~~~
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
op.c:11879:32: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2065' to '4294965231' [-Wsign-conversion]
11879 |             CvFLAGS(PL_compcv) &= ~(CVf_SLABBED|CVf_WEAKOUTSIDE);
      |                                ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
op.c:11913:17: note: in expansion of macro 'prepare_SV_for_RV'
11913 |                 prepare_SV_for_RV((SV *)gv);
      |                 ^~~~~~~~~~~~~~~~~
cv.h:196:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
cv.h:196:46: note: in definition of macro 'CvSLABBED_off'
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
op.c: In function 'Perl_newCONSTSUB_flags':
op.c:12261:14: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
12261 |     PL_hints &= ~HINT_BLOCK_SCOPE;
      |              ^~
op.c: In function 'Perl_newXS_len_flags':
op.c:12418:41: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
12418 |                             GV_ADDMULTI | flags, SVt_PVCV);
embed.h:231:74: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                          ^
op.c:12414:25: note: in expansion of macro 'gv_fetchpvn'
12414 |         GV * const gv = gv_fetchpvn(
      |                         ^~~~~~~~~~~
op.c: In function 'Perl_newSTUB':
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
op.c: In function 'Perl_oopsHV':
op.c:12654:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
12654 |         o->op_private &= ~OPpARG1_MASK;
      |                          ^
op.c: In function 'Perl_ck_cmp':
op.c:12958:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
12958 |     indexop->op_flags &= ~OPf_PARENS;
      |                          ^
op.c: In function 'Perl_ck_rvconst':
op.c:13264:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
13264 |         o->op_private &= ~OPpARG1_MASK;
      |                          ^
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
op.c: In function 'Perl_ck_fun':
op.c:13412:14: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13412 |     I32 oa = PL_opargs[type] >> OASHIFT;
      |              ^~~~~~~~~
op.c:13442:44: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
13442 |             if (optional) o->op_private |= numargs;
      |                                            ^~~~~~~
In file included from perl.h:4168:
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
op.c:13565:39: note: in expansion of macro 'GvNAMELEN'
13565 |                                 len = GvNAMELEN(gv);
      |                                       ^~~~~~~~~
op.c:13633:44: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
13633 |                         kid->op_private |= priv;
      |                                            ^~~~
op.c:13652:26: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
13652 |         o->op_private |= numargs;
      |                          ^~~~~~~
op.c: In function 'Perl_ck_glob':
op.c:13704:25: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-129' [-Wsign-conversion]
13704 |     else o->op_flags &= ~OPf_SPECIAL;
      |                         ^
op.c: In function 'Perl_ck_grep':
op.c:13737:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
13737 |         o->op_flags &= ~OPf_STACKED;
      |                        ^
op.c: In function 'Perl_ck_method':
op.c:14011:51: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14011 |                                         SvEND(sv) - SvPVX(sv) )))
op.c:14014:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14014 |         sv_insert(sv, compatptr - SvPVX_const(sv), 0, ":", 1);
sv.h:2165:46: note: in definition of macro 'sv_insert'
 2165 |         Perl_sv_insert_flags(aTHX_ (bigstr),(offset), (len), (little),  \
      |                                              ^~~~~~
op.c:14026:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14026 |     methsv = newSVpvn_share(method+nsplit, utf8*(len - nsplit), 0);
      |                                                ^
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c:14026:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
14026 |     methsv = newSVpvn_share(method+nsplit, utf8*(len - nsplit), 0);
      |                                            ~~~~^~~~~~~~~~~~~~~
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c:14040:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14040 |         rclass = newSVpvn_share(method, utf8*(nsplit-9), 0);
      |                                             ^
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c:14040:45: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
14040 |         rclass = newSVpvn_share(method, utf8*(nsplit-9), 0);
      |                                         ~~~~^~~~~~~~~~~
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c:14043:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14043 |         rclass = newSVpvn_share(method, utf8*(nsplit-2), 0);
      |                                             ^
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c:14043:45: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
14043 |         rclass = newSVpvn_share(method, utf8*(nsplit-2), 0);
      |                                         ~~~~^~~~~~~~~~~
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
op.c: In function 'Perl_ck_open':
op.c:14087:35: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
14087 |               last->op_private &= ~OPpCONST_STRICT;
      |                                   ^
op.c: In function 'Perl_ck_refassign':
op.c:14203:23: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
14203 |         o->op_flags &=~ OPf_STACKED;
      |                       ^
op.c: In function 'Perl_ck_require':
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
op.c:14264:21: note: in expansion of macro 'Move'
14264 |                     Move(s+2, s+1, end - s - 1, char);
      |                     ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.h:1411:17: note: in expansion of macro 'SvCUR_set'
 1411 |                 SvCUR_set(sv, (val) - SvPVX(sv)); } STMT_END
      |                 ^~~~~~~~~
op.c:14268:13: note: in expansion of macro 'SvEND_set'
14268 |             SvEND_set(sv, end);
      |             ^~~~~~~~~
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
op.c: In function 'Perl_ck_select':
op.c:14354:28: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
14354 |         kid->op_private &= ~HINT_STRICT_REFS;
      |                            ^
op.c: In function 'S_simplify_sort':
op.c:14554:20: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-193' [-Wsign-conversion]
14554 |     o->op_flags &= ~(OPf_STACKED | OPf_SPECIAL);
      |                    ^
op.c: In function 'Perl_find_lexical_cv':
pad.h:105:41: warning: conversion to 'PADOFFSET' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  105 | #define PARENT_PAD_INDEX(pn)            (pn)->xpadn_low
      |                                         ^
op.c:14758:24: note: in expansion of macro 'PARENT_PAD_INDEX'
14758 |                 [off = PARENT_PAD_INDEX(name)];
      |                        ^~~~~~~~~~~~~~~~
op.c: In function 'Perl_rv2cv_op_cv':
op.c:14774:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16' to '4294967280' [-Wsign-conversion]
14774 |     if (flags & ~RV2CVOPCV_FLAG_MASK)
      |               ^
op.c: In function 'Perl_ck_entersub_args_proto':
op.c:14980:39: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
14980 |                     o3->op_private &= ~OPpCONST_STRICT;
      |                                       ^
op.c:15005:71: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15005 |                             e = (char *) memchr(proto, ']', proto_end - proto);
      |                                                             ~~~~~~~~~~^~~~~~~
op.c:15064:44: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
15064 |                             o3->op_flags &=~ OPf_PARENS;
      |                                            ^
op.c:15074:44: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
15074 |                             o3->op_flags &=~ OPf_PARENS;
      |                                            ^
op.c: In function 'Perl_ck_entersub_args_core':
op.c:15243:36: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15243 |                 return newOP(opnum,flags);       /* zero args */
      |                                    ^~~~~
embed.h:375:52: note: in definition of macro 'newOP'
  375 | #define newOP(a,b)              Perl_newOP(aTHX_ a,b)
      |                                                    ^
op.c:15245:38: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15245 |                 return newUNOP(opnum,flags,aop); /* one arg */
      |                                      ^~~~~
embed.h:407:54: note: in definition of macro 'newUNOP'
  407 | #define newUNOP(a,b,c)          Perl_newUNOP(aTHX_ a,b,c)
      |                                                      ^
op.c: In function 'Perl_cv_set_call_checker_flags':
op.c:15430:33: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
15430 |             callmg->mg_flags &= ~MGf_REFCOUNTED;
      |                                 ^
op.c:15438:28: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
15438 |         callmg->mg_flags = (callmg->mg_flags &~ MGf_REQUIRE_GV)
      |                            ^
op.c: In function 'Perl_ck_subr':
op.c:15468:22: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
15468 |     o->op_private &= ~1;
      |                      ^
op.c:15484:36: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
15484 |                 aop->op_private &= ~OPpCONST_STRICT;
      |                                    ^
op.c:15490:40: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
15490 |                     sib->op_private &= ~OPpCONST_STRICT;
      |                                        ^
op.c: In function 'Perl_ck_trunc':
op.c:15584:32: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
15584 |             kid->op_private &= ~OPpCONST_STRICT;
      |                                ^
op.c: In function 'Perl_ck_isa':
op.c:15787:32: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-73' [-Wsign-conversion]
15787 |         classop->op_private &= ~(OPpCONST_BARE|OPpCONST_STRICT);
      |                                ^
op.c: In function 'S_maybe_multideref':
op.c:16737:38: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-49' [-Wsign-conversion]
16737 |                     o->op_private &= ~OPpDEREF;
      |                                      ^
op.c:17010:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17010 |             Size_t size = arg - arg_buf;
      |                           ^~~
op.c: In function 'Perl_rpeep':
op.c:17505:35: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
17505 |                 newop->op_flags = (newop->op_flags & ~OPf_WANT) | OPf_WANT_VOID;
      |                                   ^
op.c:17634:35: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
17634 |                     o->op_flags &=~ OPf_KIDS;
      |                                   ^
op.c:17885:31: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-132' [-Wsign-conversion]
17885 |                 o->op_flags = ((o->op_flags & ~(OPf_WANT|OPf_SPECIAL))
      |                               ^
op.c:17914:38: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-20' [-Wsign-conversion]
17914 |                     o->op_flags   &= ~(OPf_REF|OPf_WANT);
      |                                      ^
op.c:18332:29: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
18332 |                             (o->op_flags & ~OPf_WANT) | OPf_WANT_VOID;
      |                             ^
op.c:18438:25: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-97' [-Wsign-conversion]
18438 |                         ~(OPpASSIGN_COMMON_SCALAR|OPpASSIGN_COMMON_RC1);
      |                         ^
op.c: In function 'Perl_core_prototype':
op.c:18748:10: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
18748 |     oa = PL_opargs[i] >> OASHIFT;
      |          ^~~~~~~~~
op.c:18781:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18781 |     sv_setpvn(sv, str, n - 1);
      |                        ~~^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
op.c: In function 'Perl_coresub_op':
op.c:18809:25: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
18809 |         o->op_private = opnum-OP_EACH;
      |                         ^~~~~
op.c: In function 'const_av_xsub':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
op.c:19015:5: note: in expansion of macro 'Copy'
19015 |     Copy(AvARRAY(av), &ST(0), AvFILLp(av)+1, SV *);
      |     ^~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o perl.o perl.c
In file included from perl.h:7246,
                 from perl.c:38:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:3003:
perl.c: In function 'perl_construct':
embedvar.h:289:38: warning: conversion to 'size_t' {aka 'unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  289 | #define PL_stashpadmax          (vTHX->Istashpadmax)
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
perl.c:300:5: note: in expansion of macro 'Newxz'
  300 |     Newxz(PL_stashpad, PL_stashpadmax, HV *);
      |     ^~~~~
perl.c:300:24: note: in expansion of macro 'PL_stashpadmax'
  300 |     Newxz(PL_stashpad, PL_stashpadmax, HV *);
      |                        ^~~~~~~~~~~~~~
In file included from perl.h:4168:
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
perl.c: In function 'perl_destruct':
perl.c:603:54: warning: conversion from 'int' to 'signed char' may change value [-Wconversion]
  603 |             if (destruct_level < i) destruct_level = i;
      |                                                      ^
In file included from perl.h:4170:
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
hv.h:284:25: warning: conversion to 'I32' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  284 | #define HvMAX(hv)       ((XPVHV*)  SvANY(hv))->xhv_max
      |                         ^
perl.c:1309:25: note: in expansion of macro 'HvMAX'
 1309 |         const I32 max = HvMAX(PL_strtab);
      |                         ^~~~~
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
perl.c: In function 'Perl_call_atexit':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
perl.c:1605:5: note: in expansion of macro 'Renew'
 1605 |     Renew(PL_exitlist, PL_exitlistlen+1, PerlExitListEntry);
      |     ^~~~~
perl.c: In function 'perl_parse':
perl.c:1793:24: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1793 |          PL_origalen = s ? s - PL_origargv[0] + 1 : 0;
      |                        ^
perl.c: In function 'S_parse_body':
perl.c:2516:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 2516 |               PL_signals &= ~PERL_SIGNALS_UNSAFE_FLAG;
      |                          ^~
In file included from perl.h:5841:
perl.c: In function 'Perl_call_method':
perl.c:2940:47: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2940 |         ? sv_2mortal(newSVpvn_share(methname, len,0))
      |                                               ^~~
embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
perl.c:2940:22: note: in expansion of macro 'newSVpvn_share'
 2940 |         ? sv_2mortal(newSVpvn_share(methname, len,0))
      |                      ^~~~~~~~~~~~~~
perl.c: In function 'Perl_call_sv':
perl.c:3049:38: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3049 |         create_eval_scope(NULL, flags|G_FAKINGEVAL);
embed.h:1313:64: note: in definition of macro 'create_eval_scope'
 1313 | #define create_eval_scope(a,b)  Perl_create_eval_scope(aTHX_ a,b)
      |                                                                ^
perl.c: In function 'Perl_moreswitches':
perl.c:3448:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3448 |               numlen = e - s;
      |                        ^
perl.c:3474:26: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-256' to '4294967040' [-Wsign-conversion]
 3474 |               if (rschar & ~((U8)~0))
      |                          ^
perl.c:3498:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3498 |         PL_splitstr = savepvn(PL_splitstr, s - PL_splitstr);
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
perl.c:3539:42: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3539 |                 sv_catpvn(sv, start, end - start);
      |                                      ~~~~^~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:3539:17: note: in expansion of macro 'sv_catpvn'
 3539 |                 sv_catpvn(sv, start, end - start);
      |                 ^~~~~~~~~
perl.c:3541:39: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3541 |                 sv_catpvn(sv, start, s-start);
      |                                      ~^~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:3541:17: note: in expansion of macro 'sv_catpvn'
 3541 |                 sv_catpvn(sv, start, s-start);
      |                 ^~~~~~~~~
perl.c:3589:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3589 |             PL_inplace = savepvn(start, s - start);
      |                                         ~~^~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
perl.c:3607:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3607 |             incpush(s, e-s,
      |                        ~^~
embed.h:1830:51: note: in definition of macro 'incpush'
 1830 | #define incpush(a,b,c)          S_incpush(aTHX_ a,b,c)
      |                                                   ^
perl.c:3675:42: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3675 |                 sv_catpvn(sv, start, end - start);
      |                                      ~~~~^~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:3675:17: note: in expansion of macro 'sv_catpvn'
 3675 |                 sv_catpvn(sv, start, end - start);
      |                 ^~~~~~~~~
perl.c:3682:39: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3682 |                 sv_catpvn(sv, start, s-start);
      |                                      ~^~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:3682:17: note: in expansion of macro 'sv_catpvn'
 3682 |                 sv_catpvn(sv, start, s-start);
      |                 ^~~~~~~~~
perl.c:3686:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3686 |                 sv_catpvn(sv, s, end - s);
      |                                  ~~~~^~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:3686:17: note: in expansion of macro 'sv_catpvn'
 3686 |                 sv_catpvn(sv, s, end - s);
      |                 ^~~~~~~~~
perl.c: In function 'Perl_init_dbargs':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
perl.c:4284:5: note: in expansion of macro 'AvREIFY_only'
 4284 |     AvREIFY_only(PL_dbargs);
      |     ^~~~~~~~~~~~
perl.c: In function 'Perl_init_stacks':
handy.h:2763:85: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2763 | #define Newxz(v,n,t)    (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))
      |                                                                                     ^~~
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
perl.c:4376:5: note: in expansion of macro 'Newxz'
 4376 |     Newxz(PL_savestack, size, ANY);
      |     ^~~~~
perl.c: In function 'Perl_init_argv_symbols':
perl.c:4516:63: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4516 |                 sv_setpv(GvSV(gv_fetchpvn_flags(start_name, s - start_name,
      |                                                             ~~^~~~~~~~~~~~
embed.h:685:53: note: in definition of macro 'sv_setpv'
  685 | #define sv_setpv(a,b)           Perl_sv_setpv(aTHX_ a,b)
      |                                                     ^
gv.h:101:26: note: in expansion of macro 'GvGP'
  101 | #define GvSV(gv)        (GvGP(gv)->gp_sv)
      |                          ^~~~
perl.c:4516:26: note: in expansion of macro 'GvSV'
 4516 |                 sv_setpv(GvSV(gv_fetchpvn_flags(start_name, s - start_name,
      |                          ^~~~
perl.c:4516:31: note: in expansion of macro 'gv_fetchpvn_flags'
 4516 |                 sv_setpv(GvSV(gv_fetchpvn_flags(start_name, s - start_name,
      |                               ^~~~~~~~~~~~~~~~~
perl.c: In function 'S_init_postdump_symbols':
perl.c:4599:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4599 |           count = env_copy - env;
      |                   ^~~~~~~~
perl.c:4608:29: warning: conversion to 'IV' {aka 'long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4608 |               hv_ksplit(hv, count);
      |                             ^~~~~
embed.h:259:56: note: in definition of macro 'hv_ksplit'
  259 | #define hv_ksplit(a,b)          Perl_hv_ksplit(aTHX_ a,b)
      |                                                        ^
perl.c:4621:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4621 |               nlen = s - old_var;
      |                      ^
hv.h:504:42: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  504 |     cBOOL(hv_common_key_len((hv), (key), (klen), HV_FETCH_ISEXISTS, NULL, 0))
      |                                          ^~~~~~
handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
hv.h:504:11: note: in expansion of macro 'hv_common_key_len'
  504 |     cBOOL(hv_common_key_len((hv), (key), (klen), HV_FETCH_ISEXISTS, NULL, 0))
      |           ^~~~~~~~~~~~~~~~~
perl.c:4634:17: note: in expansion of macro 'hv_exists'
 4634 |             if (hv_exists(hv, old_var, nlen)) {
      |                 ^~~~~~~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
perl.c:4644:23: note: in expansion of macro 'hv_fetch'
 4644 |                 dup = hv_fetch(dups, name, nlen, TRUE);
      |                       ^~~~~~~~
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
perl.c:4654:19: note: in expansion of macro 'hv_store'
 4654 |             (void)hv_store(hv, old_var, nlen, sv, 0);
      |                   ^~~~~~~~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.h:400:41: note: in expansion of macro 'HeKLEN'
  400 |                                  ((lp = HeKLEN(he)), HeKEY(he)))
      |                                         ^~~~~~
perl.c:4664:38: note: in expansion of macro 'HePV'
 4664 |                   const char *name = HePV(entry, nlen);
      |                                      ^~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
perl.c:4667:31: note: in expansion of macro 'hv_fetch'
 4667 |                   SV **valp = hv_fetch(hv, name, nlen, 0);
      |                               ^~~~~~~~
perl.c: In function 'S_mayberelocate':
perl.c:4892:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4892 |                              SvEND(prefix_sv) - prefix);
perl.c:4903:69: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4903 |                                                    SvEND(prefix_sv) - prefix))))
perl.c: In function 'S_incpush':
perl.c:5031:35: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5031 |             av_unshift(inc, extra + push_basedir);
      |                             ~~~~~~^~~~~~~~~~~~~~
embed.h:74:57: note: in definition of macro 'av_unshift'
   74 | #define av_unshift(a,b)         Perl_av_unshift(aTHX_ a,b)
      |                                                         ^
perl.c:5033:31: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5033 |                 av_store(inc, extra, libdir);
      |                               ^~~~~
embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
perl.c:5046:65: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5046 |                 av_store(inc, extra, SvREFCNT_inc(*av_fetch(av, extra, FALSE)));
      |                                                                 ^~~~~
embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
handy.h:107:32: note: in expansion of macro 'MUTABLE_PTR'
  107 | #define MUTABLE_SV(p)   ((SV *)MUTABLE_PTR(p))
      |                                ^~~~~~~~~~~
sv.h:346:59: note: in expansion of macro 'MUTABLE_SV'
  346 | #define SvREFCNT_inc(sv)                Perl_SvREFCNT_inc(MUTABLE_SV(sv))
      |                                                           ^~~~~~~~~~
perl.c:5046:38: note: in expansion of macro 'SvREFCNT_inc'
 5046 |                 av_store(inc, extra, SvREFCNT_inc(*av_fetch(av, extra, FALSE)));
      |                                      ^~~~~~~~~~~~
perl.c:5046:52: note: in expansion of macro 'av_fetch'
 5046 |                 av_store(inc, extra, SvREFCNT_inc(*av_fetch(av, extra, FALSE)));
      |                                                    ^~~~~~~~
perl.c:5046:31: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5046 |                 av_store(inc, extra, SvREFCNT_inc(*av_fetch(av, extra, FALSE)));
      |                               ^~~~~
embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
perl.c: In function 'S_incpush_use_sep':
perl.c:5086:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5086 |     while ((s = (const char*)memchr(p, PERLLIB_SEP, end - p))) {
      |                                                     ~~~~^~~
perl.c: In function 'Perl_my_exit':
perl.c:5203:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 5203 |         PL_exit_flags &= ~PERL_EXIT_ABORT;
      |                          ^
perl.h:3715:30: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3715 |             PL_statusvalue = (n);               \
      |                              ^
perl.h:3720:31: note: in expansion of macro 'STATUS_UNIX_SET'
 3720 | #   define STATUS_EXIT_SET(n) STATUS_UNIX_SET(n)
      |                               ^~~~~~~~~~~~~~~
perl.c:5213:9: note: in expansion of macro 'STATUS_EXIT_SET'
 5213 |         STATUS_EXIT_SET(status);
      |         ^~~~~~~~~~~~~~~
perl.c: In function 'Perl_my_failure_exit':
perl.c:5308:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 5308 |         PL_exit_flags &= ~PERL_EXIT_ABORT;
      |                          ^
perl.c: In function 'read_e_script':
perl.c:5336:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5336 |     const char *nl = (char *) memchr(p, '\n', e - p);
      |                                               ~~^~~
perl.c:5346:28: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5346 |     sv_catpvn(buf_sv, p, nl-p);
      |                          ~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
perl.c:5346:5: note: in expansion of macro 'sv_catpvn'
 5346 |     sv_catpvn(buf_sv, p, nl-p);
      |     ^~~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o av.o av.c
In file included from perl.h:7246,
                 from av.c:20:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:3003:
av.c: In function 'Perl_av_extend_guts':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
av.c:115:13: note: in expansion of macro 'Move'
  115 |             Move(*arrayp, *allocp, AvFILLp(av)+1, SV*);
      |             ^~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
av.c:165:13: note: in expansion of macro 'Renew'
  165 |             Renew(*allocp,newmax+1, SV*);
      |             ^~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
av.c:189:13: note: in expansion of macro 'Newx'
  189 |             Newx(*allocp, *maxp+1, SV*);
      |             ^~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
av.c:202:13: note: in expansion of macro 'Zero'
  202 |             Zero(*allocp + ary_offset,to_null,SV*);
      |             ^~~~
av.c: In function 'Perl_av_fetch':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
av.c: In function 'Perl_av_new_alloc':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
av.c:426:5: note: in expansion of macro 'Newx'
  426 |     Newx(ary, size, SV*); /* Newx performs the memwrap check */
      |     ^~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
av.c:432:9: note: in expansion of macro 'Zero'
  432 |         Zero(ary, size, SV*);
      |         ^~~~
av.c: In function 'Perl_av_make':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
av.c:462:9: note: in expansion of macro 'Newx'
  462 |         Newx(ary,size,SV*);
      |         ^~~~
av.c: In function 'Perl_av_unshift':
av.c:765:55: warning: conversion to 'U32' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  765 |                             G_DISCARD | G_UNDEF_FILL, num);
      |                                                       ^~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
av.c:792:9: note: in expansion of macro 'Move'
  792 |         Move(ary, ary + num, i + 1, SV*);
      |         ^~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o scope.o scope.c
In file included from perl.h:7246,
                 from scope.c:27:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:4170:
scope.c: In function 'Perl_new_stackinfo':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
In file included from perl.h:3003:
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
scope.c:88:5: note: in expansion of macro 'Newx'
   88 |     Newx(si->si_cxstack, cxitems, PERL_CONTEXT);
      |     ^~~~
handy.h:2799:93: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2799 | #define PoisonWith(d,n,t,b)     (MEM_WRAP_CHECK_(n,t) (void)memset((char*)(d), (U8)(b), (n) * sizeof(t)))
      |                                                                                             ^
handy.h:2800:33: note: in expansion of macro 'PoisonWith'
 2800 | #define PoisonNew(d,n,t)        PoisonWith(d,n,t,0xAB)
      |                                 ^~~~~~~~~~
scope.c:91:5: note: in expansion of macro 'PoisonNew'
   91 |     PoisonNew(si->si_cxstack, cxitems, PERL_CONTEXT);
      |     ^~~~~~~~~
scope.c: In function 'Perl_cxinc':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:100:5: note: in expansion of macro 'Renew'
  100 |     Renew(cxstack, new_max + 1, PERL_CONTEXT);
      |     ^~~~~
handy.h:2799:93: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2799 | #define PoisonWith(d,n,t,b)     (MEM_WRAP_CHECK_(n,t) (void)memset((char*)(d), (U8)(b), (n) * sizeof(t)))
      |                                                                                             ^
handy.h:2800:33: note: in expansion of macro 'PoisonWith'
 2800 | #define PoisonNew(d,n,t)        PoisonWith(d,n,t,0xAB)
      |                                 ^~~~~~~~~~
scope.c:104:5: note: in expansion of macro 'PoisonNew'
  104 |     PoisonNew(cxstack + old_max + 1, new_max - old_max, PERL_CONTEXT);
      |     ^~~~~~~~~
scope.c: In function 'Perl_push_scope':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:122:9: note: in expansion of macro 'Renew'
  122 |         Renew(PL_scopestack, new_max, I32);
      |         ^~~~~
scope.c: In function 'Perl_markstack_grow':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:157:5: note: in expansion of macro 'Renew'
  157 |     Renew(PL_markstack, newmax, I32);
      |     ^~~~~
scope.c: In function 'Perl_savestack_grow':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:177:5: note: in expansion of macro 'Renew'
  177 |     Renew(PL_savestack, new_max + SS_MAXPUSH, ANY);
      |     ^~~~~
scope.c: In function 'Perl_savestack_grow_cnt':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:187:5: note: in expansion of macro 'Renew'
  187 |     Renew(PL_savestack, new_max + SS_MAXPUSH, ANY);
      |     ^~~~~
scope.c: In function 'Perl_tmps_grow_p':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
scope.c:218:5: note: in expansion of macro 'Renew'
  218 |     Renew(PL_tmps_stack, extend_to + 1, SV*);
      |     ^~~~~
scope.c: In function 'Perl_free_tmps':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
scope.c: In function 'Perl_save_I32':
scope.c:553:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  553 |     UV type = ((I32)((U32)i << SAVE_TIGHT_SHIFT) | SAVEt_I32_SMALL);
      |               ^
scope.c: In function 'Perl_save_strlen':
scope.c:572:18: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  572 |     const IV i = *ptr;
      |                  ^
scope.c:573:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  573 |     UV type = ((I32)((U32)i << SAVE_TIGHT_SHIFT) | SAVEt_STRLEN_SMALL);
      |               ^
scope.c: In function 'Perl_save_clearsv':
scope.c:687:23: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  687 |     const UV offset = svp - PL_curpad;
      |                       ^~~
In file included from perl.h:5841:
scope.c: In function 'Perl_save_hints':
perl.h:5533:30: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5533 | #define PL_hints PL_compiling.cop_hints
embed.h:544:60: note: in definition of macro 'save_pushi32ptr'
  544 | #define save_pushi32ptr(a,b,c)  Perl_save_pushi32ptr(aTHX_ a,b,c)
      |                                                            ^
scope.c:811:25: note: in expansion of macro 'PL_hints'
  811 |         save_pushi32ptr(PL_hints, save_cophh, SAVEt_HINTS | (PL_prevailing_version << 8));
      |                         ^~~~~~~~
scope.c: In function 'Perl_save_alloc':
scope.c:922:44: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  922 |     const UV elems = 1 + ((size + pad - 1) / sizeof(*PL_savestack));
      |                                            ^
scope.c:930:18: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  930 |     SSGROW(elems + 1);
      |            ~~~~~~^~~
embed.h:560:63: note: in definition of macro 'savestack_grow_cnt'
  560 | #define savestack_grow_cnt(a)   Perl_savestack_grow_cnt(aTHX_ a)
      |                                                               ^
scope.c:930:5: note: in expansion of macro 'SSGROW'
  930 |     SSGROW(elems + 1);
      |     ^~~~~~
scope.c:932:21: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  932 |     PL_savestack_ix += elems;
      |                     ^~
scope.c:932:24: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  932 |     PL_savestack_ix += elems;
      |                        ^~~~~
scope.c: In function 'Perl_leave_scope':
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1144:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-131073' to '4294836223' [-Wsign-conversion]
 1144 | #define SvPADTMP_off(sv)        (SvFLAGS(sv) &= ~SVs_PADTMP)
      |                                              ^~
sv.h:1144:46: note: in definition of macro 'SvPADTMP_off'
 1144 | #define SvPADTMP_off(sv)        (SvFLAGS(sv) &= ~SVs_PADTMP)
      |                                              ^~
scope.c:1430:29: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1430 |             PL_savestack_ix -= uv >> SAVE_TIGHT_SHIFT;
      |                             ^~
scope.c:1430:32: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1430 |             PL_savestack_ix -= uv >> SAVE_TIGHT_SHIFT;
      |                                ^~
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o doop.o doop.c
In file included from perl.h:7246,
                 from doop.c:24:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
doop.c: In function 'S_do_trans_simple':
doop.c:85:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   85 |             const UV c = utf8n_to_uvchr(s, send - s, &ulen, UTF8_ALLOW_DEFAULT);
      |                                            ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
doop.c:85:26: note: in expansion of macro 'utf8n_to_uvchr'
   85 |             const UV c = utf8n_to_uvchr(s, send - s, &ulen, UTF8_ALLOW_DEFAULT);
      |                          ^~~~~~~~~~~~~~
In file included from perl.h:5841:
doop.c:98:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   98 |             sv_setpvn(sv, (char*)dstart, d - dstart);
      |                                          ~~^~~~~~~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
doop.c:103:13: note: in expansion of macro 'SvCUR_set'
  103 |             SvCUR_set(sv, d - dstart);
      |             ^~~~~~~~~
doop.c: In function 'S_do_trans_count':
doop.c:152:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  152 |             const UV c = utf8n_to_uvchr(s, send - s, &ulen, UTF8_ALLOW_DEFAULT);
      |                                            ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
doop.c:152:26: note: in expansion of macro 'utf8n_to_uvchr'
  152 |             const UV c = utf8n_to_uvchr(s, send - s, &ulen, UTF8_ALLOW_DEFAULT);
      |                          ^~~~~~~~~~~~~~
doop.c: In function 'S_do_trans_complex':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
doop.c:241:9: note: in expansion of macro 'SvCUR_set'
  241 |         SvCUR_set(sv, d - dstart);
      |         ^~~~~~~~~
doop.c:267:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  267 |             const UV comp = utf8n_to_uvchr(s, send - s, &len,
      |                                               ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
doop.c:267:29: note: in expansion of macro 'utf8n_to_uvchr'
  267 |             const UV comp = utf8n_to_uvchr(s, send - s, &len,
      |                             ^~~~~~~~~~~~~~
doop.c:306:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  306 |             sv_setpvn(sv, (char*)dstart, d - dstart);
      |                                          ~~^~~~~~~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
doop.c:311:13: note: in expansion of macro 'SvCUR_set'
  311 |             SvCUR_set(sv, d - dstart);
      |             ^~~~~~~~~
doop.c: In function 'S_do_trans_invmap':
doop.c:561:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  561 |         sv_setpvn(sv, (char*)d0, d - d0);
      |                                  ~~^~~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
doop.c:566:9: note: in expansion of macro 'SvCUR_set'
  566 |         SvCUR_set(sv, d - d0);
      |         ^~~~~~~~~
doop.c: In function 'Perl_do_join':
doop.c:672:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  672 |     len = (items > 0 ? (delimlen * (items - 1) ) : 0);
      |                                  ^
doop.c:674:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  674 |     if (SvLEN(sv) < len + items) {      /* current length is way too short */
      |                         ^
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
doop.c:708:48: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  708 |             sv_catpvn_flags(sv,delims,delimlen,delimflag);
      |                                                ^~~~~~~~~
embed.h:598:74: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                          ^
doop.c: In function 'Perl_do_sprintf':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
doop.c: In function 'Perl_do_vecget':
doop.c:776:63: warning: conversion to 'U32' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  776 |                             SvPV_flags(sv, srclen, (svpv_flags|SV_GMAGIC));
      |                                                    ~~~~~~~~~~~^~~~~~~~~~~
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
doop.c:776:29: note: in expansion of macro 'SvPV_flags'
  776 |                             SvPV_flags(sv, srclen, (svpv_flags|SV_GMAGIC));
      |                             ^~~~~~~~~~
doop.c:791:58: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  791 |             s = (unsigned char *) SvPV_flags(sv, srclen, svpv_flags);
      |                                                          ^~~~~~~~~~
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
doop.c:791:35: note: in expansion of macro 'SvPV_flags'
  791 |             s = (unsigned char *) SvPV_flags(sv, srclen, svpv_flags);
      |                                   ^~~~~~~~~~
doop.c:800:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  800 |         STRLEN bitoffs = ((offset % 8) * size) % 8;
      |                                        ^
doop.c:801:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  801 |         STRLEN uoffset = offset / (8 / size);
      |                                 ^
doop.c:806:18: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long long unsigned int' may change the sign of the result [-Wsign-conversion]
  806 |         retnum = (s[uoffset] >> bitoffs) & nBIT_MASK(size);
      |                  ^
doop.c:819:33: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  819 |         if (offset > Size_t_MAX / n - 1) /* would overflow */
      |                                 ^
doop.c:822:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  822 |         uoffset = offset * n;
      |                          ^
doop.c:822:19: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  822 |         uoffset = offset * n;
      |                   ^~~~~~
doop.c: In function 'Perl_do_vecset':
sv.h:1502:25: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1502 | #define LvTARGLEN(sv)   ((XPVLV*)  SvANY(sv))->xlv_targlen
      |                         ^
doop.c:907:12: note: in expansion of macro 'LvTARGLEN'
  907 |     size = LvTARGLEN(sv);
      |            ^~~~~~~~~
doop.c:913:30: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  913 |         bitoffs = ((offset%8)*size)%8;
      |                              ^
doop.c:914:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  914 |         offset /= 8/size;
      |                ^~
doop.c:918:33: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  918 |         if (offset > Size_t_MAX / n - 1) /* would overflow */
      |                                 ^
doop.c:920:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  920 |         offset *= n;
      |                ^~
doop.c:923:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  923 |     len = (bitoffs + size + 7)/8;       /* required number of bytes */
      |                    ^
In file included from perl.h:3003:
handy.h:315:22: warning: conversion from 'long long unsigned int' to 'I32' {aka 'int'} may change value [-Wconversion]
  315 | #define nBIT_MASK(n) ((UINTMAX_C(1) << (n)) - 1)
      |                      ^
doop.c:933:16: note: in expansion of macro 'nBIT_MASK'
  933 |         mask = nBIT_MASK(size);
      |                ^~~~~~~~~
doop.c:934:14: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  934 |         lval &= mask;
      |              ^~
doop.c:935:22: warning: conversion from 'I32' {aka 'int'} to 'unsigned char' may change value [-Wconversion]
  935 |         s[offset] &= ~(mask << bitoffs);
      |                      ^
doop.c:936:22: warning: conversion from 'long unsigned int' to 'unsigned char' may change value [-Wconversion]
  936 |         s[offset] |= lval << bitoffs;
      |                      ^~~~
doop.c: In function 'Perl_do_vop':
doop.c:1019:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1019 |         left_non_downgraded_len -= left_non_downgraded - save_lc;
      |                                 ^~
doop.c:1032:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1032 |         right_non_downgraded_len -= right_non_downgraded - save_rc;
      |                                  ^~
In file included from perl.h:4168:
doop.c: In function 'Perl_do_kv':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
doop.c:1233:21: note: in expansion of macro 'HvUSEDKEYS'
 1233 |                 i = HvUSEDKEYS(keys);
      |                     ^~~~~~~~~~
hv.h:351:33: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                 ^
doop.c:1233:21: note: in expansion of macro 'HvUSEDKEYS'
 1233 |                 i = HvUSEDKEYS(keys);
      |                     ^~~~~~~~~~
doop.c:1252:29: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1252 |     hv_pushkv(keys, (dokeys | (dovalues << 1)));
      |                     ~~~~~~~~^~~~~~~~~~~~~~~~~~
embed.h:1361:56: note: in definition of macro 'hv_pushkv'
 1361 | #define hv_pushkv(a,b)          Perl_hv_pushkv(aTHX_ a,b)
      |                                                        ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o doio.o doio.c
In file included from perl.h:7246,
                 from doio.c:27:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
doio.c: In function 'Perl_do_openn':
doio.c:508:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  508 |         return do_open_raw(gv, oname, len, rawmode, rawperm, NULL);
      |                                       ^~~
embed.h:1334:68: note: in definition of macro 'do_open_raw'
 1334 | #define do_open_raw(a,b,c,d,e,f)        Perl_do_open_raw(aTHX_ a,b,c,d,e,f)
      |                                                                    ^
doio.c:510:32: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  510 |     return do_open6(gv, oname, len, supplied_fp, svp, num_svs);
      |                                ^~~
embed.h:1333:57: note: in definition of macro 'do_open6'
 1333 | #define do_open6(a,b,c,d,e,f)   Perl_do_open6(aTHX_ a,b,c,d,e,f)
      |                                                         ^
doio.c:510:55: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  510 |     return do_open6(gv, oname, len, supplied_fp, svp, num_svs);
      |                                                       ^~~~~~~
embed.h:1333:63: note: in definition of macro 'do_open6'
 1333 | #define do_open6(a,b,c,d,e,f)   Perl_do_open6(aTHX_ a,b,c,d,e,f)
      |                                                               ^
doio.c: In function 'Perl_do_open_raw':
doio.c:573:22: warning: conversion from 'int' to 'char' may change value [-Wconversion]
  573 |         IoTYPE(io) = PerlIO_intmode2str(rawmode, &mode[ix], &writing);
      |                      ^~~~~~~~~~~~~~~~~~
doio.c: In function 'Perl_do_open6':
doio.c:655:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  655 |             len  = tend-type;
      |                    ^~~~
doio.c:679:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  679 |                 len = tend-type;
      |                       ^~~~
iperlsys.h:1118:59: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1118 | #  define PerlProc_popen_list(m,n,a)    my_popen_list((m),(n),(a))
      |                                                           ^~~
embed.h:341:60: note: in definition of macro 'my_popen_list'
  341 | #define my_popen_list(a,b,c)    Perl_my_popen_list(aTHX_ a,b,c)
      |                                                            ^
doio.c:704:22: note: in expansion of macro 'PerlProc_popen_list'
  704 |                 fp = PerlProc_popen_list(mode, num_svs, svp);
      |                      ^~~~~~~~~~~~~~~~~~~
sv.h:1822:18: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1822 | #define SvUV(sv) (SvUOK_nog(sv) ? SvUVX(sv) : sv_2uv(sv))
      |                  ^
doio.c:761:37: note: in expansion of macro 'SvUV'
  761 |                         wanted_fd = SvUV(*svp);
      |                                     ^~~~
doio.c:776:78: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  776 |                             GV * const thatgv = gv_fetchpvn_flags(type, tend - type,
      |                                                                         ~~~~~^~~~~~
embed.h:231:72: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
doio.c:827:84: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  827 |                         if (!(fp = PerlIO_openn(aTHX_ type,mode,wanted_fd,0,0,NULL,num_svs,svp))) {
      |                                                                                    ^~~~~~~
doio.c:848:71: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  848 |                         fp = PerlIO_openn(aTHX_ type,mode,-1,0,0,NULL,num_svs,svp);
      |                                                                       ^~~~~~~
doio.c:851:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  851 |                         SV *namesv = newSVpvn_flags(type, tend - type, SVs_TEMP);
      |                                                           ~~~~~^~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
doio.c:883:67: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  883 |                     fp = PerlIO_openn(aTHX_ type,mode,-1,0,0,NULL,num_svs,svp);
      |                                                                   ^~~~~~~
doio.c:886:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  886 |                     SV *namesv  = newSVpvn_flags(type, tend - type, SVs_TEMP);
      |                                                        ~~~~~^~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
doio.c:907:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  907 |                 len  = tend-type;
      |                        ^~~~
iperlsys.h:1118:59: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1118 | #  define PerlProc_popen_list(m,n,a)    my_popen_list((m),(n),(a))
      |                                                           ^~~
embed.h:341:60: note: in definition of macro 'my_popen_list'
  341 | #define my_popen_list(a,b,c)    Perl_my_popen_list(aTHX_ a,b,c)
      |                                                            ^
doio.c:928:22: note: in expansion of macro 'PerlProc_popen_list'
  928 |                 fp = PerlProc_popen_list(mode,num_svs,svp);
      |                      ^~~~~~~~~~~~~~~~~~~
doio.c:965:67: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  965 |                     fp = PerlIO_openn(aTHX_ type,mode,-1,0,0,NULL,num_svs,svp);
      |                                                                   ^~~~~~~
doio.c:968:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  968 |                     SV *namesv = newSVpvn_flags(type, tend - type, SVs_TEMP);
      |                                                       ~~~~~^~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
doio.c: In function 'S_openn_cleanup':
doio.c:1135:20: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-33' [-Wsign-conversion]
 1135 |     IoFLAGS(io) &= ~IOf_NOLINE;
      |                    ^
doio.c: In function 'S_openindirtemp':
doio.c:1194:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1194 |         sv_setpvn(temp_out_name, p, sep - p + 1);
      |                                     ~~~~~~~~^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
doio.c:1201:23: warning: conversion to 'int' from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1201 |       int old_umask = umask(0177);
      |                       ^~~~~
doio.c:1203:13: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1203 |       umask(old_umask);
      |             ^~~~~~~~~
doio.c: In function 'Perl_nextargv':
doio.c:1375:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 1375 |         IoFLAGS(io) &= ~IOf_START;
      |                        ^
doio.c:1440:31: warning: conversion to 'int' from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1440 |                 PL_filemode = statbuf.st_mode;
      |                               ^~~~~~~
doio.c:1457:55: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1457 |                             sv_catpvn(sv, begin, star - begin);
      |                                                  ~~~~~^~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
doio.c:1457:29: note: in expansion of macro 'sv_catpvn'
 1457 |                             sv_catpvn(sv, begin, star - begin);
      |                             ^~~~~~~~~
embedvar.h:136:38: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  136 | #define PL_filemode             (vTHX->Ifilemode)
      |                                 ~~~~~^~~~~~~~~~~~
embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
doio.c:1500:54: note: in expansion of macro 'newSVuv'
 1500 |                 av_store(magic_av, ARGVMG_ORIG_MODE, newSVuv(PL_filemode));
      |                                                      ^~~~~~~
doio.c:1500:62: note: in expansion of macro 'PL_filemode'
 1500 |                 av_store(magic_av, ARGVMG_ORIG_MODE, newSVuv(PL_filemode));
      |                                                              ^~~~~~~~~~~
In file included from perl.h:5810:
embedvar.h:136:38: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  136 | #define PL_filemode             (vTHX->Ifilemode)
      |                                 ~~~~~^~~~~~~~~~~~
embedvar.h:136:38: note: in definition of macro 'PL_filemode'
  136 | #define PL_filemode             (vTHX->Ifilemode)
      |                                      ^~
doio.c: In function 'Perl_mode_from_discipline':
doio.c:2068:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2068 |                 len -= end-s;
      |                     ^~
In file included from perl.h:3003:
doio.c: In function 'Perl_do_aexec5':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
doio.c:2383:9: note: in expansion of macro 'Newx'
 2383 |         Newx(argv, sp - mark + 1, const char*);
      |         ^~~~
doio.c: In function 'Perl_do_exec3':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
doio.c:2522:5: note: in expansion of macro 'Newx'
 2522 |     Newx(argv, (s - cmd) / 2 + 2, const char*);
      |     ^~~~
doio.c:2524:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2524 |     cmd = savepvn(cmd, s-cmd);
      |                        ~^~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
doio.c: In function 'Perl_apply':
doio.c:2613:47: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2613 |                         } else if (fchmod(fd, val))
      |                                               ^~~
In file included from perl.h:4114:
iperlsys.h:753:55: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  753 | #  define PerlLIO_chmod(file, mode)     chmod((file), (mode))
      |                                                       ^~~~~~
doio.c:2628:25: note: in expansion of macro 'PerlLIO_chmod'
 2628 |                         PerlLIO_chmod(name, val)) {
      |                         ^~~~~~~~~~~~~
doio.c:2654:47: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2654 |                         } else if (fchown(fd, val, val2))
      |                                               ^~~
doio.c:2654:52: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2654 |                         } else if (fchown(fd, val, val2))
      |                                                    ^~~~
iperlsys.h:754:63: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  754 | #  define PerlLIO_chown(file, owner, grp)       chown((file), (owner), (grp))
      |                                                               ^~~~~~~
doio.c:2669:25: note: in expansion of macro 'PerlLIO_chown'
 2669 |                         PerlLIO_chown(name, val, val2)) {
      |                         ^~~~~~~~~~~~~
iperlsys.h:754:72: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  754 | #  define PerlLIO_chown(file, owner, grp)       chown((file), (owner), (grp))
      |                                                                        ^~~~~
doio.c:2669:25: note: in expansion of macro 'PerlLIO_chown'
 2669 |                         PerlLIO_chown(name, val, val2)) {
      |                         ^~~~~~~~~~~~~
doio.c: In function 'S_ingroup':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
doio.c:2965:13: note: in expansion of macro 'Newx'
 2965 |             Newx(gary, anum, Groups_t);
      |             ^~~~
doio.c: In function 'Perl_do_ipcctl':
perl.h:2216:25: warning: conversion to 'int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 2216 | #define PTR2nat(p)      (PTRV)(p)       /* pointer to integer of PTRSIZE */
      |                         ^
doio.c:3134:31: note: in expansion of macro 'PTR2nat'
 3134 |                 unsemds.val = PTR2nat(a);
      |                               ^~~~~~~
doio.c: In function 'Perl_do_msgsnd':
doio.c:3175:23: warning: conversion to 'I32' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3175 |     const I32 msize = len - sizeof(long);
      |                       ^~~
doio.c:3184:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3184 |       return msgsnd(id, (struct msgbuf *)mbuf, msize, flags);
      |                                                ^~~~~
doio.c: In function 'Perl_do_msgrcv':
doio.c:3218:37: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3218 |     mbuf = SvGROW(mstr, sizeof(long)+msize+1);
      |                                     ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
doio.c:3218:37: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3218 |     mbuf = SvGROW(mstr, sizeof(long)+msize+1);
      |                                     ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
doio.c:3218:12: note: in expansion of macro 'SvGROW'
 3218 |     mbuf = SvGROW(mstr, sizeof(long)+msize+1);
      |            ^~~~~~
doio.c:3222:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3222 |         ret = msgrcv(id, (struct msgbuf *)mbuf, msize, mtype, flags);
      |                                                 ^~~~~
doio.c:3228:37: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3228 |         SvCUR_set(mstr, sizeof(long)+ret);
      |                                     ^
sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
doio.c: In function 'Perl_do_semop':
doio.c:3264:28: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3264 |         const int nsops  = opsize / (3 * sizeof (short));
      |                            ^~~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
doio.c:3271:9: note: in expansion of macro 'Newx'
 3271 |         Newx (temps, nsops, struct sembuf);
      |         ^~~~
doio.c:3274:26: warning: conversion to 'short unsigned int' from 'short int' may change the sign of the result [-Wsign-conversion]
 3274 |             t->sem_num = *o++;
      |                          ^
doio.c:3279:35: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3279 |         result = semop(id, temps, nsops);
      |                                   ^~~~~
doio.c: In function 'Perl_do_shmio':
doio.c:3307:25: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3307 |         || (size_t)mpos + msize > (size_t)shmds.shm_segsz) {
      |                         ^
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
doio.c:3329:9: note: in expansion of macro 'Copy'
 3329 |         Copy(shm + mpos, mbuf, msize, char);
      |         ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
doio.c:3330:9: note: in expansion of macro 'SvCUR_set'
 3330 |         SvCUR_set(mstr, msize);
      |         ^~~~~~~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
doio.c:3341:9: note: in expansion of macro 'Copy'
 3341 |         Copy(mbuf, shm + mpos, n, char);
      |         ^~~~
doio.c:3343:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3343 |             memzero(shm + mpos + n, msize - n);
      |                                     ~~~~~~^~~
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o dump.o dump.c
In file included from perl.h:7246,
                 from dump.c:29:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
dump.c: In function 'Perl_pv_escape':
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
dump.c:204:26: note: in expansion of macro 'my_snprintf'
  204 |                 chsize = my_snprintf( octbuf, PV_ESCAPE_OCTBUFSIZE,
      |                          ^~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
dump.c:207:26: note: in expansion of macro 'my_snprintf'
  207 |                 chsize = my_snprintf( octbuf, PV_ESCAPE_OCTBUFSIZE,
      |                          ^~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
dump.c:239:34: note: in expansion of macro 'my_snprintf'
  239 |                         chsize = my_snprintf( octbuf, PV_ESCAPE_OCTBUFSIZE,
      |                                  ^~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
dump.c:244:34: note: in expansion of macro 'my_snprintf'
  244 |                         chsize = my_snprintf( octbuf, PV_ESCAPE_OCTBUFSIZE,
      |                                  ^~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
dump.c:247:34: note: in expansion of macro 'my_snprintf'
  247 |                         chsize = my_snprintf( octbuf, PV_ESCAPE_OCTBUFSIZE,
      |                                  ^~~~~~~~~~~
dump.c:275:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  275 |         *escaped= pv - str;
      |                   ^~
In file included from perl.h:5841:
dump.c: In function '_pv_display_flags':
dump.c:366:69: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  366 |     pv_pretty( dsv, pv, cur, pvlim, NULL, NULL, PERL_PV_PRETTY_DUMP | pretty_flags );
embed.h:477:74: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                          ^
dump.c: In function 'Perl_sv_peek':
dump.c:496:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  496 |         if (SvCUR(t) + unref > 10) {
      |                      ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
dump.c:497:13: note: in expansion of macro 'SvCUR_set'
  497 |             SvCUR_set(t, unref + 3);
      |             ^~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:510:26: note: in expansion of macro 'generic_pv_escape'
  510 |                        ? generic_pv_escape( tmp, GvNAME(gvcv), GvNAMELEN(gvcv), GvNAMEUTF8(gvcv))
      |                          ^~~~~~~~~~~~~~~~~
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
dump.c:510:64: note: in expansion of macro 'GvNAMELEN'
  510 |                        ? generic_pv_escape( tmp, GvNAME(gvcv), GvNAMELEN(gvcv), GvNAMEUTF8(gvcv))
      |                                                                ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:510:26: note: in expansion of macro 'generic_pv_escape'
  510 |                        ? generic_pv_escape( tmp, GvNAME(gvcv), GvNAMELEN(gvcv), GvNAMEUTF8(gvcv))
      |                          ^~~~~~~~~~~~~~~~~
dump.c: In function 'S_sequence_num':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
dump.c:997:11: note: in expansion of macro 'hv_fetch'
  997 |     seq = hv_fetch(PL_op_sequence, key, len, TRUE);
      |           ^~~~~~~~
dump.c: In function 'S_do_op_dump_bar':
dump.c:1193:35: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 1193 |                         oppriv -= (1<<bit);
      |                                   ^
hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:1277:32: note: in expansion of macro 'generic_pv_escape'
 1277 |                                generic_pv_escape(tmpsv, hvname,
      |                                ^~~~~~~~~~~~~~~~~
hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
dump.c:1278:35: note: in expansion of macro 'HvNAMELEN'
 1278 |                                   HvNAMELEN(stash), HvNAMEUTF8(stash)));
      |                                   ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:1277:32: note: in expansion of macro 'generic_pv_escape'
 1277 |                                generic_pv_escape(tmpsv, hvname,
      |                                ^~~~~~~~~~~~~~~~~
dump.c:1373:31: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1373 |             SSize_t i, size = tbl->size;
      |                               ^~~
dump.c: In function 'Perl_do_magic_dump':
dump.c:1495:31: warning: conversion to 'U32' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1495 |                 const U32 i = v - PL_magic_vtables;
      |                               ^
dump.c:1573:77: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1573 |                     PerlIO_printf(file, " %s", pv_display(sv, mg->mg_ptr, mg->mg_len, 0, pvlim));
      |                                                                           ~~^~~~~~~~
embed.h:475:59: note: in definition of macro 'pv_display'
  475 | #define pv_display(a,b,c,d,e)   Perl_pv_display(aTHX_ a,b,c,d,e)
      |                                                           ^
dump.c: In function 'Perl_do_hv_dump':
hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:1637:31: note: in expansion of macro 'generic_pv_escape'
 1637 |                               generic_pv_escape( tmpsv, hvname,
      |                               ^~~~~~~~~~~~~~~~~
hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
dump.c:1638:36: note: in expansion of macro 'HvNAMELEN'
 1638 |                                    HvNAMELEN(sv), HvNAMEUTF8(sv)));
      |                                    ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:1637:31: note: in expansion of macro 'generic_pv_escape'
 1637 |                               generic_pv_escape( tmpsv, hvname,
      |                               ^~~~~~~~~~~~~~~~~
dump.c: In function 'Perl_do_gv_dump':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:1653:31: note: in expansion of macro 'generic_pv_escape'
 1653 |                               generic_pv_escape( tmpsv, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv) ));
      |                               ^~~~~~~~~~~~~~~~~
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
dump.c:1653:69: note: in expansion of macro 'GvNAMELEN'
 1653 |                               generic_pv_escape( tmpsv, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv) ));
      |                                                                     ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:1653:31: note: in expansion of macro 'generic_pv_escape'
 1653 |                               generic_pv_escape( tmpsv, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv) ));
      |                               ^~~~~~~~~~~~~~~~~
dump.c: In function 'Perl_do_gvgv_dump':
hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:1673:35: note: in expansion of macro 'generic_pv_escape'
 1673 |                                   generic_pv_escape(tmp, hvname,
      |                                   ^~~~~~~~~~~~~~~~~
hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
dump.c:1674:39: note: in expansion of macro 'HvNAMELEN'
 1674 |                                       HvNAMELEN(stash), HvNAMEUTF8(stash)));
      |                                       ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:1673:35: note: in expansion of macro 'generic_pv_escape'
 1673 |                                   generic_pv_escape(tmp, hvname,
      |                                   ^~~~~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:1677:31: note: in expansion of macro 'generic_pv_escape'
 1677 |                               generic_pv_escape( tmp, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv)));
      |                               ^~~~~~~~~~~~~~~~~
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
dump.c:1677:67: note: in expansion of macro 'GvNAMELEN'
 1677 |                               generic_pv_escape( tmp, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv)));
      |                                                                   ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:1677:31: note: in expansion of macro 'generic_pv_escape'
 1677 |                               generic_pv_escape( tmp, GvNAME(sv), GvNAMELEN(sv), GvNAMEUTF8(sv)));
      |                               ^~~~~~~~~~~~~~~~~
dump.c: In function 'Perl_do_sv_dump':
dump.c:2165:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2165 |                 count = last + 1 - ents;
      |                         ^~~~
hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:2204:40: note: in expansion of macro 'generic_pv_escape'
 2204 |                                        generic_pv_escape( tmpsv, hvname,
      |                                        ^~~~~~~~~~~~~~~~~
hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
dump.c:2205:44: note: in expansion of macro 'HvNAMELEN'
 2205 |                                            HvNAMELEN(sv), HvNAMEUTF8(sv)));
      |                                            ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2204:40: note: in expansion of macro 'generic_pv_escape'
 2204 |                                        generic_pv_escape( tmpsv, hvname,
      |                                        ^~~~~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:2231:31: note: in expansion of macro 'generic_pv_escape'
 2231 |                               generic_pv_escape(tmp, HEK_KEY(*hekp), HEK_LEN(*hekp), HEK_UTF8(*hekp)));
      |                               ^~~~~~~~~~~~~~~~~
dump.c:2231:70: note: in expansion of macro 'HEK_LEN'
 2231 |                               generic_pv_escape(tmp, HEK_KEY(*hekp), HEK_LEN(*hekp), HEK_UTF8(*hekp)));
      |                                                                      ^~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2231:31: note: in expansion of macro 'generic_pv_escape'
 2231 |                               generic_pv_escape(tmp, HEK_KEY(*hekp), HEK_LEN(*hekp), HEK_UTF8(*hekp)));
      |                               ^~~~~~~~~~~~~~~~~
hv.h:340:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  340 |                                  ? HEK_LEN(HvENAME_HEK_NN(hv)) : 0)
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:2247:22: note: in expansion of macro 'generic_pv_escape'
 2247 |                      generic_pv_escape(tmp, hvename,
      |                      ^~~~~~~~~~~~~~~~~
dump.c:2248:40: note: in expansion of macro 'HvENAMELEN_get'
 2248 |                                        HvENAMELEN_get(sv), HvENAMEUTF8(sv)));
      |                                        ^~~~~~~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2247:22: note: in expansion of macro 'generic_pv_escape'
 2247 |                      generic_pv_escape(tmp, hvename,
      |                      ^~~~~~~~~~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2261:34: note: in expansion of macro 'generic_pv_escape'
 2261 |                                  generic_pv_escape( tmpsv, meta->mro_which->name,
      |                                  ^~~~~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:2421:30: note: in expansion of macro 'generic_pv_escape'
 2421 |                              generic_pv_escape(
      |                              ^~~~~~~~~~~~~~~~~
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
dump.c:2424:34: note: in expansion of macro 'GvNAMELEN'
 2424 |                                  GvNAMELEN(CvGV(outside)),
      |                                  ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2421:30: note: in expansion of macro 'generic_pv_escape'
 2421 |                              generic_pv_escape(
      |                              ^~~~~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
embed.h:476:58: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                          ^
dump.c:2451:22: note: in expansion of macro 'generic_pv_escape'
 2451 |                      generic_pv_escape(tmpsv, GvNAME(sv),
      |                      ^~~~~~~~~~~~~~~~~
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
dump.c:2452:40: note: in expansion of macro 'GvNAMELEN'
 2452 |                                        GvNAMELEN(sv),
      |                                        ^~~~~~~~~
dump.c:90:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   90 |                               (len) * (4+UTF8_MAXBYTES) + 1, NULL, \
      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
embed.h:476:60: note: in definition of macro 'pv_escape'
  476 | #define pv_escape(a,b,c,d,e,f)  Perl_pv_escape(aTHX_ a,b,c,d,e,f)
      |                                                            ^
dump.c:2451:22: note: in expansion of macro 'generic_pv_escape'
 2451 |                      generic_pv_escape(tmpsv, GvNAME(sv),
      |                      ^~~~~~~~~~~~~~~~~
dump.c:2578:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2578 |                             pv_display(d, r->subbeg, r->sublen, 50, pvlim));
      |                                                      ~^~~~~~~~
embed.h:475:59: note: in definition of macro 'pv_display'
  475 | #define pv_display(a,b,c,d,e)   Perl_pv_display(aTHX_ a,b,c,d,e)
      |                                                           ^
dump.c: In function 'Perl_multiconcat_stringify':
dump.c:2942:11: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2942 |     len = aux[PERL_MULTICONCAT_IX_PLAIN_LEN].ssize;
      |           ^~~
dump.c:2945:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2945 |         len = aux[PERL_MULTICONCAT_IX_UTF8_LEN].ssize;
      |               ^~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o gv.o gv.c
In file included from perl.h:7246,
                 from gv.c:41:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
gv.c: In function 'Perl_gv_fetchfile_flags':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
gv.c:159:22: note: in expansion of macro 'hv_fetch'
  159 |     GV **gvp = (GV**)hv_fetch(PL_defstash, tmpbuf, tmplen, (flags & GVF_NOADD) ? FALSE : TRUE);
      |                      ^~~~~~~~
In file included from perl.h:4169:
gv.c: In function 'Perl_newGP':
cop.h:660:33: warning: conversion from 'line_t' {aka 'unsigned int'} to 'unsigned int:31' may change value [-Wconversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
gv.c:226:23: note: in expansion of macro 'CopLINE'
  226 |         gp->gp_line = CopLINE(PL_curcop); /* 0 otherwise Newxz */
      |                       ^~~~~~~
gv.c:248:39: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  248 |     gp->gp_file_hek = share_hek(file, len, hash);
      |                                       ^~~
embed.h:571:56: note: in definition of macro 'share_hek'
  571 | #define share_hek(a,b,c)        Perl_share_hek(aTHX_ a,b,c)
      |                                                        ^
In file included from perl.h:4165:
gv.c: In function 'Perl_cvgv_set':
cv.h:191:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
  191 | #define CvCVGV_RC_off(cv)       (CvFLAGS(cv) &= ~CVf_CVGV_RC)
      |                                              ^~
cv.h:191:46: note: in definition of macro 'CvCVGV_RC_off'
  191 | #define CvCVGV_RC_off(cv)       (CvFLAGS(cv) &= ~CVf_CVGV_RC)
      |                                              ^~
cv.h:217:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-65537' to '4294901759' [-Wsign-conversion]
  217 | #define CvLEXICAL_off(cv)       (CvFLAGS(cv) &= ~CVf_LEXICAL)
      |                                              ^~
cv.h:217:46: note: in definition of macro 'CvLEXICAL_off'
  217 | #define CvLEXICAL_off(cv)       (CvFLAGS(cv) &= ~CVf_LEXICAL)
      |                                              ^~
cv.h:213:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
cv.h:213:46: note: in definition of macro 'CvNAMED_off'
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
gv.c: In function 'Perl_cvgv_from_hek':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
gv.c:309:11: note: in expansion of macro 'hv_fetchhek'
  309 |     svp = hv_fetchhek(CvSTASH(cv), CvNAME_HEK(cv), 0);
      |           ^~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:239:62: note: in definition of macro 'gv_init_pvn'
  239 | #define gv_init_pvn(a,b,c,d,e)  Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
      |                                                              ^
gv.c:313:17: note: in expansion of macro 'HEK_LEN'
  313 |                 HEK_LEN(CvNAME_HEK(cv)),
      |                 ^~~~~~~
cv.h:213:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
cv.h:213:46: note: in definition of macro 'CvNAMED_off'
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
gv.c: In function 'Perl_gv_init_pvn':
sv.h:1004:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:1004:46: note: in definition of macro 'SvROK_off'
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
In file included from perl.h:3003:
hv.h:424:38: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
gv.c:534:62: note: in expansion of macro 'GvNAMELEN'
  534 |                && memEQ(HEK_KEY(CvNAME_HEK(cv)), GvNAME(gv), GvNAMELEN(gv))
      |                                                              ^~~~~~~~~
gv.c: In function 'S_maybe_add_coresub':
gv.c:602:36: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  602 |     const int code = keyword(name, len, 1);
      |                                    ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
gv.c:686:15: note: in expansion of macro 'hv_store'
  686 |         (void)hv_store(stash,name,len,(SV *)gv,0);
      |               ^~~~~~~~
cv.h:165:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
  165 | #define CvLVALUE_off(cv)        (CvFLAGS(cv) &= ~CVf_LVALUE)
      |                                              ^~
cv.h:165:46: note: in definition of macro 'CvLVALUE_off'
  165 | #define CvLVALUE_off(cv)        (CvFLAGS(cv) &= ~CVf_LVALUE)
      |                                              ^~
In file included from perl.h:4168:
gv.c: In function 'S_gv_fetchmeth_internal':
hv.h:321:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ^
gv.c:833:17: note: in expansion of macro 'HvNAMELEN_get'
  833 |     hvnamelen = HvNAMELEN_get(stash);
      |                 ^~~~~~~~~~~~~
gv.c:971:49: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4097' to '4294963199' [-Wsign-conversion]
  971 |                                           flags &~GV_SUPER);
      |                                                 ^
embed.h:1698:89: note: in definition of macro 'gv_fetchmeth_internal'
 1698 | #define gv_fetchmeth_internal(a,b,c,d,e,f)      S_gv_fetchmeth_internal(aTHX_ a,b,c,d,e,f)
      |                                                                                         ^
gv.c: In function 'Perl_gv_fetchmethod_pvn_flags':
gv.c:1195:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1195 |         STRLEN sep_len= last_separator - origname;
      |                         ^~~~~~~~~~~~~~
gv.c:1206:56: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1206 |             stash = gv_stashpvn(origname, sep_len - 7, is_utf8);
      |                                                        ^~~~~~~
embed.h:243:60: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                            ^
gv.c:1211:52: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1211 |             stash = gv_stashpvn(origname, sep_len, is_utf8);
      |                                                    ^~~~~~~
embed.h:243:60: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                            ^
gv.c:1216:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1216 |     gv = gv_fetchmeth_pvn(stash, name, name_end - name, 0, flags);
      |                                        ~~~~~~~~~^~~~~~
embed.h:222:73: note: in definition of macro 'gv_fetchmeth_pvn'
  222 | #define gv_fetchmeth_pvn(a,b,c,d,e)     Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
      |                                                                         ^
gv.c:1226:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1226 |                 ostash, name, name_end - name, GV_AUTOLOAD_ISMETHOD|flags
      |                               ~~~~~~~~~^~~~~~
embed.h:209:72: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                        ^
gv.c:1242:65: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1242 |                     gv = gv_fetchmeth_pvn(stash, name, name_end - name, 0, flags);
      |                                                        ~~~~~~~~~^~~~~~
embed.h:222:73: note: in definition of macro 'gv_fetchmeth_pvn'
  222 | #define gv_fetchmeth_pvn(a,b,c,d,e)     Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
      |                                                                         ^
gv.c:1256:74: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1256 |                     packnamesv = newSVpvn_flags(origname, last_separator - origname,
      |                                                           ~~~~~~~~~~~~~~~^~~~~~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:209:72: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                        ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
gv.c:1285:51: note: in expansion of macro 'GvNAMELEN'
 1285 |                                   GvNAME(stubgv), GvNAMELEN(stubgv),
      |                                                   ^~~~~~~~~
gv.c: In function 'Perl_gv_autoload_pvn':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
gv.c: In function 'Perl_gv_stashsvpvn_cached':
gv.c:1672:19: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1672 |             flags |= SvUTF8(namesv);
      |                   ^~
sv.h:955:33: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  955 | #define SvUTF8(sv)              (SvFLAGS(sv) & SVf_UTF8)
      |                                 ^
gv.c:1672:22: note: in expansion of macro 'SvUTF8'
 1672 |             flags |= SvUTF8(namesv);
      |                      ^~~~~~
gv.c: In function 'Perl_gv_fetchsv':
gv.c:1725:49: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1725 |     return gv_fetchpvn_flags(nambeg, len, flags | SvUTF8(name), sv_type);
      |                                                 ^
embed.h:231:74: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                          ^
gv.c:1725:49: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1725 |     return gv_fetchpvn_flags(nambeg, len, flags | SvUTF8(name), sv_type);
embed.h:231:74: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                          ^
gv.c: In function 'S_parse_gv_stash_name':
gv.c:1778:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1778 |             *len = name_cursor - *name;
      |                    ^~~~~~~~~~~
gv.c:1821:60: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1821 |                                 *stash, nambeg, name_cursor-nambeg, is_utf8
      |                                                 ~~~~~~~~~~~^~~~~~~
embed.h:260:60: note: in definition of macro 'hv_name_set'
  260 | #define hv_name_set(a,b,c,d)    Perl_hv_name_set(aTHX_ a,b,c,d)
      |                                                            ^
gv.c:1830:61: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1830 |                     hv_name_set(*stash, nambeg, name_cursor - nambeg, is_utf8);
      |                                                 ~~~~~~~~~~~~^~~~~~~~
embed.h:260:60: note: in definition of macro 'hv_name_set'
  260 | #define hv_name_set(a,b,c,d)    Perl_hv_name_set(aTHX_ a,b,c,d)
      |                                                            ^
gv.c:1850:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1850 |     *len = name_cursor - *name;
      |            ^~~~~~~~~~~
gv.c: In function 'S_gv_magicalize':
gv.c:2151:80: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2151 |                         SV * const * const init = hv_fetch(hv, PL_sig_name[i], strlen(PL_sig_name[i]), 1);
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
gv.c:2151:51: note: in expansion of macro 'hv_fetch'
 2151 |                         SV * const * const init = hv_fetch(hv, PL_sig_name[i], strlen(PL_sig_name[i]), 1);
      |                                                   ^~~~~~~~
gv.c:2316:70: warning: conversion to 'I32' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2316 |             sv_magic(GvSVn(gv), MUTABLE_SV(gv), PERL_MAGIC_sv, name, len);
      |                                                                      ^~~
embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
gv.c:2327:74: warning: conversion to 'I32' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2327 |                 sv_magic(GvSVn(gv), MUTABLE_SV(gv), PERL_MAGIC_sv, name, len);
      |                                                                          ^~~
embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
gv.c:2386:70: warning: conversion to 'I32' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2386 |             sv_magic(GvSVn(gv), MUTABLE_SV(gv), PERL_MAGIC_sv, name, len);
      |                                                                      ^~~
embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
gv.c: In function 'Perl_gv_fetchpvn_flags':
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
gv.c:2666:23: note: in expansion of macro 'hv_store'
 2666 |                 (void)hv_store(stash,name,len,(SV *)gv,0);
      |                       ^~~~~~~~
gv.c: In function 'Perl_gv_fullname4':
hv.h:321:9: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ^
hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
gv.c:2709:26: note: in expansion of macro 'HvNAMELEN'
 2709 |       const STRLEN len = HvNAMELEN(hv);
      |                          ^~~~~~~~~
gv.c: In function 'Perl_gv_check':
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
gv.c:2753:29: note: in expansion of macro 'HeKLEN'
 2753 |             STRLEN keylen = HeKLEN(entry);
      |                             ^~~~~~
gv.c:2791:33: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 2791 |     HvAUX(stash)->xhv_aux_flags &= ~HvAUXf_SCAN_STASH;
      |                                 ^~
gv.c: In function 'Perl_gp_free':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
gv.c:2946:18: note: in expansion of macro 'hv_deletehek'
 2946 |            (void)hv_deletehek(PL_stashcache, hvname_hek, G_DISCARD);
      |                  ^~~~~~~~~~~~
gv.c: In function 'Perl_Gv_AMupdate':
gv.c:3157:33: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 3157 |     HvAUX(stash)->xhv_aux_flags &= ~HvAUXf_NO_DEREF;
      |                                 ^~
perl.h:6456:50: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6456 | #define AMT_AMAGIC_off(amt)     ((amt)->flags &= ~AMTf_AMAGIC)
      |                                                  ^
gv.c:3255:3: note: in expansion of macro 'AMT_AMAGIC_off'
 3255 |   AMT_AMAGIC_off(&amt);
      |   ^~~~~~~~~~~~~~
gv.c: In function 'Perl_amagic_call':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
gv.c:3551:43: note: in expansion of macro 'Gv_AMG'
 3551 |       && (stash = SvSTASH(SvRV(left))) && Gv_AMG(stash)
      |                                           ^~~~~~
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
gv.c:3676:53: note: in expansion of macro 'Gv_AMG'
 3676 |                && (stash = SvSTASH(SvRV(right))) && Gv_AMG(stash)
      |                                                     ^~~~~~
gv.c: In function 'Perl_gv_try_downgrade':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
gv.c:4098:15: note: in expansion of macro 'hv_deletehek'
 4098 |         (void)hv_deletehek(stash, gvnhek, G_DISCARD);
      |               ^~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
gv.c:4105:20: note: in expansion of macro 'hv_fetchhek'
 4105 |             (gvp = hv_fetchhek(stash, namehek, 0)) &&
      |                    ^~~~~~~~~~~
gv.c: In function 'Perl_gv_override':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
gv.c:4128:17: note: in expansion of macro 'hv_fetch'
 4128 |     gvp = (GV**)hv_fetch(PL_globalstash, name, len, FALSE);
      |                 ^~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o hv.o hv.c
In file included from perl.h:7246,
                 from hv.c:35:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:3003:
hv.c: In function 'S_save_hek_flags':
hv.c:198:26: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  198 |     Newx(k, HEK_BASESIZE + len + 2, char);
      |                          ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
hv.c:198:5: note: in expansion of macro 'Newx'
  198 |     Newx(k, HEK_BASESIZE + len + 2, char);
      |     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
hv.c:200:5: note: in expansion of macro 'Copy'
  200 |     Copy(str, HEK_KEY(hek), len, char);
      |     ^~~~
In file included from perl.h:4168:
hv.h:430:25: warning: conversion from 'int' to 'unsigned char' may change value [-Wconversion]
  430 | #define HVhek_NOTSHARED 0x04 /* This key isn't a shared hash key. */
      |                         ^~~~
hv.h:430:25: note: in definition of macro 'HVhek_NOTSHARED'
  430 | #define HVhek_NOTSHARED 0x04 /* This key isn't a shared hash key. */
      |                         ^~~~
In file included from perl.h:5841:
hv.c: In function 'Perl_hek_dup':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:1719:67: note: in definition of macro 'share_hek_flags'
 1719 | #define share_hek_flags(a,b,c,d)        S_share_hek_flags(aTHX_ a,b,c,d)
      |                                                                   ^
hv.c:246:48: note: in expansion of macro 'HEK_LEN'
  246 |             = share_hek_flags(HEK_KEY(source), HEK_LEN(source),
      |                                                ^~~~~~~
hv.c: In function 'Perl_he_dup':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:1719:67: note: in definition of macro 'share_hek_flags'
 1719 | #define share_hek_flags(a,b,c,d)        S_share_hek_flags(aTHX_ a,b,c,d)
      |                                                                   ^
hv.c:296:52: note: in expansion of macro 'HEK_LEN'
  296 |                 = share_hek_flags(HEK_KEY(source), HEK_LEN(source),
      |                                                    ^~~~~~~
hv.c: In function 'S_hv_notallowed':
hv.c:323:34: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  323 |         sv_setpvn_fresh(sv, key, klen);
      |                                  ^~~~
embed.h:699:64: note: in definition of macro 'sv_setpvn_fresh'
  699 | #define sv_setpvn_fresh(a,b,c)  Perl_sv_setpvn_fresh(aTHX_ a,b,c)
      |                                                                ^
hv.c:328:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  328 |         sv_usepvn(sv, (char *) key, klen);
      |                                     ^~~~
embed.h:724:72: note: in definition of macro 'sv_usepvn_flags'
  724 | #define sv_usepvn_flags(a,b,c,d)        Perl_sv_usepvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
hv.c:328:9: note: in expansion of macro 'sv_usepvn'
  328 |         sv_usepvn(sv, (char *) key, klen);
      |         ^~~~~~~~~
hv.c: In function 'Perl_hv_common_key_len':
hv.c:453:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  453 |         klen = -klen_i32;
      |                ^
hv.c:456:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  456 |         klen = klen_i32;
      |                ^~~~~~~~
hv.c: In function 'Perl_hv_common':
hv.c:635:54: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  635 |                     mg_copy(MUTABLE_SV(hv), sv, key, klen);
      |                                                      ^~~~
embed.h:317:58: note: in definition of macro 'mg_copy'
  317 | #define mg_copy(a,b,c,d)        Perl_mg_copy(aTHX_ a,b,c,d)
      |                                                          ^
hv.c:682:55: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  682 |                     mg_copy(MUTABLE_SV(hv), val, key, klen);
      |                                                       ^~~~
embed.h:317:58: note: in definition of macro 'mg_copy'
  317 | #define mg_copy(a,b,c,d)        Perl_mg_copy(aTHX_ a,b,c,d)
      |                                                          ^
hv.c:775:36: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  775 |         entry = (HvARRAY(hv))[hash & (I32) HvMAX(hv)];
      |                                    ^
hv.c:909:35: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  909 |         hv_notallowed(flags, key, klen,
      |                                   ^~~~
embed.h:1716:59: note: in definition of macro 'hv_notallowed'
 1716 | #define hv_notallowed(a,b,c,d)  S_hv_notallowed(aTHX_ a,b,c,d)
      |                                                           ^
hv.c:954:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  954 |     oentry = &(HvARRAY(hv))[hash & (I32) xhv->xhv_max];
      |                                  ^
hv.c:973:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  973 |         HeKEY_hek(entry) = save_hek_flags(key, klen, hash, flags);
      |                                                ^~~~
hv.c: In function 'Perl_hv_scalar':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
hv.c:1106:9: note: in expansion of macro 'HvUSEDKEYS'
 1106 |     u = HvUSEDKEYS(hv);
      |         ^~~~~~~~~~
sv.h:888:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536936193' to '3758031103' [-Wsign-conversion]
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
sv.h:888:46: note: in definition of macro 'SvOK_off_exc_UV'
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
hv.c:1115:15: note: in expansion of macro 'SvIOK_only_UV'
 1115 |         (void)SvIOK_only_UV(sv);
      |               ^~~~~~~~~~~~~
hv.c: In function 'Perl_hv_pushkv':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
hv.c:1166:24: note: in expansion of macro 'HvUSEDKEYS'
 1166 |         Size_t nkeys = HvUSEDKEYS(hv);
      |                        ^~~~~~~~~~
hv.c:1174:15: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1174 |         ext = nkeys * ((flags == 3) ? 2 : 1);
      |               ^~~~~
In file included from perl.h:5782:
pp.h:566:35: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  566 |         SSize_t eMiX = PL_tmps_ix + (n);                        \
      |                                   ^
hv.c:1176:9: note: in expansion of macro 'EXTEND_MORTAL'
 1176 |         EXTEND_MORTAL(nkeys);
      |         ^~~~~~~~~~~~~
In file included from perl.h:5810:
embedvar.h:321:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  321 | #define PL_tmps_ix              (vTHX->Itmps_ix)
      |                                 ^
pp.h:566:24: note: in expansion of macro 'PL_tmps_ix'
  566 |         SSize_t eMiX = PL_tmps_ix + (n);                        \
      |                        ^~~~~~~~~~
hv.c:1176:9: note: in expansion of macro 'EXTEND_MORTAL'
 1176 |         EXTEND_MORTAL(nkeys);
      |         ^~~~~~~~~~~~~
hv.c: In function 'Perl_hv_bucket_ratio':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
hv.c:1223:9: note: in expansion of macro 'HvUSEDKEYS'
 1223 |     if (HvUSEDKEYS((HV *)hv)) {
      |         ^~~~~~~~~~
hv.c: In function 'S_hv_delete_common':
hv.c:1340:48: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1340 |     first_entry = oentry = &(HvARRAY(hv))[hash & (I32) HvMAX(hv)];
      |                                                ^
hv.c:1399:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1399 |             hv_notallowed(k_flags, key, klen,
      |                                         ^~~~
embed.h:1716:59: note: in definition of macro 'hv_notallowed'
 1716 | #define hv_notallowed(a,b,c,d)  S_hv_notallowed(aTHX_ a,b,c,d)
      |                                                           ^
hv.c:1553:37: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1553 |         hv_notallowed(k_flags, key, klen,
      |                                     ^~~~
embed.h:1716:59: note: in definition of macro 'hv_notallowed'
 1716 | #define hv_notallowed(a,b,c,d)  S_hv_notallowed(aTHX_ a,b,c,d)
      |                                                           ^
hv.c: In function 'S_hsplit':
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.c: In function 'Perl_hv_ksplit':
hv.c:1721:20: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1721 |         hsplit(hv, oldsize, newsize);
      |                    ^~~~~~~
embed.h:1710:50: note: in definition of macro 'hsplit'
 1710 | #define hsplit(a,b,c)           S_hsplit(aTHX_ a,b,c)
      |                                                  ^
hv.c:1721:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1721 |         hsplit(hv, oldsize, newsize);
      |                             ^~~~~~~
embed.h:1710:52: note: in definition of macro 'hsplit'
 1710 | #define hsplit(a,b,c)           S_hsplit(aTHX_ a,b,c)
      |                                                    ^
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:452:51: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  452 | #  define PERL_HV_ARRAY_ALLOC_BYTES(size) ((size) * sizeof(HE*))
      |                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
hv.c:1731:9: note: in expansion of macro 'Newxz'
 1731 |         Newxz(a, PERL_HV_ARRAY_ALLOC_BYTES(newsize), char);
      |         ^~~~~
hv.c:1731:18: note: in expansion of macro 'PERL_HV_ARRAY_ALLOC_BYTES'
 1731 |         Newxz(a, PERL_HV_ARRAY_ALLOC_BYTES(newsize), char);
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
hv.c:1732:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1732 |         xhv->xhv_max = newsize - 1;
      |                        ^~~~~~~
hv.c: In function 'Perl_newHVhv':
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.c:1814:40: note: in expansion of macro 'HeKLEN'
 1814 |                     const STRLEN len = HeKLEN(oent);
      |                                        ^~~~~~
hv.c:1815:58: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1815 |                     HeKEY_hek(ent) = save_hek_flags(key, len, hash, flags);
      |                                                          ^~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                      ^
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.c:1847:23: note: in expansion of macro 'hv_store_flags'
 1847 |                 (void)hv_store_flags(hv, HeKEY(entry), HeKLEN(entry), val,
      |                       ^~~~~~~~~~~~~~
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.c:1847:56: note: in expansion of macro 'HeKLEN'
 1847 |                 (void)hv_store_flags(hv, HeKEY(entry), HeKLEN(entry), val,
      |                                                        ^~~~~~
hv.c: In function 'Perl_hv_copy_hints_hv':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.c:1896:58: note: in expansion of macro 'HeKLEN'
 1896 |                 (void)hv_common(hv, heksv, HeKEY(entry), HeKLEN(entry),
      |                                                          ^~~~~~
hv.c: In function 'S_clear_placeholders':
hv.h:284:25: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  284 | #define HvMAX(hv)       ((XPVHV*)  SvANY(hv))->xhv_max
      |                         ^
hv.c:2070:9: note: in expansion of macro 'HvMAX'
 2070 |     i = HvMAX(hv);
      |         ^~~~~
hv.c:2090:37: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 2090 |                     HvTOTALKEYS(hv) -= (IV)placeholders;
      |                                     ^~
hv.c: In function 'Perl_hfree_next_entry':
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.h:400:41: note: in expansion of macro 'HeKLEN'
  400 |                                  ((lp = HeKLEN(he)), HeKEY(he)))
      |                                         ^~~~~~
hv.c:2177:34: note: in expansion of macro 'HePV'
 2177 |         const char * const key = HePV(entry,klen);
      |                                  ^~~~
hv.c: In function 'Perl_hv_undef_flags':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
hv.c:2229:19: note: in expansion of macro 'hv_deletehek'
 2229 |             (void)hv_deletehek(PL_stashcache, HvNAME_HEK(hv), G_DISCARD);
      |                   ^~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
hv.c:2269:19: note: in expansion of macro 'hv_deletehek'
 2269 |             (void)hv_deletehek(PL_stashcache, HvENAME_HEK(hv), G_DISCARD);
      |                   ^~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
hv.c:2280:19: note: in expansion of macro 'hv_deletehek'
 2280 |             (void)hv_deletehek(PL_stashcache, HvNAME_HEK(hv), G_DISCARD);
      |                   ^~~~~~~~~~~~
hv.c: In function 'Perl_hv_fill':
hv.c:2362:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2362 |         count = last + 1 - ents;
      |                 ^~~~
hv.c: In function 'Perl_hv_iterinit':
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:352:54: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  352 | #define HvTOTALKEYS(hv)         (((XPVHV*) SvANY(hv))->xhv_keys)
      |                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
hv.h:352:54: note: in definition of macro 'HvTOTALKEYS'
  352 | #define HvTOTALKEYS(hv)         (((XPVHV*) SvANY(hv))->xhv_keys)
      |                                                      ^~
hv.c: In function 'Perl_hv_name_set':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
hv.c:2586:21: note: in expansion of macro 'Renew'
 2586 |                     Renew(
      |                     ^~~~~
hv.c: In function 'hek_eq_pvn_flags':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:78:61: note: in definition of macro 'bytes_cmp_utf8'
   78 | #define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
      |                                                             ^
hv.c:2633:50: note: in expansion of macro 'HEK_LEN'
 2633 |                         (const U8*)HEK_KEY(hek), HEK_LEN(hek),
      |                                                  ^~~~~~~
hv.c:2634:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2634 |                         (const U8*)pv, pvlen) == 0);
      |                                        ^~~~~
embed.h:78:65: note: in definition of macro 'bytes_cmp_utf8'
   78 | #define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
      |                                                                 ^
hv.c:2637:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2637 |                         (const U8*)pv, pvlen,
      |                                        ^~~~~
embed.h:78:61: note: in definition of macro 'bytes_cmp_utf8'
   78 | #define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
      |                                                             ^
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:78:65: note: in definition of macro 'bytes_cmp_utf8'
   78 | #define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
      |                                                                 ^
hv.c:2638:50: note: in expansion of macro 'HEK_LEN'
 2638 |                         (const U8*)HEK_KEY(hek), HEK_LEN(hek)) == 0);
      |                                                  ^~~~~~~
hv.c:2642:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2642 |                     || memEQ(HEK_KEY(hek), pv, pvlen));
      |                                                ^~~~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
hv.c: In function 'Perl_hv_ename_add':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
hv.c:2689:9: note: in expansion of macro 'Renew'
 2689 |         Renew(aux->xhv_name_u.xhvnameu_names, count + 1, HEK *);
      |         ^~~~~
hv.c: In function 'Perl_hv_iternext_flags':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:710:61: note: in definition of macro 'sv_setsv_flags'
  710 | #define sv_setsv_flags(a,b,c)   Perl_sv_setsv_flags(aTHX_ a,b,c)
      |                                                             ^
hv.c:2916:17: note: in expansion of macro 'sv_setsv'
 2916 |                 sv_setsv(key, HeSVKEY_force(entry));
      |                 ^~~~~~~~
hv.h:412:35: note: in expansion of macro 'newSVpvn_flags'
  412 |                                   newSVpvn_flags(HeKEY(he),             \
      |                                   ^~~~~~~~~~~~~~
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.h:413:50: note: in expansion of macro 'HeKLEN'
  413 |                                                  HeKLEN(he),            \
      |                                                  ^~~~~~
hv.c:2916:31: note: in expansion of macro 'HeSVKEY_force'
 2916 |                 sv_setsv(key, HeSVKEY_force(entry));
      |                               ^~~~~~~~~~~~~
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
hv.c:2986:29: note: in expansion of macro 'HvUSEDKEYS'
 2986 |         ? HvTOTALKEYS(hv) : HvUSEDKEYS(hv)) {
      |                             ^~~~~~~~~~
hv.h:28:66: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   28 | #   define PERL_HASH_ITER_BUCKET(iter)      (((iter)->xhv_riter) ^ ((iter)->xhv_rand))
      |                                                                  ^
hv.c:3000:36: note: in expansion of macro 'PERL_HASH_ITER_BUCKET'
 3000 |             entry = (HvARRAY(hv))[ PERL_HASH_ITER_BUCKET(iter) & max ];
      |                                    ^~~~~~~~~~~~~~~~~~~~~
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.c: In function 'Perl_hv_iterkey':
hv.c:3046:19: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3046 |         *retlen = len;
      |                   ^~~
hv.c: In function 'S_unshare_hek_or_pvn':
hv.c:3186:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3186 |         STRLEN tmplen = -len;
      |                         ^
hv.c:3190:15: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3190 |         len = tmplen;
      |               ^~~~~~
hv.c:3204:41: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3204 |     oentry = &(HvARRAY(PL_strtab))[hash & (I32) HvMAX(PL_strtab)];
      |                                         ^
hv.c:3212:33: warning: conversion from 'int' to 'U8' {aka 'const unsigned char'} may change value [-Wconversion]
 3212 |         const U8 flags_masked = k_flags & HVhek_STORAGE_MASK;
      |                                 ^~~~~~~
hv.c:3218:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3218 |             if (HeKEY(entry) != str && memNE(HeKEY(entry),str,len))     /* is this it? */
      |                                                               ^~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
hv.c:3218:40: note: in expansion of macro 'memNE'
 3218 |             if (HeKEY(entry) != str && memNE(HeKEY(entry),str,len))     /* is this it? */
      |                                        ^~~~~
hv.c: In function 'Perl_share_hek':
hv.c:3258:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3258 |       STRLEN tmplen = -len;
      |                       ^
hv.c:3262:13: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3262 |       len = tmplen;
      |             ^~~~~~
In file included from hv.h:673:
hv_func.h:107:79: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  107 |         ? sbox32_hash_with_state((state + __PERL_HASH_STATE_BYTES),(U8*)(str),(len))    \
      |                                                                               ^~~~~
hv_func.h:115:14: note: in expansion of macro '_PERL_HASH_WITH_STATE'
  115 |     (hash) = _PERL_HASH_WITH_STATE((state),(U8*)(str),(len))
      |              ^~~~~~~~~~~~~~~~~~~~~
hv_func.h:131:5: note: in expansion of macro 'PERL_HASH_WITH_STATE'
  131 |     PERL_HASH_WITH_STATE(PL_hash_state,hash,(U8*)(str),(len))
      |     ^~~~~~~~~~~~~~~~~~~~
hv.c:3271:11: note: in expansion of macro 'PERL_HASH'
 3271 |           PERL_HASH(hash, str, len);
      |           ^~~~~~~~~
hv_func.h:59:97: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   59 | # define __PERL_HASH_WITH_STATE(state,str,len) (U32)zaphod32_hash_with_state((state),(U8*)(str),(len))
      |                                                                                                 ^~~~~
hv_func.h:108:11: note: in expansion of macro '__PERL_HASH_WITH_STATE'
  108 |         : __PERL_HASH_WITH_STATE((state),(str),(len)))
      |           ^~~~~~~~~~~~~~~~~~~~~~
hv_func.h:115:14: note: in expansion of macro '_PERL_HASH_WITH_STATE'
  115 |     (hash) = _PERL_HASH_WITH_STATE((state),(U8*)(str),(len))
      |              ^~~~~~~~~~~~~~~~~~~~~
hv_func.h:131:5: note: in expansion of macro 'PERL_HASH_WITH_STATE'
  131 |     PERL_HASH_WITH_STATE(PL_hash_state,hash,(U8*)(str),(len))
      |     ^~~~~~~~~~~~~~~~~~~~
hv.c:3271:11: note: in expansion of macro 'PERL_HASH'
 3271 |           PERL_HASH(hash, str, len);
      |           ^~~~~~~~~
hv.c:3276:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3276 |     return share_hek_flags (str, len, hash, flags);
      |                                  ^~~
embed.h:1719:67: note: in definition of macro 'share_hek_flags'
 1719 | #define share_hek_flags(a,b,c,d)        S_share_hek_flags(aTHX_ a,b,c,d)
      |                                                                   ^
hv.c: In function 'S_share_hek_flags':
hv.c:3283:29: warning: conversion from 'int' to 'U8' {aka 'const unsigned char'} may change value [-Wconversion]
 3283 |     const U8 flags_masked = flags & HVhek_STORAGE_MASK;
      |                             ^~~~~
hv.c:3284:29: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3284 |     const U32 hindex = hash & (I32) HvMAX(PL_strtab);
      |                             ^
hv.c:3341:24: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3341 |         HEK_LEN(hek) = len;
      |                        ^~~
hv.c: In function 'Perl_refcounted_he_chain_2hv':
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
hv.c:3521:37: note: in expansion of macro 'HeKLEN'
 3521 |                 const STRLEN klen = HeKLEN(entry);
      |                                     ^~~~~~
hv.c: In function 'Perl_refcounted_he_fetch_pvn':
hv.c:3601:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4' to '4294967292' [-Wsign-conversion]
 3601 |     if (flags & ~(REFCOUNTED_HE_KEY_UTF8|REFCOUNTED_HE_EXISTS))
      |               ^
hv.c:3637:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 3637 |         flags &= ~REFCOUNTED_HE_KEY_UTF8;
      |               ^~
hv.c: In function 'Perl_refcounted_he_new_pvn':
hv.c:3812:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 3812 |         flags &= ~REFCOUNTED_HE_KEY_UTF8;
      |               ^~
hv.c: In function 'Perl_cop_store_label':
hv.c:4029:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
 4029 |     if (flags & ~(SVf_UTF8))
      |               ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o mg.o mg.c
In file included from perl.h:7246,
                 from mg.c:45:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
mg.c: In function 'S_save_magic_flags':
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
mg.c: In function 'Perl_mg_magical':
sv.h:1008:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.h:1008:46: note: in definition of macro 'SvMAGICAL_off'
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
mg.c: In function 'Perl_mg_get':
mg.c:204:51: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
  204 |                 (SSPTR(mgs_ix, MGS *))->mgs_flags &= ~(SVs_GMG|SVs_SMG|SVs_RMG);
      |                                                   ^~
mg.c:210:51: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
  210 |                 (SSPTR(mgs_ix, MGS *))->mgs_flags &=
      |                                                   ^~
mg.c:251:47: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
  251 |             (SSPTR(mgs_ix, MGS *))->mgs_flags &= ~(SVs_GMG|SVs_SMG|SVs_RMG);
      |                                               ^~
mg.c: In function 'Perl_mg_set':
mg.c:286:29: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
  286 |             mg->mg_flags &= ~MGf_GSKIP; /* setting requires another read */
      |                             ^
mg.c:287:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
  287 |             (SSPTR(mgs_ix, MGS*))->mgs_flags &= ~(SVs_GMG|SVs_SMG|SVs_RMG);
      |                                              ^~
mg.c: In function 'Perl_mg_size':
mg.c:350:19: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  350 |             len = vtbl->svt_len(aTHX_ sv, mg);
      |                   ^~~~
mg.c: In function 'Perl_mg_free':
sv.h:1008:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.h:1008:46: note: in definition of macro 'SvMAGICAL_off'
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
mg.c: In function 'Perl_magic_regdata_cnt':
regexp.h:545:43: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  545 | #  define RX_LASTPAREN(rx_sv)             (ReANY(rx_sv)->lastparen)
      |                                           ^
mg.c:679:29: note: in expansion of macro 'RX_LASTPAREN'
  679 |                 I32 paren = RX_LASTPAREN(rx);
      |                             ^~~~~~~~~~~~
mg.c: In function 'Perl_magic_regdatum_get':
mg.c:736:51: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  736 |                             i = RX_SUBCOFFSET(rx) +
      |                                                   ^
regexp.h:533:43: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  533 | #  define RX_SUBCOFFSET(rx_sv)            (ReANY(rx_sv)->subcoffset)
      |                                           ^
mg.c:736:33: note: in expansion of macro 'RX_SUBCOFFSET'
  736 |                             i = RX_SUBCOFFSET(rx) +
      |                                 ^~~~~~~~~~~~~
In file included from perl.h:5841:
mg.c:741:34: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  741 |                     sv_setuv(sv, i);
      |                                  ^
embed.h:712:55: note: in definition of macro 'sv_setuv'
  712 | #define sv_setuv(a,b)           Perl_sv_setuv(aTHX_ a,b)
      |                                                       ^
mg.c: In function 'Perl_emulate_cop_io':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
mg.c: In function 'Perl_magic_get':
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
regexp.h:545:43: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  545 | #  define RX_LASTPAREN(rx_sv)             (ReANY(rx_sv)->lastparen)
      |                                           ^
mg.c:1130:21: note: in expansion of macro 'RX_LASTPAREN'
 1130 |             paren = RX_LASTPAREN(rx);
      |                     ^~~~~~~~~~~~
regexp.h:546:43: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  546 | #  define RX_LASTCLOSEPAREN(rx_sv)        (ReANY(rx_sv)->lastcloseparen)
      |                                           ^
mg.c:1137:21: note: in expansion of macro 'RX_LASTCLOSEPAREN'
 1137 |             paren = RX_LASTCLOSEPAREN(rx);
      |                     ^~~~~~~~~~~~~~~~~
In file included from perl.h:3003:
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
mg.c:1232:17: note: in expansion of macro 'Newx'
 1232 |                 Newx(gary, num_groups, Groups_t);
      |                 ^~~~
mg.c: In function 'Perl_magic_setenv':
mg.c:1282:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1282 |         klen = mg->mg_len;
      |                ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
In file included from perl.h:4171:
mg.h:47:50: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
   47 | #define MgTAINTEDDIR_off(mg)    (mg->mg_flags &= ~MGf_TAINTEDDIR)
      |                                                  ^
mg.c:1323:9: note: in expansion of macro 'MgTAINTEDDIR_off'
 1323 |         MgTAINTEDDIR_off(mg);
      |         ^~~~~~~~~~~~~~~~
mg.c: In function 'Perl_magic_getsig':
mg.h:61:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   61 | #define MgPV_const(mg,lp)       ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? \
      |                                               ^
mg.c:1453:28: note: in expansion of macro 'MgPV_const'
 1453 |         const char * sig = MgPV_const(mg, siglen);
      |                            ^~~~~~~~~~
mg.c:1454:26: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 1454 |         mg->mg_private = i = whichsig_pvn(sig, siglen);
      |                          ^
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
mg.c: In function 'Perl_magic_setsig':
mg.h:61:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   61 | #define MgPV_const(mg,lp)       ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? \
      |                                               ^
mg.c:1694:21: note: in expansion of macro 'MgPV_const'
 1694 |     const char *s = MgPV_const(mg,len);
      |                     ^~~~~~~~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from perl.h:4168:
mg.c: In function 'Perl_magic_getnkeys':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
mg.c:1919:18: note: in expansion of macro 'HvUSEDKEYS'
 1919 |              i = HvUSEDKEYS(hv);
      |                  ^~~~~~~~~~
hv.h:351:33: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                 ^
mg.c:1919:18: note: in expansion of macro 'HvUSEDKEYS'
 1919 |              i = HvUSEDKEYS(hv);
      |                  ^~~~~~~~~~
mg.c: In function 'S_magic_methcall1':
mg.c:2036:49: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2036 |             arg1 = newSVpvn_flags(mg->mg_ptr, mg->mg_len, SVs_TEMP);
      |                                               ~~^~~~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
mg.c:2046:65: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2046 |         return Perl_magic_methcall(aTHX_ sv, mg, meth, flags, n - 1, val);
      |                                                               ~~^~~
mg.c:2048:59: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2048 |     return Perl_magic_methcall(aTHX_ sv, mg, meth, flags, n, arg1, val);
      |                                                           ^
mg.c: In function 'Perl_magic_setdbline':
mg.c:2220:32: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-129' [-Wsign-conversion]
 2220 |                 o->op_flags &= ~OPf_SPECIAL;
      |                                ^
mg.c: In function 'Perl_magic_getpos':
mg.c:2311:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2311 |             STRLEN i = found->mg_len;
      |                        ^~~~~
mg.c: In function 'Perl_magic_setpos':
mg.c:2354:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2354 |         pos += len;
      |             ^~
mg.c:2354:16: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2354 |         pos += len;
      |                ^~~
mg.c:2359:15: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2359 |         pos = len;
      |               ^~~
mg.c:2362:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-66' [-Wsign-conversion]
 2362 |     found->mg_flags &= ~(MGf_MINMATCH|MGf_BYTES);
      |                        ^
mg.c: In function 'Perl_magic_getvec':
sv.h:1502:46: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1502 | #define LvTARGLEN(sv)   ((XPVLV*)  SvANY(sv))->xlv_targlen
      |                         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
embed.h:712:55: note: in definition of macro 'sv_setuv'
  712 | #define sv_setuv(a,b)           Perl_sv_setuv(aTHX_ a,b)
      |                                                       ^
mg.c:2490:33: note: in expansion of macro 'do_vecget'
 2490 |     sv_setuv(sv, errflags ? 0 : do_vecget(lsv, LvTARGOFF(sv), LvTARGLEN(sv)));
      |                                 ^~~~~~~~~
mg.c:2490:63: note: in expansion of macro 'LvTARGLEN'
 2490 |     sv_setuv(sv, errflags ? 0 : do_vecget(lsv, LvTARGOFF(sv), LvTARGLEN(sv)));
      |                                                               ^~~~~~~~~
mg.c: In function 'Perl_defelem_target':
mg.c:2537:29: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 2537 |             mg->mg_flags &= ~MGf_REFCOUNTED;
      |                             ^
mg.c: In function 'Perl_vivify_defelem':
mg.c:2604:21: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 2604 |     mg->mg_flags &= ~MGf_REFCOUNTED;
      |                     ^
mg.c: In function 'Perl_magic_set':
mg.c:2913:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2913 |             while ( ((s = (char *) memchr(s, '\n', e - s))) ) {
      |                                                    ~~^~~
mg.c:2939:31: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2939 |         PL_debug = (SvIV(sv)) | DEBUG_TOP_FLAG;
      |                               ^
regexp.h:546:43: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  546 | #  define RX_LASTCLOSEPAREN(rx_sv)        (ReANY(rx_sv)->lastcloseparen)
      |                                           ^
mg.c:2980:22: note: in expansion of macro 'RX_LASTCLOSEPAREN'
 2980 |          && (paren = RX_LASTCLOSEPAREN(rx))) goto setparen_got_rx;
      |                      ^~~~~~~~~~~~~~~~~
mg.c:3003:67: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3003 |             tmp = out ? newSVpvn_flags(out + 1, start + len - out - 1,
      |                                                 ~~~~~~~~~~~~~~~~~~^~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
sv.h:1821:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
mg.c:3016:23: note: in expansion of macro 'SvIV'
 3016 |           PL_perldb = SvIV(sv);
      |                       ^~~~
mg.c:3036:29: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 3036 |                 PL_dowarn = (PL_dowarn & ~G_WARN_ON)
      |                             ^
mg.c:3111:32: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
 3111 |                 IoFLAGS(io) &= ~IOf_FLUSH;
      |                                ^
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
mg.c:3318:21: note: in expansion of macro 'Newx'
 3318 |                     Newx(gary, i + 1, Groups_t);
      |                     ^~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
mg.c:3320:21: note: in expansion of macro 'Renew'
 3320 |                     Renew(gary, i + 1, Groups_t);
      |                     ^~~~~
mg.c:3329:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3329 |                 PERL_UNUSED_RESULT(setgroups(i, gary));
      |                                              ^
perl.h:560:67: note: in definition of macro 'PERL_UNUSED_RESULT'
  560 | #    define PERL_UNUSED_RESULT(v) STMT_START { __typeof__(v) z = (v); (void)sizeof(z); } STMT_END
      |                                                                   ^
mg.c: In function 'S_restore_magic':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
mg.c:3718:25: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3718 |         PL_savestack_ix -= popval >> SAVE_TIGHT_SHIFT;
      |                         ^~
mg.c:3718:28: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 3718 |         PL_savestack_ix -= popval >> SAVE_TIGHT_SHIFT;
      |                            ^~~~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
mg.c: In function 'Perl_magic_sethint':
mg.c:3763:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3763 |         : newSVpvn_flags(mg->mg_ptr, mg->mg_len, SVs_TEMP);
      |                                      ~~^~~~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
In file included from perl.h:4169:
mg.c: In function 'Perl_magic_clearhint':
mg.c:3802:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3802 |                                  mg->mg_ptr, mg->mg_len, 0, 0));
      |                                              ~~^~~~~~~~
cop.h:535:57: note: in definition of macro 'CopHINTHASH_set'
  535 | #define CopHINTHASH_set(c,h)    ((c)->cop_hints_hash = (h))
      |                                                         ^
mg.c:3801:12: note: in expansion of macro 'cophh_delete_pvn'
 3801 |          : cophh_delete_pvn(CopHINTHASH_get(&PL_compiling),
      |            ^~~~~~~~~~~~~~~~
In file included from mg.c:46:
mg.c:3806:51: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3806 |         magic_sethint_feature(NULL, mg->mg_ptr, mg->mg_len, NULL, FALSE);
feature.h:255:54: note: in definition of macro 'magic_sethint_feature'
  255 |     S_magic_sethint_feature(aTHX_ (keysv), (keypv), (keylen), (valsv), (valbool))
      |                                                      ^~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o reentr.o reentr.c
In file included from perl.h:7246,
                 from reentr.c:33:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
reentr.c: In function 'Perl_reentrant_retry':
reentr.c:393:34: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  393 |     key = Perl_keyword (aTHX_ f, strlen(f), FALSE /* not feature enabled */);
      |                                  ^~~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o mro_core.o mro_core.c
In file included from perl.h:7246,
                 from mro_core.c:31:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
mro_core.c: In function 'S_mro_get_linear_isa_dfs':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from perl.h:5841:
mro_core.c: In function 'Perl_mro_get_linear_isa':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
mro_core.c:467:30: note: in expansion of macro 'HEK_LEN'
  467 |                              HEK_LEN(canon_name), HEK_FLAGS(canon_name),
      |                              ^~~~~~~
In file included from perl.h:4168:
mro_core.c: In function 'Perl_mro_isa_changed_in':
hv.h:339:4: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  339 |    ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
      |    ^
mro_core.c:517:34: note: in expansion of macro 'HvENAMELEN_get'
  517 |     const STRLEN stashname_len = HvENAMELEN_get(stash);
      |                                  ^~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:540:11: note: in expansion of macro 'hv_fetchhek'
  540 |     svp = hv_fetchhek(PL_isarev, stashhek, 0);
      |           ^~~~~~~~~~~
mro_core.c:559:33: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
  559 |     HvAUX(stash)->xhv_aux_flags &= ~HvAUXf_NO_DEREF;
      |                                 ^~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:535:41: note: in expansion of macro 'HEK_LEN'
  535 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),    \
      |                                         ^~~~~~~
mro_core.c:648:23: note: in expansion of macro 'hv_storehek'
  648 |                       hv_storehek(mroisarev, namehek, &PL_sv_yes);
      |                       ^~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:1761:70: note: in definition of macro 'mro_clean_isarev'
 1761 | #define mro_clean_isarev(a,b,c,d,e,f)   S_mro_clean_isarev(aTHX_ a,b,c,d,e,f)
      |                                                                      ^
mro_core.c:654:45: note: in expansion of macro 'HEK_LEN'
  654 |                      isa, HEK_KEY(namehek), HEK_LEN(namehek),
      |                                             ^~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:535:41: note: in expansion of macro 'HEK_LEN'
  535 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),    \
      |                                         ^~~~~~~
mro_core.c:691:15: note: in expansion of macro 'hv_storehek'
  691 |         (void)hv_storehek(mroisarev, stashhek, &PL_sv_yes);
      |               ^~~~~~~~~~~
In file included from perl.h:3003:
mro_core.c: In function 'S_mro_clean_isarev':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
hv.h:548:11: note: in expansion of macro 'hv_common'
  548 |     cBOOL(hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |           ^~~~~~~~~
hv.h:548:47: note: in expansion of macro 'HEK_LEN'
  548 |     cBOOL(hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                               ^~~~~~~
mro_core.c:718:26: note: in expansion of macro 'hv_existshek'
  718 |         if(exceptions && hv_existshek(exceptions, key))
      |                          ^~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:720:15: note: in expansion of macro 'hv_fetchhek'
  720 |         svp = hv_fetchhek(PL_isarev, key, 0);
      |               ^~~~~~~~~~~
mro_core.c:723:54: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  723 |             (void)hv_common(isarev, NULL, name, len, flags,
      |                                                      ^~~~~
embed.h:248:70: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                      ^
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
mro_core.c:726:23: note: in expansion of macro 'hv_deletehek'
  726 |                 (void)hv_deletehek(PL_isarev, key, G_DISCARD);
      |                       ^~~~~~~~~~~~
mro_core.c: In function 'Perl_mro_package_moved':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:791:18: note: in expansion of macro 'hv_fetchhek'
  791 |          !(svp = hv_fetchhek(GvSTASH(gv), GvNAME_HEK(gv), 0)) ||
      |                  ^~~~~~~~~~~
mro_core.c:821:51: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  821 |                 namesv, GvNAME(gv), GvNAMELEN(gv) - 2,
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
mro_core.c:844:54: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  844 |                     aname, GvNAME(gv), GvNAMELEN(gv) - 2,
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
mro_core.c: In function 'S_mro_gather_and_rename':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:1080:19: note: in expansion of macro 'hv_fetchhek'
 1080 |             svp = hv_fetchhek(PL_isarev, hvename, 0);
      |                   ^~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:1159:42: note: in expansion of macro 'hv_fetchhek'
 1159 |                     stashentry = stash ? hv_fetchhek(stash, HeKEY_hek(entry), 0) : NULL;
      |                                          ^~~~~~~~~~~
mro_core.c:1184:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1184 |                                         aname, key, len-2,
      |                                                     ~~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
mro_core.c:1198:53: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1198 |                                    subname, key, len-2,
      |                                                  ~~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:535:41: note: in expansion of macro 'HEK_LEN'
  535 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),    \
      |                                         ^~~~~~~
mro_core.c:1209:27: note: in expansion of macro 'hv_storehek'
 1209 |                     (void)hv_storehek(seen, HeKEY_hek(entry), &PL_sv_yes);
      |                           ^~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
hv.h:548:11: note: in expansion of macro 'hv_common'
  548 |     cBOOL(hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |           ^~~~~~~~~
hv.h:548:47: note: in expansion of macro 'HEK_LEN'
  548 |     cBOOL(hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                               ^~~~~~~
mro_core.c:1241:32: note: in expansion of macro 'hv_existshek'
 1241 |                     if(seen && hv_existshek(seen, HeKEY_hek(entry))) continue;
      |                                ^~~~~~~~~~~~
mro_core.c:1267:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1267 |                                         aname, key, len-2,
      |                                                     ~~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
mro_core.c:1281:53: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1281 |                                    subname, key, len-2,
      |                                                  ~~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
mro_core.c: In function 'Perl_mro_method_changed_in':
hv.h:339:4: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  339 |    ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
      |    ^
mro_core.c:1331:34: note: in expansion of macro 'HvENAMELEN_get'
 1331 |     const STRLEN stashname_len = HvENAMELEN_get(stash);
      |                                  ^~~~~~~~~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
mro_core.c:1333:23: note: in expansion of macro 'hv_fetchhek'
 1333 |     SV ** const svp = hv_fetchhek(PL_isarev, HvENAME_HEK(stash), 0);
      |                       ^~~~~~~~~~~
mro_core.c:1378:33: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 1378 |     HvAUX(stash)->xhv_aux_flags &= ~HvAUXf_NO_DEREF;
      |                                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o perly.o perly.c
In file included from perl.h:7246,
                 from perly.c:26:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
perly.c: In function 'Perl_yyparse':
perly.c:328:30: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  328 |                 Size_t pos = ps - parser->stack;
      |                              ^~
perly.c:329:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  329 |                 Size_t newsize = 2 * (parser->stack_max1 + 2 - parser->stack);
      |                                  ^
perly.c:413:27: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
  413 |             ps->state   = yyn;
      |                           ^~~
In file included from perly.c:449:
perly.y:1436:75: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 1436 |                           if ($$) $$->op_private |= $PERLY_SNAIL;
      |                                                                           ^
perly.y:1442:75: warning: conversion from 'I32' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 1442 |                           if ($$) $$->op_private |= $PERLY_PERCENT_SIGN;
      |                                                                           ^
perly.c:480:21: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
  480 |         ps->state = yystate;
      |                     ^~~~~~~
perly.c:578:23: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
  578 |         ps->state   = yyn;
      |                       ^~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp.o pp.c
In file included from perl.h:7246,
                 from pp.c:28:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
pp.c: In function 'S_rv2gv':
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
pp.c: In function 'Perl_pp_pos':
pp.c:325:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  325 |                 STRLEN i = mg->mg_len;
      |                            ^~
In file included from perl.h:5782:
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:332:21: note: in expansion of macro 'SETu'
  332 |                     SETu(i);
      |                     ^~~~
In file included from perl.h:5841:
pp.c: In function 'Perl_pp_prototype':
pp.c:380:57: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  380 |             const int code = keyword(s + 6, SvCUR(TOPs) - 6, 1);
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
pp.c: In function 'S_refto':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp.c: In function 'S_do_chomp':
pp.c:813:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  813 |                 if (is_utf8_string((U8*)s, send - s)) {
      |                                            ~~~~~^~~
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
pp.c:814:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  814 |                     sv_setpvn(retval, s, send - s);
      |                                          ~~~~~^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:816:21: note: in expansion of macro 'SvCUR_set'
  816 |                     SvCUR_set(sv, s - start);
      |                     ^~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp.c: In function 'Perl_pp_schop':
pp.c:849:24: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  849 |         sv_setiv(TARG, count);
      |                        ^~~~~
embed.h:681:55: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                       ^
pp.c: In function 'Perl_pp_chop':
pp.c:866:24: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  866 |         sv_setiv(TARG, count);
      |                        ^~~~~
embed.h:681:55: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                       ^
In file included from perl.h:4169:
pp.c: In function 'Perl_pp_undef':
cop.h:660:33: warning: conversion from 'line_t' {aka 'unsigned int'} to 'unsigned int:31' may change value [-Wconversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
pp.c:943:26: note: in expansion of macro 'CopLINE'
  943 |             GvLINE(sv) = CopLINE(PL_curcop);
      |                          ^~~~~~~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
pp.c: In function 'Perl_pp_pow':
pp.c:1077:33: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1077 |                         power = iv;
      |                                 ^~
pp.c:1089:34: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1089 |                         baseuv = iv;
      |                                  ^~
pp.c:1092:34: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1092 |                         baseuv = -iv; /* abs, baseuok == false records sign */
      |                                  ^
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:1152:29: note: in expansion of macro 'SETu'
 1152 |                             SETu( result );
      |                             ^~~~
pp.c: In function 'Perl_pp_multiply':
pp.c:1304:28: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1304 |                     alow = aiv;
      |                            ^~~
pp.c:1317:28: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1317 |                     blow = biv;
      |                            ^~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:1341:21: note: in expansion of macro 'SETu'
 1341 |                     SETu( product );
      |                     ^~~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:1382:29: note: in expansion of macro 'SETu'
 1382 |                             SETu( product_low );
      |                             ^~~~
pp.c: In function 'Perl_pp_modulo':
pp.c:1553:29: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1553 |                     right = biv;
      |                             ^~~
pp.c:1583:32: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1583 |                         left = aiv;
      |                                ^~~
pp.c:1646:40: warning: conversion to 'IV' {aka 'const long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1646 |                     sv_setiv(TARG, ~ans+1);
      |                                    ~~~~^~
embed.h:681:55: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                       ^
pp.c: In function 'Perl_pp_repeat':
pp.c:1702:28: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1702 |                    count = uv;
      |                            ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp.c:1758:23: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1758 |                 items * sizeof(const SV *), count - 1);
      |                       ^
pp.c:1758:23: warning: conversion to 'I32' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1758 |                 items * sizeof(const SV *), count - 1);
      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~
pp.c:1787:59: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1787 |                 repeatcpy(SvPVX(TARG) + len, SvPVX(TARG), len, count - 1);
      |                                                           ^~~
pp.c:1788:45: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1788 |                 SvCUR_set(TARG, SvCUR(TARG) * count);
      |                                             ^
sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
pp.c: In function 'Perl_pp_subtract':
pp.c:1876:31: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1876 |                         auv = aiv;
      |                               ^~~
pp.c:1896:27: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1896 |                     buv = biv;
      |                           ^~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:1936:21: note: in expansion of macro 'SETu'
 1936 |                     SETu( result );
      |                     ^~~~
pp.c: In function 'Perl_pp_left_shift':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2044:11: note: in expansion of macro 'SETu'
 2044 |           SETu(UV_LEFT_SHIFT(SvUV_nomg(svl), shift));
      |           ^~~~
pp.c: In function 'Perl_pp_right_shift':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2062:11: note: in expansion of macro 'SETu'
 2062 |           SETu(UV_RIGHT_SHIFT(SvUV_nomg(svl), shift));
      |           ^~~~
pp.c: In function 'Perl_pp_bit_and':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2369:11: note: in expansion of macro 'SETu'
 2369 |           SETu(u);
      |           ^~~~
pp.c: In function 'Perl_pp_nbit_and':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2394:11: note: in expansion of macro 'SETu'
 2394 |           SETu(u);
      |           ^~~~
pp.c: In function 'Perl_pp_bit_or':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2434:11: note: in expansion of macro 'SETu'
 2434 |           SETu(result);
      |           ^~~~
pp.c: In function 'Perl_pp_nbit_or':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2468:11: note: in expansion of macro 'SETu'
 2468 |           SETu(result);
      |           ^~~~
pp.c: In function 'Perl_pp_negate':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2543:17: note: in expansion of macro 'SETu'
 2543 |                 SETu((UV)IV_MIN);
      |                 ^~~~
pp.c: In function 'S_scomplement':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp.c:2587:16: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2587 |         anum = len;
      |                ^~~
pp.c: In function 'Perl_pp_complement':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2616:11: note: in expansion of macro 'SETu'
 2616 |           SETu(u);
      |           ^~~~
pp.c: In function 'Perl_pp_ncomplement':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2639:11: note: in expansion of macro 'SETu'
 2639 |           SETu(u);
      |           ^~~~
pp.c: In function 'Perl_pp_srand':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2974:9: note: in expansion of macro 'XPUSHu'
 2974 |         XPUSHu(anum);
      |         ^~~~~~
pp.c: In function 'Perl_pp_int':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:2997:9: note: in expansion of macro 'SETu'
 2997 |         SETu(0);
      |         ^~~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:3001:13: note: in expansion of macro 'SETu'
 3001 |             SETu(SvUV_nomg(sv));
      |             ^~~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:3011:19: note: in expansion of macro 'SETu'
 3011 |                   SETu(U_V(value));
      |                   ^~~~
pp.c: In function 'Perl_pp_abs':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:3059:9: note: in expansion of macro 'SETu'
 3059 |         SETu(uv);
      |         ^~~~
pp.c: In function 'Perl_pp_oct':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:3120:9: note: in expansion of macro 'SETu'
 3120 |         SETu(result_uv);
      |         ^~~~
pp.c: In function 'Perl_pp_length':
perl.h:3871:45: warning: conversion to 'U32' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                             ^~~~~~~~~~~~~~~~
perl.h:3871:45: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                             ^~~~~~~~~~~~~~~~
utf8.h:847:19: note: in expansion of macro 'UNLIKELY'
  847 | #define IN_BYTES  UNLIKELY(CopHINTS_get(PL_curcop) & HINT_BYTES)
      |                   ^~~~~~~~
pp.c:3133:20: note: in expansion of macro 'IN_BYTES'
 3133 |     U32 in_bytes = IN_BYTES;
      |                    ^~~~~~~~
pp.c: In function 'Perl_translate_substr_offsets':
pp.c:3212:17: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 3212 |         pos1_iv += curlen;
      |                 ^~
pp.c:3212:20: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 3212 |         pos1_iv += curlen;
      |                    ^~~~~~
pp.c:3219:30: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 3219 |             pos2_iv = curlen + len_iv;
      |                              ^
pp.c:3219:23: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 3219 |             pos2_iv = curlen + len_iv;
      |                       ^~~~~~
pp.c:3230:31: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3230 |                     pos2_iv = curlen;
      |                               ^~~~~~
pp.c:3238:19: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3238 |         pos2_iv = curlen;
      |                   ^~~~~~
pp.c:3253:19: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3253 |         pos2_iv = curlen;
      |                   ^~~~~~
pp.c: In function 'Perl_pp_substr':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp.c: In function 'Perl_pp_vec':
pp.c:3440:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 3440 |         LvTARGLEN(ret) = size;
      |                          ^~~~
pp.c: In function 'Perl_pp_index':
pp.c:3537:18: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3537 |         offset = is_index ? 0 : biglen;
      |                  ^~~~~~~~
pp.c:3540:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3540 |             offset = sv_pos_u2b_flags(big, offset, 0, SV_CONST_RETURN);
      |                                            ^~~~~~
embed.h:656:71: note: in definition of macro 'sv_pos_u2b_flags'
  656 | #define sv_pos_u2b_flags(a,b,c,d)       Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)
      |                                                                       ^
embed.h:656:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  656 | #define sv_pos_u2b_flags(a,b,c,d)       Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)
      |                                         ^~~~~~~~~~~~~~~~~~~~~
embed.h:656:41: note: in definition of macro 'sv_pos_u2b_flags'
  656 | #define sv_pos_u2b_flags(a,b,c,d)       Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)
      |                                         ^~~~~~~~~~~~~~~~~~~~~
pp.c:3542:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3542 |             offset += llen;
      |                    ^~
pp.c:3542:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3542 |             offset += llen;
      |                       ^~~~
pp.c:3547:18: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3547 |         offset = biglen;
      |                  ^~~~~~
pp.c:3557:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3557 |             retval = sv_pos_b2u_flags(big, retval, SV_CONST_RETURN);
      |                                            ^~~~~~
embed.h:654:63: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                                               ^
embed.h:654:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
embed.h:654:33: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
pp.c: In function 'Perl_pp_ord':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.c:3599:5: note: in expansion of macro 'SETu'
 3599 |     SETu(DO_UTF8(argsv)
      |     ^~~~
pp.c: In function 'Perl_pp_chr':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:3645:9: note: in expansion of macro 'SvCUR_set'
 3645 |         SvCUR_set(TARG, tmps - SvPVX_const(TARG));
      |         ^~~~~~~~~
pp.c: In function 'Perl_pp_crypt':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp.c: In function 'Perl_pp_ucfirst':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4012:17: note: in expansion of macro 'SvCUR_set'
 4012 |                 SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |                 ^~~~~~~~~
pp.c: In function 'Perl_pp_uc':
pp.c:4177:34: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4177 |                     const UV o = d - (U8*)SvPVX_const(dest);
      |                                  ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4199:9: note: in expansion of macro 'SvCUR_set'
 4199 |         SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |         ^~~~~~~~~
pp.c:4258:42: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4258 |                             const UV o = d - (U8*)SvPVX_const(dest);
      |                                          ^
pp.c:4300:38: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4300 |                     extra = send - s + variant_under_utf8_count(s, send);
      |                                      ^
pp.c:4313:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4313 |                                                    send - (s_peek + 1));
      |                                                    ~~~~~^~~~~~~~~~~~~~
pp.c:4325:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4325 |                     len = d - (U8*)SvPVX_const(dest);
      |                           ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4372:13: note: in expansion of macro 'SvCUR_set'
 4372 |             SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |             ^~~~~~~~~
pp.c: In function 'Perl_pp_lc':
pp.c:4454:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4454 |                                         send - (next_I + 1));
      |                                         ~~~~~^~~~~~~~~~~~~~
pp.c:4528:30: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4528 |                 const UV o = d - (U8*)SvPVX_const(dest);
      |                              ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4547:9: note: in expansion of macro 'SvCUR_set'
 4547 |         SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |         ^~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4589:13: note: in expansion of macro 'SvCUR_set'
 4589 |             SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |             ^~~~~~~~~
pp.c: In function 'Perl_pp_quotemeta':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4673:9: note: in expansion of macro 'SvCUR_set'
 4673 |         SvCUR_set(TARG, d - SvPVX_const(TARG));
      |         ^~~~~~~~~
pp.c: In function 'Perl_pp_fc':
pp.c:4751:30: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4751 |                 const UV o = d - (U8*)SvPVX_const(dest);
      |                              ^
pp.c:4798:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4798 |                                  + variant_under_utf8_count(s, send);
      |                                  ^
pp.c:4826:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4826 |                                                    send - (s_peek + 1));
      |                                                    ~~~~~^~~~~~~~~~~~~~
pp.c:4832:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4832 |                     len = d - (U8*)SvPVX_const(dest);
      |                           ^
pp.c:4863:38: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4863 |                         const UV o = d - (U8*)SvPVX_const(dest);
      |                                      ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp.c:4876:5: note: in expansion of macro 'SvCUR_set'
 4876 |     SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
      |     ^~~~~~~~~
pp.c: In function 'Perl_pp_akeys':
embed.h:58:33: warning: conversion to 'IV' {aka 'long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
pp.h:410:23: note: in definition of macro 'TARGi'
  410 |         IV TARGi_iv = i;                                                \
      |                       ^
pp.c:5038:9: note: in expansion of macro 'PUSHi'
 5038 |         PUSHi(av_count(array));
      |         ^~~~~
pp.c:5038:15: note: in expansion of macro 'av_count'
 5038 |         PUSHi(av_count(array));
      |               ^~~~~~~~
pp.c: In function 'Perl_pp_splice':
pp.c:5570:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5570 |                                     sp - mark);
      |                                     ~~~^~~~~~
In file included from perl.h:3003:
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pp.c:5628:13: note: in expansion of macro 'Newx'
 5628 |             Newx(tmparyval, newlen, SV*);       /* so remember insertion */
      |             ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp.c:5629:13: note: in expansion of macro 'Copy'
 5629 |             Copy(MARK, tmparyval, newlen, SV*);
      |             ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp.c:5678:17: note: in expansion of macro 'Move'
 5678 |                 Move(src, dst, after, SV*);
      |                 ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp.c:5688:13: note: in expansion of macro 'Copy'
 5688 |             Copy( tmparyval, AvARRAY(ary) + offset, newlen, SV* );
      |             ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pp.c:5695:13: note: in expansion of macro 'Newx'
 5695 |             Newx(tmparyval, length, SV*);       /* so remember deletion */
      |             ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp.c:5696:13: note: in expansion of macro 'Copy'
 5696 |             Copy(AvARRAY(ary)+offset, tmparyval, length, SV*);
      |             ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp.c:5705:21: note: in expansion of macro 'Move'
 5705 |                     Move(src, dst, offset, SV*);
      |                     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp.c:5727:13: note: in expansion of macro 'Copy'
 5727 |             Copy( MARK, AvARRAY(ary) + offset, newlen, SV* );
      |             ^~~~
pp.c: In function 'Perl_pp_reverse':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp.c: In function 'Perl_pp_split':
pp.c:6019:24: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6019 |     SSize_t maxiters = slen + 10;
      |                        ^~~~
pp.c:6069:19: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 6069 |             flags &= ~SVs_TEMP; /* SVs will not be mortal */
      |                   ^~
pp.c:6134:43: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6134 |                 dstr = newSVpvn_flags(s, m-s, flags);
      |                                          ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6178:43: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6178 |                 dstr = newSVpvn_flags(s, m-s, flags);
      |                                          ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6196:21: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6196 |             iters = slen -1;
      |                     ^~~~
pp.c:6197:21: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6197 |             limit = slen + 1;
      |                     ^~~~
pp.c:6222:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6222 |                     dstr = newSVpvn_flags(m, s-m, flags);
      |                                              ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
regexp.h:542:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  542 | #  define RX_MINLENRET(rx_sv)             (RXp_MINLENRET(ReANY(rx_sv)))
      |                                           ^
pp.c:6241:15: note: in expansion of macro 'RX_MINLENRET'
 6241 |         len = RX_MINLENRET(rx);
      |               ^~~~~~~~~~~~
pp.c:6256:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6256 |                     dstr = newSVpvn_flags(s, m-s, flags);
      |                                              ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6262:58: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6262 |                     s = (char*)utf8_hop_forward((U8*) m, len, (U8*) strend);
      |                                                          ^~~
pp.c:6281:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6281 |                     dstr = newSVpvn_flags(s, m-s, flags);
      |                                              ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6287:57: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6287 |                     s = (char*)utf8_hop_forward((U8*)m, len, (U8 *) strend);
      |                                                         ^~~
pp.c:6294:18: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6294 |         maxiters += slen * RX_NPARENS(rx);
      |                  ^~
pp.c:6294:21: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6294 |         maxiters += slen * RX_NPARENS(rx);
      |                     ^~~~
pp.c:6317:43: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6317 |                 dstr = newSVpvn_flags(s, m-s, flags);
      |                                          ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6337:55: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6337 |                             dstr = newSVpvn_flags(s, m-s, flags);
      |                                                      ~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp.c:6359:30: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6359 |             const STRLEN l = strend - s;
      |                              ^~~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pp.c:6393:21: note: in expansion of macro 'Zero'
 6393 |                     Zero(AvARRAY(ary), AvMAX(ary), SV*);
      |                     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp.c:6401:13: note: in expansion of macro 'Copy'
 6401 |             Copy(SP + 1 - iters, AvARRAY(ary), iters, SV*);
      |             ^~~~
pp.c: In function 'S_maybe_unwind_defav':
pp.c:6506:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-33' [-Wsign-conversion]
 6506 |         cx->cx_type &= ~CXp_HASARGS;
      |                        ^
pp.c: In function 'Perl_pp_coreargs':
pp.c:6519:14: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6519 |     I32 oa = opnum ? PL_opargs[opnum] >> OASHIFT : 0;
      |              ^~~~~
pp.c:6563:10: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6563 |     oa = PL_opargs[opnum] >> OASHIFT;
      |          ^~~~~~~~~
In file included from perl.h:4168:
pp.c: In function 'Perl_pp_argelem':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp.c:7041:33: note: in expansion of macro 'HvUSEDKEYS'
 7041 |         if (SvRMAGICAL(targ) || HvUSEDKEYS((HV*)targ)) {
      |                                 ^~~~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp_hot.o pp_hot.c
In file included from perl.h:7246,
                 from pp_hot.c:36:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
pp_hot.c: In function 'S_do_concat':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp_hot.c: In function 'Perl_pp_multiconcat':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp_hot.c:674:14: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  674 |         grow += len;
      |              ^~
In file included from perl.h:5841:
embed.h:1064:41: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1064 | #define variant_under_utf8_count        S_variant_under_utf8_count
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:1064:41: note: in definition of macro 'variant_under_utf8_count'
 1064 | #define variant_under_utf8_count        S_variant_under_utf8_count
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
pp_hot.c:705:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  705 |                 grow       += extra;
      |                            ^~
pp_hot.c:776:35: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  776 |             STRLEN offset       = lens->ssize > 0 ? lens->ssize : 0;
      |                                   ^~~~
In file included from perl.h:3003:
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_hot.c:855:13: note: in expansion of macro 'Copy'
  855 |             Copy(svpv_p->pv, targ_pv, len, char);
      |             ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_hot.c:871:17: note: in expansion of macro 'Copy'
  871 |                 Copy(const_pv, targ_pv, len, char);
      |                 ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_hot.c:883:17: note: in expansion of macro 'Copy'
  883 |                 Copy(svpv_p->pv, targ_pv, len, char);
      |                 ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_hot.c:908:5: note: in expansion of macro 'SvCUR_set'
  908 |     SvCUR_set(targ, targ_pv - SvPVX(targ));
      |     ^~~~~~~~~
pp_hot.c:1016:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1016 |                 right = newSVpvn_flags(cpv, len, (utf8 | SVs_TEMP));
      |                                             ^~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp_hot.c: In function 'Perl_pp_readline':
embed.h:58:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
pp_hot.c:1241:9: note: in expansion of macro 'tryAMAGICunTARGETlist'
 1241 |         tryAMAGICunTARGETlist(iter_amg, 0);
      |         ^~~~~~~~~~~~~~~~~~~~~
pp_hot.c: In function 'Perl_pp_add':
pp_hot.c:1522:31: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1522 |                         auv = aiv;
      |                               ^~~
pp_hot.c:1544:27: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1544 |                     buv = biv;
      |                           ^~~
In file included from perl.h:5782:
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp_hot.c:1584:21: note: in expansion of macro 'SETu'
 1584 |                     SETu( result );
      |                     ^~~~
pp_hot.c: In function 'Perl_pp_aelemfast':
pp_hot.c:1644:29: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1644 |     svp = av_fetch(av, key, lval);
      |                             ^~~~
embed.h:62:57: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                         ^
pp_hot.c: In function 'Perl_pp_print':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:1689:13: note: in expansion of macro 'Move'
 1689 |             Move(MARK, MARK + 1, (SP - MARK) + 1, SV*);
      |             ^~~~
pp_hot.c:1696:65: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1696 |                                     ? TIED_METHOD_SAY : 0)), sp - mark);
      |                                                              ~~~^~~~~~
In file included from perl.h:4168:
pp_hot.c: In function 'S_padhv_rv2hv_common':
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_hot.c:1828:13: note: in expansion of macro 'HvUSEDKEYS'
 1828 |         i = HvUSEDKEYS(hv);
      |             ^~~~~~~~~~
hv.h:351:33: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                 ^
pp_hot.c:1828:13: note: in expansion of macro 'HvUSEDKEYS'
 1828 |         i = HvUSEDKEYS(hv);
      |             ^~~~~~~~~~
pp_hot.c: In function 'S_aassign_copy_common':
pp_hot.c:2179:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-67108865' to '4227858431' [-Wsign-conversion]
 2179 |             SvFLAGS(svr) &= ~SVf_BREAK;
      |                          ^~
pp_hot.c:2208:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-67108865' to '4227858431' [-Wsign-conversion]
 2208 |             SvFLAGS(svl) &= ~SVf_BREAK;
      |                          ^~
pp_hot.c: In function 'Perl_pp_aassign':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_hot.c:2452:17: note: in expansion of macro 'Copy'
 2452 |                 Copy(&(PL_tmps_stack[tmps_base]), AvARRAY(ary), nelems, SV*);
      |                 ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:2458:21: note: in expansion of macro 'Move'
 2458 |                     Move(&PL_tmps_stack[tmps_base + nelems],
      |                     ^~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_hot.c:2586:37: note: in expansion of macro 'HvUSEDKEYS'
 2586 |             if (SvRMAGICAL(hash) || HvUSEDKEYS(hash))
      |                                     ^~~~~~~~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:2668:21: note: in expansion of macro 'Move'
 2668 |                     Move(&PL_tmps_stack[tmps_base + nelems],
      |                     ^~~~
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_hot.c:2745:36: note: in expansion of macro 'HvUSEDKEYS'
 2745 |             if (SvRMAGICAL(lsv) || HvUSEDKEYS((HV*)lsv))
      |                                    ^~~~~~~~~~
In file included from perl.h:4171:
pp_hot.c: In function 'Perl_pp_match':
mg.h:73:34: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   73 | # define MgBYTEPOS(mg,sv,pv,len) S_MgBYTEPOS(aTHX_ mg,sv,pv,len)
      |                                  ^~~~~~~~~~~
mg.h:73:34: note: in definition of macro 'MgBYTEPOS'
   73 | # define MgBYTEPOS(mg,sv,pv,len) S_MgBYTEPOS(aTHX_ mg,sv,pv,len)
      |                                  ^~~~~~~~~~~
mg.h:82:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
   82 |            (mg)->mg_flags &= ~MGf_BYTES))
      |                              ^
pp_hot.c:3093:9: note: in expansion of macro 'MgBYTEPOS_set'
 3093 |         MgBYTEPOS_set(mg, TARG, truebase, RXp_OFFS(prog)[0].end);
      |         ^~~~~~~~~~~~~
pp_hot.c:3097:29: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 3097 |             mg->mg_flags &= ~MGf_MINMATCH;
      |                             ^
regexp.h:536:43: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  536 | #  define RXp_NPARENS(prog)               (prog->nparens)
      |                                           ^
pp_hot.c:3108:29: note: in expansion of macro 'RXp_NPARENS'
 3108 |         const I32 nparens = RXp_NPARENS(prog);
      |                             ^~~~~~~~~~~
pp_hot.c:3129:41: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3129 |                 PUSHs(newSVpvn_flags(s, len,
      |                                         ^~~
pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
pp_hot.c:3129:23: note: in expansion of macro 'newSVpvn_flags'
 3129 |                 PUSHs(newSVpvn_flags(s, len,
      |                       ^~~~~~~~~~~~~~
pp_hot.c:3139:22: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 3139 |             curpos = (UV)RXp_OFFS(prog)[0].end;
      |                      ^
pp_hot.c: In function 'Perl_do_readline':
pp_hot.c:3195:40: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 3195 |                         IoFLAGS(io) &= ~IOf_START;
      |                                        ^
pp_hot.c:3283:30: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3283 |         if (!sv_gets(sv, fp, offset)
      |                              ^~~~~~
embed.h:621:56: note: in definition of macro 'sv_gets'
  621 | #define sv_gets(a,b,c)          Perl_sv_gets(aTHX_ a,b,c)
      |                                                        ^
pp_hot.c: In function 'Perl_pp_iter':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp_hot.c: In function 'Perl_pp_subst':
pp_hot.c:4317:16: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4317 |     maxiters = 2 * slen + 10;   /* We can match twice at each
      |                ^
handy.h:2790:134: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:4428:21: note: in expansion of macro 'Move'
 4428 |                     Move(d, m, i, char);
      |                     ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_hot.c:4432:17: note: in expansion of macro 'SvCUR_set'
 4432 |                 SvCUR_set(TARG, m - s);
      |                 ^~~~~~~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:4438:21: note: in expansion of macro 'Move'
 4438 |                     Move(s, d - i, i, char);
      |                     ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:4459:25: note: in expansion of macro 'Move'
 4459 |                         Move(s, d, i, char);
      |                         ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_hot.c:4473:17: note: in expansion of macro 'SvCUR_set'
 4473 |                 SvCUR_set(TARG, d - SvPVX_const(TARG) + i);
      |                 ^~~~~~~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_hot.c:4474:17: note: in expansion of macro 'Move'
 4474 |                 Move(s, d, i+1, char);          /* include the NUL */
      |                 ^~~~
pp_hot.c:4510:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4510 |         dstr = newSVpvn_flags(orig, s-orig,
      |                                     ~^~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp_hot.c:4540:49: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4540 |             sv_catpvn_nomg_maybeutf8(dstr, s, m - s, DO_UTF8(TARG));
      |                                               ~~^~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
pp_hot.c:4540:13: note: in expansion of macro 'sv_catpvn_nomg_maybeutf8'
 4540 |             sv_catpvn_nomg_maybeutf8(dstr, s, m - s, DO_UTF8(TARG));
      |             ^~~~~~~~~~~~~~~~~~~~~~~~
pp_hot.c:4558:50: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4558 |         sv_catpvn_nomg_maybeutf8(dstr, s, strend - s, DO_UTF8(TARG));
      |                                           ~~~~~~~^~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
pp_hot.c:4558:9: note: in expansion of macro 'sv_catpvn_nomg_maybeutf8'
 4558 |         sv_catpvn_nomg_maybeutf8(dstr, s, strend - s, DO_UTF8(TARG));
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
pp_hot.c: In function 'Perl_pp_grepwhile':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp_hot.c: In function 'Perl_leave_adjust_stacks':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from perl.h:4170:
pp_hot.c: In function 'Perl_clear_defarray':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pp_hot.c:5045:9: note: in expansion of macro 'AvREIFY_only'
 5045 |         AvREIFY_only(av);
      |         ^~~~~~~~~~~~
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pp_hot.c:5051:9: note: in expansion of macro 'AvREIFY_only'
 5051 |         AvREIFY_only(newav);
      |         ^~~~~~~~~~~~
pp_hot.c: In function 'Perl_pp_entersub':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:209:72: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                        ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
pp_hot.c:5169:63: note: in expansion of macro 'GvNAMELEN'
 5169 |             autogv = gv_autoload_pvn(GvSTASH(gv), GvNAME(gv), GvNAMELEN(gv),
      |                                                               ^~~~~~~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
pp_hot.c:5257:17: note: in expansion of macro 'Renew'
 5257 |                 Renew(ary, items, SV*);
      |                 ^~~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_hot.c:5264:17: note: in expansion of macro 'Copy'
 5264 |                 Copy(MARK+1,AvARRAY(av),items,SV*);
      |                 ^~~~
pp_hot.c: In function 'Perl_pp_aelem':
pp_hot.c:5454:22: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5454 |               elem = uv > IV_MAX ? IV_MAX : uv;
      |                      ^~
pp_hot.c: In function 'Perl_vivify_ref':
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
pp_hot.c:5508:9: note: in expansion of macro 'prepare_SV_for_RV'
 5508 |         prepare_SV_for_RV(sv);
      |         ^~~~~~~~~~~~~~~~~
pp_hot.c: In function 'S_opmethod_stash':
pp_hot.c:5581:62: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5581 |         stash = gv_stashpvn(packname, packlen, packname_utf8 | GV_CACHE_ONLY);
embed.h:243:60: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                            ^
pp_hot.c:5585:36: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5585 |                 packname, packlen, packname_utf8, SVt_PVIO
      |                                    ^~~~~~~~~~~~~
embed.h:231:74: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                          ^
pp_hot.c:5597:52: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5597 |             stash = gv_stashpvn(packname, packlen, packname_utf8);
      |                                                    ^~~~~~~~~~~~~
embed.h:243:60: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                            ^
pp_hot.c: At top level:
pp_hot.c:2920:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
 2920 | S_should_we_output_Debug_r(pTHX_ regexp *prog)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp_ctl.o pp_ctl.c
In file included from perl.h:7246,
                 from pp_ctl.c:35:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
pp_ctl.c: In function 'Perl_pp_substcont':
pp_ctl.c:235:74: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  235 |                       sv_catpvn_nomg_utf8_upgrade(dstr, s, cx->sb_strend - s, nsv);
      |                                                            ~~~~~~~~~~~~~~^~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp_ctl.c:235:23: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  235 |                       sv_catpvn_nomg_utf8_upgrade(dstr, s, cx->sb_strend - s, nsv);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pp_ctl.c:235:74: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  235 |                       sv_catpvn_nomg_utf8_upgrade(dstr, s, cx->sb_strend - s, nsv);
      |                                                            ~~~~~~~~~~~~~~^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
pp_ctl.c:235:23: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  235 |                       sv_catpvn_nomg_utf8_upgrade(dstr, s, cx->sb_strend - s, nsv);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp_ctl.c:235:23: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  235 |                       sv_catpvn_nomg_utf8_upgrade(dstr, s, cx->sb_strend - s, nsv);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pp_ctl.c:237:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  237 |                       sv_catpvn_nomg(dstr, s, cx->sb_strend - s);
      |                                               ~~~~~~~~~~~~~~^~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
pp_ctl.c:237:23: note: in expansion of macro 'sv_catpvn_nomg'
  237 |                       sv_catpvn_nomg(dstr, s, cx->sb_strend - s);
      |                       ^~~~~~~~~~~~~~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
In file included from perl.h:4171:
mg.h:82:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
   82 |            (mg)->mg_flags &= ~MGf_BYTES))
      |                              ^
pp_ctl.c:298:25: note: in expansion of macro 'MgBYTEPOS_set'
  298 |                         MgBYTEPOS_set(mg, targ, SvPVX(targ), -1);
      |                         ^~~~~~~~~~~~~
pp_ctl.c:329:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  329 |             sv_catpvn_nomg_utf8_upgrade(dstr, s, m - s, nsv);
      |                                                  ~~^~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
pp_ctl.c:329:13: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  329 |             sv_catpvn_nomg_utf8_upgrade(dstr, s, m - s, nsv);
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pp_ctl.c:329:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  329 |             sv_catpvn_nomg_utf8_upgrade(dstr, s, m - s, nsv);
      |                                                  ~~^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
pp_ctl.c:329:13: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  329 |             sv_catpvn_nomg_utf8_upgrade(dstr, s, m - s, nsv);
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp_ctl.c:329:13: note: in expansion of macro 'sv_catpvn_nomg_utf8_upgrade'
  329 |             sv_catpvn_nomg_utf8_upgrade(dstr, s, m - s, nsv);
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
pp_ctl.c:331:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  331 |             sv_catpvn_nomg(dstr, s, m-s);
      |                                     ~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
pp_ctl.c:331:13: note: in expansion of macro 'sv_catpvn_nomg'
  331 |             sv_catpvn_nomg(dstr, s, m-s);
      |             ^~~~~~~~~~~~~~
mg.h:82:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
   82 |            (mg)->mg_flags &= ~MGf_BYTES))
      |                              ^
pp_ctl.c:348:9: note: in expansion of macro 'MgBYTEPOS_set'
  348 |         MgBYTEPOS_set(mg, sv, SvPVX(sv), m - orig);
      |         ^~~~~~~~~~~~~
pp_ctl.c: In function 'Perl_pp_formline':
pp_ctl.c:567:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  567 |             linemark = t - SvPVX(PL_formtarget);
      |                        ^
pp_ctl.c:585:19: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  585 |             arg = *fpc++;
      |                   ^
pp_ctl.c:704:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  704 |             to_copy = itembytes;
      |                       ^~~~~~~~~
pp_ctl.c:721:51: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  721 |                     Newx(new_compiled, mg->mg_len / sizeof(U32), U32);
      |                                                   ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
handy.h:2668:16: note: in expansion of macro 'UNLIKELY'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                ^~~~~~~~
handy.h:2668:25: note: in expansion of macro '_MEM_WRAP_WILL_WRAP'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                         ^~~~~~~~~~~~~~~~~~~
handy.h:2680:30: note: in expansion of macro 'MEM_WRAP_CHECK'
 2680 | #define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),
      |                              ^~~~~~~~~~~~~~
handy.h:2761:31: note: in expansion of macro 'MEM_WRAP_CHECK_'
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                               ^~~~~~~~~~~~~~~
pp_ctl.c:721:21: note: in expansion of macro 'Newx'
  721 |                     Newx(new_compiled, mg->mg_len / sizeof(U32), U32);
      |                     ^~~~
In file included from perl.h:3003:
pp_ctl.c:721:51: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  721 |                     Newx(new_compiled, mg->mg_len / sizeof(U32), U32);
      |                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pp_ctl.c:721:21: note: in expansion of macro 'Newx'
  721 |                     Newx(new_compiled, mg->mg_len / sizeof(U32), U32);
      |                     ^~~~
pp_ctl.c:722:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  722 |                     memcpy(new_compiled, mg->mg_ptr, mg->mg_len);
      |                                                      ~~^~~~~~~~
pp_ctl.c:738:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  738 |                     sv_setpvn(sv, s, len - (s-item));
      |                                          ^
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
pp_ctl.c:765:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  765 |                             to_copy = s - item - 1;
      |                                       ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_ctl.c:786:17: note: in expansion of macro 'SvCUR_set'
  786 |                 SvCUR_set(PL_formtarget,
      |                 ^~~~~~~~~
pp_ctl.c:810:36: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  810 |                         linemark = s - (U8*)SvPVX(PL_formtarget);
      |                                    ^
pp_ctl.c:848:19: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  848 |             arg = *fpc++;
      |                   ^
pp_ctl.c:854:19: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  854 |             arg = *fpc++;
      |                   ^
pp_ctl.c:877:51: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  877 |                 Size_t max = SvLEN(PL_formtarget) - (t - SvPVX(PL_formtarget));
      |                                                   ^
pp_ctl.c:911:19: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  911 |             arg = *fpc++;
      |                   ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_ctl.c:956:13: note: in expansion of macro 'SvCUR_set'
  956 |             SvCUR_set(PL_formtarget, t - SvPVX_const(PL_formtarget));
      |             ^~~~~~~~~
In file included from perl.h:4163:
pp_ctl.c: In function 'Perl_pp_grepstart':
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
pp_ctl.c:987:5: note: in expansion of macro 'SAVE_DEFSV'
  987 |     SAVE_DEFSV;
      |     ^~~~~~~~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp_ctl.c: In function 'Perl_pp_mapwhile':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_ctl.c:1074:13: note: in expansion of macro 'Move'
 1074 |             Move(PL_tmps_stack + tmpsbase,
      |             ^~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
pp_ctl.c: In function 'Perl_pp_caller':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_ctl.c:2064:13: note: in expansion of macro 'Copy'
 2064 |             Copy(AvALLOC(ary), AvARRAY(PL_dbargs), AvFILLp(ary) + 1 + off, SV*);
      |             ^~~~
pp_ctl.c: In function 'Perl_pp_return':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_ctl.c:2598:21: note: in expansion of macro 'Move'
 2598 |                     Move(MARK + 1, oldsp + 1, nargs, SV*);
      |                     ^~~~
pp_ctl.c: In function 'Perl_pp_goto':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:209:72: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                        ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
pp_ctl.c:2891:43: note: in expansion of macro 'GvNAMELEN'
 2891 |                                           GvNAMELEN(gv),
      |                                           ^~~~~~~~~
pp_ctl.c: In function 'Perl_pp_exit':
pp_ctl.c:3290:13: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3290 |     my_exit(anum);
      |             ^~~~
embed.h:337:52: note: in definition of macro 'my_exit'
  337 | #define my_exit(a)              Perl_my_exit(aTHX_ a)
      |                                                    ^
pp_ctl.c: In function 'S_save_lines':
pp_ctl.c:3310:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3310 |         t = (const char *)memchr(s, '\n', send - s);
      |                                           ~~~~~^~~
pp_ctl.c:3316:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3316 |         sv_setpvn_fresh(tmpstr, s, t - s);
      |                                    ~~^~~
embed.h:699:64: note: in definition of macro 'sv_setpvn_fresh'
  699 | #define sv_setpvn_fresh(a,b,c)  Perl_sv_setpvn_fresh(aTHX_ a,b,c)
      |                                                                ^
pp_ctl.c: In function 'S_doeval_compile':
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
pp_ctl.c:3504:5: note: in expansion of macro 'CvEVAL_on'
 3504 |     CvEVAL_on(evalcv);
      |     ^~~~~~~~~
pp_ctl.c:3571:22: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
 3571 |             PL_hints &= ~HINT_RE_EVAL;
      |                      ^~
pp_ctl.c: In function 'S_require_file':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:3936:30: note: in expansion of macro 'hv_fetch'
 3936 |                 svp_cached = hv_fetch(GvHVn(PL_incgv), (char*) name, len, 0);
      |                              ^~~~~~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:3980:60: note: in expansion of macro 'hv_fetch'
 3980 |         SV * const * const svp = svp_cached ? svp_cached : hv_fetch(GvHVn(PL_incgv), unixname, unixlen, 0);
      |                                                            ^~~~~~~~
In file included from perl.h:4161:
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
pp_ctl.c:4023:21: note: in expansion of macro 'ninstr'
 4023 |                 if (ninstr(name, name + package_len, slashdot,
      |                     ^~~~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:4179:27: note: in expansion of macro 'hv_fetch'
 4179 |                     svp = hv_fetch(GvHVn(PL_incgv), name, len, 0);
      |                           ^~~~~~~~
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:4384:15: note: in expansion of macro 'hv_store'
 4384 |         (void)hv_store(GvHVn(PL_incgv),
      |               ^~~~~~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:4387:26: note: in expansion of macro 'hv_fetch'
 4387 |         SV** const svp = hv_fetch(GvHVn(PL_incgv), unixname, unixlen, 0);
      |                          ^~~~~~~~
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
pp_ctl.c:4389:19: note: in expansion of macro 'hv_store'
 4389 |             (void)hv_store(GvHVn(PL_incgv),
      |                   ^~~~~~~~
pp_ctl.c: In function 'Perl_pp_entereval':
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
pp_ctl.c:4547:15: note: in expansion of macro 'my_snprintf'
 4547 |         len = my_snprintf(tmpbuf, sizeof(tbuf), "_<(eval %lu)", (unsigned long)++PL_evalseq);
      |               ^~~~~~~~~~~
hv.h:512:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                                                ^~~~~~
handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
hv.h:512:6: note: in expansion of macro 'MUTABLE_SV'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |      ^~~~~~~~~~
hv.h:512:17: note: in expansion of macro 'hv_common_key_len'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                 ^~~~~~~~~~~~~~~~~
pp_ctl.c:4598:19: note: in expansion of macro 'hv_delete'
 4598 |             (void)hv_delete(PL_defstash, tmpbuf, len, G_DISCARD);
      |                   ^~~~~~~~~
pp_ctl.c: In function 'S_do_smartmatch':
pp_ctl.c:5001:55: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5001 |                 SV * const * const svp = av_fetch(av, i, FALSE);
      |                                                       ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
In file included from perl.h:4168:
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_ctl.c:5074:25: note: in expansion of macro 'HvUSEDKEYS'
 5074 |                 else if(HvUSEDKEYS((const HV *) hv) != HvUSEDKEYS(other_hv))
      |                         ^~~~~~~~~~
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_ctl.c:5074:56: note: in expansion of macro 'HvUSEDKEYS'
 5074 |                 else if(HvUSEDKEYS((const HV *) hv) != HvUSEDKEYS(other_hv))
      |                                                        ^~~~~~~~~~
hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
pp_ctl.c:5099:35: note: in expansion of macro 'HvUSEDKEYS'
 5099 |                 other_key_count = HvUSEDKEYS(other_hv);
      |                                   ^~~~~~~~~~
pp_ctl.c:5114:54: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5114 |                 SV ** const svp = av_fetch(other_av, i, FALSE);
      |                                                      ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5168:54: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5168 |                 SV ** const svp = av_fetch(other_av, i, FALSE);
      |                                                      ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5194:82: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5194 |                     SV * const * const this_elem = av_fetch(MUTABLE_AV(SvRV(e)), i, FALSE);
      |                                                                                  ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5195:72: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5195 |                     SV * const * const other_elem = av_fetch(other_av, i, FALSE);
      |                                                                        ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5242:76: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5242 |                     SV * const * const svp = av_fetch(MUTABLE_AV(SvRV(e)), i, FALSE);
      |                                                                            ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5263:72: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5263 |                 SV * const * const svp = av_fetch(MUTABLE_AV(SvRV(e)), i, FALSE);
      |                                                                        ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c:5278:76: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5278 |                     SV * const * const svp = av_fetch(MUTABLE_AV(SvRV(e)), i, FALSE);
      |                                                                            ^
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
pp_ctl.c: In function 'S_doparseform':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pp_ctl.c:5617:5: note: in expansion of macro 'Newx'
 5617 |     Newx(fops, maxops, U32);
      |     ^~~~
pp_ctl.c:5724:26: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5724 |                 *fpc++ = s - base;              /* fieldsize for FETCH */
      |                          ^
pp_ctl.c:5741:26: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5741 |                 *fpc++ = s - base;                /* fieldsize for FETCH */
      |                          ^
pp_ctl.c:5768:26: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5768 |                 *fpc++ = s - base;              /* fieldsize for FETCH */
      |                          ^
pp_ctl.c:5791:22: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5791 |     mg->mg_len = arg * sizeof(U32);
      |                      ^
pp_ctl.c:5791:18: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 5791 |     mg->mg_len = arg * sizeof(U32);
      |                  ^~~
pp_ctl.c: In function 'S_run_user_filter':
pp_ctl.c:5848:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5848 |     umaxlen = maxlen;
      |               ^~~~~~
pp_ctl.c:5874:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5874 |                     take = first_nl + 1 - cache_p;
      |                            ^~~~~~~~
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
pp_ctl.c:5911:9: note: in expansion of macro 'SAVE_DEFSV'
 5911 |         SAVE_DEFSV;
      |         ^~~~~~~~~~
pp_ctl.c:5964:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5964 |         STRLEN cached_len = got_p + got_len - prune_from;
      |                             ^~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp_sys.o pp_sys.c
In file included from perl.h:7246,
                 from pp_sys.c:31:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
pp_sys.c: In function 'Perl_pp_backtick':
sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
embed.h:621:56: note: in definition of macro 'sv_gets'
  621 | #define sv_gets(a,b,c)          Perl_sv_gets(aTHX_ a,b,c)
      |                                                        ^
pp_sys.c:306:38: note: in expansion of macro 'SvCUR'
  306 |             while (sv_gets(TARG, fp, SvCUR(TARG)) != NULL)
      |                                      ^~~~~
pp_sys.c: In function 'Perl_pp_glob':
embed.h:58:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
pp_sys.c:350:5: note: in expansion of macro 'tryAMAGICunTARGETlist'
  350 |     tryAMAGICunTARGETlist(iter_amg, (PL_op->op_flags & OPf_SPECIAL));
      |     ^~~~~~~~~~~~~~~~~~~~~
In file included from perl.h:3003:
pp_sys.c: In function 'Perl_tied_method':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_sys.c:578:9: note: in expansion of macro 'Copy'
  578 |         Copy(orig_sp - ret_args + 1, sp + 1, ret_args, SV*);
      |         ^~~~
pp_sys.c: In function 'Perl_pp_open':
pp_sys.c:611:31: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-17' [-Wsign-conversion]
  611 |         IoFLAGS(GvIOp(gv)) &= ~IOf_UNTAINT;
      |                               ^
pp_sys.c:623:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  623 |                                     sp - mark);
      |                                     ~~~^~~~~~
pp_sys.c:635:51: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  635 |     ok = do_open6(gv, tmps, len, NULL, MARK+1, (SP-MARK));
      |                                                ~~~^~~~~~
embed.h:1333:63: note: in definition of macro 'do_open6'
 1333 | #define do_open6(a,b,c,d,e,f)   Perl_do_open6(aTHX_ a,b,c,d,e,f)
      |                                                               ^
In file included from perl.h:4114:
pp_sys.c: In function 'Perl_pp_umask':
pp.h:168:26: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
  168 | #define POPi            ((IV)SvIVx(POPs))
iperlsys.h:799:48: note: in definition of macro 'PerlLIO_umask'
  799 | #  define PerlLIO_umask(mode)           umask((mode))
      |                                                ^~~~
pp_sys.c:783:30: note: in expansion of macro 'POPi'
  783 |         anum = PerlLIO_umask(POPi);
      |                              ^~~~
In file included from perl.h:5782:
pp_sys.c:785:12: warning: conversion to 'IV' {aka 'long int'} from 'mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  785 |     XPUSHi(anum);
      |            ^~~~
pp.h:410:23: note: in definition of macro 'TARGi'
  410 |         IV TARGi_iv = i;                                                \
      |                       ^
pp_sys.c:785:5: note: in expansion of macro 'XPUSHi'
  785 |     XPUSHi(anum);
      |     ^~~~~~
In file included from perl.h:4168:
pp_sys.c: In function 'Perl_pp_tie':
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
pp.h:54:12: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   54 | #define SP sp
      |            ^~
pp.h:54:12: note: in definition of macro 'SP'
   54 | #define SP sp
      |            ^~
pp_sys.c: In function 'Perl_pp_untie':
hv.h:382:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
hv.h:382:46: note: in definition of macro 'HvLAZYDEL_off'
  382 | #define HvLAZYDEL_off(hv)       (SvFLAGS(hv) &= ~SVphv_LAZYDEL)
      |                                              ^~
pp_sys.c: In function 'Perl_pp_sselect':
sv.h:1319:23: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
pp_sys.c:1179:13: note: in expansion of macro 'SvCUR'
 1179 |         j = SvCUR(svs[i]);
      |             ^~~~~
sv.h:1238:21: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1238 | #  define SvLEN(sv) (0 + ((XPV*) SvANY(sv))->xpv_len)
      |                     ^
pp_sys.c:1234:13: note: in expansion of macro 'SvLEN'
 1234 |         j = SvLEN(sv);
      |             ^~~~~
pp_sys.c:1236:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1236 |             Sv_Grow(sv, growsize);
      |                         ^~~~~~~~
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
pp_sys.c:1236:13: note: in expansion of macro 'Sv_Grow'
 1236 |             Sv_Grow(sv, growsize);
      |             ^~~~~~~
sv.h:1319:23: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
pp_sys.c:1238:13: note: in expansion of macro 'SvCUR'
 1238 |         j = SvCUR(sv);
      |             ^~~~~
pp_sys.c: In function 'Perl_pp_getc':
pp_sys.c:1392:20: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 1392 |     *SvPVX(TARG) = PerlIO_getc(IoIFP(GvIOp(gv))); /* should never be EOF */
      |                    ^~~~~~~~~~~
embed.h:944:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:944:33: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
pp_sys.c: In function 'Perl_pp_enterwrite':
pp_sys.c:1463:20: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 1463 |     IoFLAGS(io) &= ~IOf_DIDTOP;
      |                    ^
pp_sys.c: In function 'Perl_pp_leavewrite':
pp_sys.c:1519:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1519 |                 s = (char *) memchr(s, '\n', e - s);
      |                                              ~~^~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_sys.c:1526:17: note: in expansion of macro 'SvCUR_set'
 1526 |                 SvCUR_set(PL_formtarget, s - SvPVX_const(PL_formtarget));
      |                 ^~~~~~~~~
pp_sys.c: In function 'Perl_pp_prtf':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
pp_sys.c:1612:17: note: in expansion of macro 'Move'
 1612 |                 Move(MARK, MARK + 1, (SP - MARK) + 1, SV*);
      |                 ^~~~
pp_sys.c:1618:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1618 |                                     sp - mark);
      |                                     ~~~^~~~~~
pp_sys.c: In function 'Perl_pp_sysread':
pp_sys.c:1708:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1708 |                                     sp - mark);
      |                                     ~~~^~~~~~
pp_sys.c:1757:14: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1757 |     wanted = length;
      |              ^~~~~~
pp_sys.c:1778:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1778 |         count = PerlSock_recvfrom(fd, buffer, length, offset,
      |                                               ^~~~~~
iperlsys.h:1404:24: note: in definition of macro 'PerlSock_recvfrom'
 1404 |         recvfrom(s, b, l, f, from, fromlen)
      |                        ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_sys.c:1785:9: note: in expansion of macro 'SvCUR_set'
 1785 |         SvCUR_set(bufsv, count);
      |         ^~~~~~~~~
pp_sys.c:1811:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1811 |         offset += blen;
      |                ^~
pp_sys.c:1811:19: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1811 |         offset += blen;
      |                   ^~~~
pp_sys.c:1816:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1816 |             offset += SvCUR(bufsv) - blen;
      |                    ^~
sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
pp_sys.c:1816:23: note: in expansion of macro 'SvCUR'
 1816 |             offset += SvCUR(bufsv) - blen;
      |                       ^~~~~
pp_sys.c:1833:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1833 |         Zero(buffer+orig_size, offset-orig_size, char);
      |                                      ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pp_sys.c:1833:9: note: in expansion of macro 'Zero'
 1833 |         Zero(buffer+orig_size, offset-orig_size, char);
      |         ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_sys.c:1844:9: note: in expansion of macro 'SvCUR_set'
 1844 |         SvCUR_set(bufsv, offset);
      |         ^~~~~~~~~
iperlsys.h:795:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  795 | #  define PerlLIO_read(fd, buf, count)  read((fd), (buf), (count))
      |                                                           ^~~~~~~
pp_sys.c:1869:25: note: in expansion of macro 'PerlLIO_read'
 1869 |                 count = PerlLIO_read(fd, buffer, length);
      |                         ^~~~~~~~~~~~
pp_sys.c:1874:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1874 |         count = PerlIO_read(IoIFP(io), buffer, length);
      |                                                ^~~~~~
embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_sys.c:1884:5: note: in expansion of macro 'SvCUR_set'
 1884 |     SvCUR_set(read_target, count+(buffer - SvPVX_const(read_target)));
      |     ^~~~~~~~~
pp_sys.c:1897:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1897 |                 length = skip - (bend-buffer);
      |                               ^
pp_sys.c:1897:26: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1897 |                 length = skip - (bend-buffer);
      |                          ^~~~
pp_sys.c:1900:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1900 |                 charskip += count;
      |                          ^~
pp_sys.c:1914:22: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1914 |             length = wanted - got;
      |                      ^~~~~~
pp_sys.c:1919:17: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1919 |         count = got;
      |                 ^~~
pp_sys.c: In function 'Perl_pp_syswrite':
pp_sys.c:1968:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1968 |                                     sp - mark);
      |                                     ~~~^~~~~~
pp_sys.c:2056:24: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2056 |                 offset += blen;
      |                        ^~
pp_sys.c:2056:27: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 2056 |                 offset += blen;
      |                           ^~~~
pp_sys.c:2063:27: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2063 |         if (length > blen - offset)
      |                           ^
pp_sys.c:2064:27: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2064 |             length = blen - offset;
      |                           ^
pp_sys.c: In function 'Perl_pp_eof':
pp_sys.c:2144:32: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
 2144 |                 IoFLAGS(io) &= ~IOf_START;
      |                                ^
pp_sys.c: In function 'Perl_pp_ioctl':
pp_sys.c:2406:50: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 2406 |         retval = fcntl(PerlIO_fileno(IoIFP(io)), func, s);
      |                                                  ^~~~
pp_sys.c: In function 'Perl_pp_ssockopt':
pp_sys.c:2706:37: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 2706 |         if (PerlSock_getsockopt(fd, lvl, optname, SvPVX(sv), &len) < 0)
      |                                     ^~~
iperlsys.h:1398:57: note: in definition of macro 'PerlSock_getsockopt'
 1398 | #  define PerlSock_getsockopt(s,l,n,v,i)  getsockopt(s, l, n, v, i)
      |                                                         ^
pp_sys.c:2706:42: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 2706 |         if (PerlSock_getsockopt(fd, lvl, optname, SvPVX(sv), &len) < 0)
      |                                          ^~~~~~~
iperlsys.h:1398:60: note: in definition of macro 'PerlSock_getsockopt'
 1398 | #  define PerlSock_getsockopt(s,l,n,v,i)  getsockopt(s, l, n, v, i)
      |                                                            ^
pp_sys.c:2731:41: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 2731 |             if (PerlSock_setsockopt(fd, lvl, optname, buf, len) < 0)
      |                                         ^~~
iperlsys.h:1414:23: note: in definition of macro 'PerlSock_setsockopt'
 1414 |         setsockopt(s, l, n, v, len)
      |                       ^
pp_sys.c:2731:46: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 2731 |             if (PerlSock_setsockopt(fd, lvl, optname, buf, len) < 0)
      |                                              ^~~~~~~
iperlsys.h:1414:26: note: in definition of macro 'PerlSock_setsockopt'
 1414 |         setsockopt(s, l, n, v, len)
      |                          ^
pp_sys.c: In function 'Perl_pp_stat':
pp_sys.c:2981:28: warning: conversion to '__ino64_t' {aka 'long long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2981 |                 s.st_ino = (IV)PL_statcache.st_ino;
      |                            ^
pp_sys.c:2990:32: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 2990 |                         *--p = '0' + (int)(t.st_ino*10 - s.st_ino);
      |                                ^~~
pp_sys.c:2996:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2996 |                     mPUSHp(p, buf+sizeof(buf) - p);
pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
pp.h:489:31: note: in expansion of macro 'newSVpvn_flags'
  489 | #define mPUSHp(p,l)     PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
      |                               ^~~~~~~~~~~~~~
pp_sys.c:2996:21: note: in expansion of macro 'mPUSHp'
 2996 |                     mPUSHp(p, buf+sizeof(buf) - p);
      |                     ^~~~~~
pp_sys.c:3008:32: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 3008 |                         *--p = '0' + (int)(s.st_ino - t.st_ino*10);
      |                                ^~~
pp_sys.c:3013:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3013 |                     mPUSHp(p, buf+sizeof(buf) - p);
pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
pp.h:489:31: note: in expansion of macro 'newSVpvn_flags'
  489 | #define mPUSHp(p,l)     PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
      |                               ^~~~~~~~~~~~~~
pp_sys.c:3013:21: note: in expansion of macro 'mPUSHp'
 3013 |                     mPUSHp(p, buf+sizeof(buf) - p);
      |                     ^~~~~~
pp_sys.c: In function 'Perl_pp_fttext':
pp_sys.c:3594:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3594 |     if (! is_utf8_invariant_string_loc((U8 *) s, len, &first_variant)) {
      |                                                  ^~~
pp_sys.c:3599:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3599 |                                           len - ((char *) first_variant - (char *) s),
      |                                           ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
inline.h:2411:57: note: in definition of macro 'is_utf8_fixed_width_buf_flags'
 2411 |                 is_utf8_fixed_width_buf_loclen_flags(s, len, 0, 0, flags)
      |                                                         ^~~
pp_sys.c: In function 'Perl_pp_readlink':
pp.h:474:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  474 | #define PUSHp(p,l)      STMT_START { sv_setpvn(TARG, (p), (l)); PUSHTARG; } STMT_END
      |                                                           ^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
pp_sys.c:3860:5: note: in expansion of macro 'PUSHp'
 3860 |     PUSHp(buf, len);
      |     ^~~~~
pp_sys.c: In function 'Perl_pp_system':
pp_sys.c:4482:23: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4482 |                     n += n1;
      |                       ^~
pp_sys.c: In function 'Perl_pp_getpriority':
pp_sys.c:4671:48: warning: conversion to 'id_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4671 |     SETi( getpriority(PRIORITY_WHICH_T(which), who) );
      |                                                ^~~
pp.h:410:23: note: in definition of macro 'TARGi'
  410 |         IV TARGi_iv = i;                                                \
      |                       ^
pp_sys.c:4671:5: note: in expansion of macro 'SETi'
 4671 |     SETi( getpriority(PRIORITY_WHICH_T(which), who) );
      |     ^~~~
pp_sys.c: In function 'Perl_pp_setpriority':
pp_sys.c:4686:48: warning: conversion to 'id_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4686 |     SETi( setpriority(PRIORITY_WHICH_T(which), who, niceval) >= 0 );
      |                                                ^~~
pp.h:410:23: note: in definition of macro 'TARGi'
  410 |         IV TARGi_iv = i;                                                \
      |                       ^
pp_sys.c:4686:5: note: in expansion of macro 'SETi'
 4686 |     SETi( setpriority(PRIORITY_WHICH_T(which), who, niceval) >= 0 );
      |     ^~~~
pp_sys.c: In function 'Perl_pp_time':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp_sys.c:4703:5: note: in expansion of macro 'XPUSHu'
 4703 |     XPUSHu( (UV)time(NULL) );
      |     ^~~~~~
pp_sys.c: In function 'Perl_pp_alarm':
pp_sys.c:4869:37: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4869 |         unsigned int retval = alarm(anum);
      |                                     ^~~~
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp_sys.c:4872:9: note: in expansion of macro 'PUSHu'
 4872 |         PUSHu(retval);
      |         ^~~~~
pp_sys.c: In function 'Perl_pp_sleep':
pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
pp_sys.c:4903:5: note: in expansion of macro 'XPUSHu'
 4903 |     XPUSHu((UV)(when - lasttime));
      |     ^~~~~~
pp_sys.c: In function 'Perl_pp_ghostent':
pp_sys.c:5068:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5068 |                     sv_setpvn_fresh(sv, hent->h_addr, hent->h_length);
      |                                                       ~~~~^~~~~~~~~~
embed.h:699:64: note: in definition of macro 'sv_setpvn_fresh'
  699 | #define sv_setpvn_fresh(a,b,c)  Perl_sv_setpvn_fresh(aTHX_ a,b,c)
      |                                                                ^
pp_sys.c:5081:15: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 5081 |         len = hent->h_length;
      |               ^~~~
pp_sys.c: In function 'Perl_pp_gservent':
pp_sys.c:5285:53: warning: conversion from 'int' to '__uint16_t' {aka 'short unsigned int'} may change value [-Wconversion]
 5285 |                 sv_setiv(sv, (IV)PerlSock_ntohs(sent->s_port));
      |                                                 ~~~~^~~~~~~~
embed.h:681:55: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                       ^
pp_sys.c:5285:34: note: in expansion of macro 'PerlSock_ntohs'
 5285 |                 sv_setiv(sv, (IV)PerlSock_ntohs(sent->s_port));
      |                                  ^~~~~~~~~~~~~~
pp_sys.c:5296:35: warning: conversion from 'int' to '__uint16_t' {aka 'short unsigned int'} may change value [-Wconversion]
 5296 |         mPUSHi(PerlSock_ntohs(sent->s_port));
      |                               ~~~~^~~~~~~~
embed.h:681:55: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                       ^
pp_sys.c:5296:9: note: in expansion of macro 'mPUSHi'
 5296 |         mPUSHi(PerlSock_ntohs(sent->s_port));
      |         ^~~~~~
pp_sys.c:5296:16: note: in expansion of macro 'PerlSock_ntohs'
 5296 |         mPUSHi(PerlSock_ntohs(sent->s_port));
      |                ^~~~~~~~~~~~~~
pp_sys.c: In function 'Perl_pp_gpwent':
pp.h:168:25: warning: conversion to 'uid_t' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
  168 | #define POPi            ((IV)SvIVx(POPs))
      |                         ^
pp_sys.c:5500:21: note: in expansion of macro 'POPi'
 5500 |         Uid_t uid = POPi;
      |                     ^~~~
pp_sys.c: In function 'Perl_pp_syscall':
sv.h:1821:18: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
pp_sys.c:5750:22: note: in expansion of macro 'SvIV'
 5750 |             a[i++] = SvIV(*MARK);
      |                      ^~~~
pp_sys.c:5764:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5764 |         retval = syscall(a[0]);
      |                          ~^~~
pp_sys.c:5767:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5767 |         retval = syscall(a[0],a[1]);
      |                          ~^~~
pp_sys.c:5770:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5770 |         retval = syscall(a[0],a[1],a[2]);
      |                          ~^~~
pp_sys.c:5773:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5773 |         retval = syscall(a[0],a[1],a[2],a[3]);
      |                          ~^~~
pp_sys.c:5776:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5776 |         retval = syscall(a[0],a[1],a[2],a[3],a[4]);
      |                          ~^~~
pp_sys.c:5779:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5779 |         retval = syscall(a[0],a[1],a[2],a[3],a[4],a[5]);
      |                          ~^~~
pp_sys.c:5782:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5782 |         retval = syscall(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
      |                          ~^~~
pp_sys.c:5785:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5785 |         retval = syscall(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7]);
      |                          ~^~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o regcomp.o regcomp.c
In file included from perl.h:7246,
                 from regcomp.c:132:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
regcomp.c: In function 'S_edit_distance':
regcomp.c:1571:20: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1571 |         IV score = scores[(x+1) * (y + 2) + (y + 1)];
      |                    ^~~~~~
In file included from regcomp.c:140:
regcomp.c: In function 'S_ssc_and':
regcomp.c:2054:47: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2054 |                     ANYOF_POSIXL_SET(&temp, i + add);
      |                                               ^
regcomp.h:677:53: note: in definition of macro 'POSIXL_SET'
  677 | #define POSIXL_SET(field, c)    ((field) |= (1U << (c)))
      |                                                     ^
regcomp.c:2054:21: note: in expansion of macro 'ANYOF_POSIXL_SET'
 2054 |                     ANYOF_POSIXL_SET(&temp, i + add);
      |                     ^~~~~~~~~~~~~~~~
regcomp.c: In function 'S_ssc_clear_locale':
regcomp.c:2245:25: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-7' [-Wsign-conversion]
 2245 |     ANYOF_FLAGS(ssc) &= ~ANYOF_LOCALE_FLAGS;
      |                         ^
regcomp.c: In function 'S_make_trie':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
regcomp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
regcomp.c:3078:25: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3078 |                         TRIE_STORE_REVCHAR( folded );
      |                         ^~~~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
regcomp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
regcomp.c:3083:21: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3083 |                     TRIE_STORE_REVCHAR( uvc );
      |                     ^~~~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
regcomp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
regcomp.c:3111:21: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3111 |                     TRIE_STORE_REVCHAR(uvc);
      |                     ^~~~~~~~~~~~~~~~~~
regcomp.c:3355:28: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3355 |                         tp += ( maxid - minid + 1 );
      |                            ^~
In file included from perl.h:5841:
regcomp.c:3684:57: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3684 |                             tmp = av_fetch( revcharmap, ofs, 0);
      |                                                         ^~~
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
regcomp.c:3711:37: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3711 |                         first_ofs = ofs;
      |                                     ^~~
regcomp.c: In function 'S_join_exact':
embed.h:759:33: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
regcomp.c:4485:27: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4485 |             *min_subtract += total_count_delta;
      |                           ^~
regcomp.c:4548:31: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4548 |                 *min_subtract += len - 1;
      |                               ^~
regcomp.c: In function 'S_rck_elide_nothing':
regcomp.c:4606:19: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4606 |         int off = (reg_off_by_arg[OP(node)] ? ARG(node) : NEXT_OFF(node));
      |                   ^
regcomp.h:263:24: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
regcomp.c:4615:51: note: in expansion of macro 'ARG'
 4615 |                 || ((OP(n) == LONGJMP) && (noff = ARG(n)))
      |                                                   ^~~
regcomp.c:4622:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4622 |             ARG(node) = off;
      |                         ^~~
regcomp.c:4624:30: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 4624 |             NEXT_OFF(node) = off;
      |                              ^~~
regcomp.c: In function 'S_study_chunk':
regcomp.h:304:25: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  304 | #define OP(p)           ((p)->type)
      |                         ^
regcomp.c:4668:18: note: in expansion of macro 'OP'
 4668 |     I32 is_par = OP(scan) == OPEN ? ARG(scan) : 0; /* is this op an OPEN? */
      |                  ^~
regcomp.c:4874:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 4874 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
regcomp.c:4908:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 4908 |                         flags &= ~SCF_DO_STCLASS;
      |                               ^~
regcomp.c:4914:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 4914 |                         flags &= ~SCF_DO_STCLASS;
      |                               ^~
regcomp.c:4921:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 4921 |                         flags &= ~SCF_DO_STCLASS_AND;
      |                               ^~
regcomp.c:5235:51: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 5235 |                                         RExC_seen &=~REG_TOP_LEVEL_BRANCHES_SEEN;
      |                                                   ^~
regcomp.c:5258:60: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 5258 |                                     NEXT_OFF(startbranch)= tail - startbranch;
      |                                                            ^~~~
regcomp.h:263:24: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
regcomp.c:5284:25: note: in expansion of macro 'ARG'
 5284 |                 paren = ARG(scan);
      |                         ^~~
regcomp.c:5357:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5357 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
regcomp.c:5407:31: note: in expansion of macro 'STR_LEN'
 5407 |             SSize_t bytelen = STR_LEN(scan), charlen;
      |                               ^~~~~~~
embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
regcomp.c:5429:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5429 |                 sv_catpvn(data->last_found, STRING(scan), bytelen);
      |                                                           ^~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
regcomp.c:5429:17: note: in expansion of macro 'sv_catpvn'
 5429 |                 sv_catpvn(data->last_found, STRING(scan), bytelen);
      |                 ^~~~~~~~~
regcomp.c:5448:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5448 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
regcomp.c:5456:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5456 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
regcomp.c:5458:19: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5458 |             flags &= ~SCF_DO_STCLASS;
      |                   ^~
regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
regcomp.c:5463:31: note: in expansion of macro 'STR_LEN'
 5463 |             SSize_t bytelen = STR_LEN(scan), charlen;
      |                               ^~~~~~~
regcomp.c:5477:27: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes value from '-33' to '223' [-Wsign-conversion]
 5477 |                 U8 mask = ~ ('A' ^ 'a'); /* These differ in just one bit */
      |                           ^
regcomp.c:5497:28: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                            ^
regcomp.c:5497:17: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                 ^~
regcomp.c:5497:20: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                    ^~~~~~~
regcomp.c:5502:23: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5502 |                 delta += min_subtract;
      |                       ^~
regcomp.c:5502:26: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5502 |                 delta += min_subtract;
      |                          ^~~~~~~~~~~~
regcomp.c:5507:42: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                                          ^
regcomp.c:5507:31: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                               ^~
regcomp.c:5507:34: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                                  ^~~~~~~
regcomp.c:5514:37: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5514 |                     data->pos_delta += min_subtract;
      |                                     ^~
regcomp.c:5514:40: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5514 |                     data->pos_delta += min_subtract;
      |                                        ^~~~~~~~~~~~
regcomp.c:5530:55: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5530 |                     ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                       ^
regcomp.c:5539:55: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5539 |                     ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                       ^
regcomp.c:5541:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5541 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:5597:31: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes value from '-33' to '223' [-Wsign-conversion]
 5597 |                     U8 mask = ~ ('A' ^ 'a');
      |                               ^
regcomp.c:5661:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4097' to '4294963199' [-Wsign-conversion]
 5661 |                     f &= ~SCF_DO_STCLASS_OR;
      |                       ^~
regcomp.c:5673:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
 5673 |                     f &= ~SCF_WHILEM_VISITED_POS;
      |                       ^~
regcomp.c:5680:41: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 5680 |                                    ? (f & ~SCF_DO_SUBSTR)
      |                                         ^
embed.h:1136:87: note: in definition of macro 'study_chunk'
 1136 | #define study_chunk(a,b,c,d,e,f,g,h,i,j,k,l)    S_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
      |                                                                                       ^
regcomp.c:5700:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 5700 |                         flags &= ~SCF_DO_STCLASS_AND;
      |                               ^~
regcomp.c:5713:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5713 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
regcomp.c:5725:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5725 |                     _WARN_HELPER(RExC_precomp_end, packWARN(WARN_REGEXP),
      |                     ^~~~~~~~~~~~
regcomp.c:5753:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 5753 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
regcomp.c:5918:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5918 |                         l -= old;
      |                           ^~
regcomp.c:5927:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                                            ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
regcomp.c:5927:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                                            ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
regcomp.c:5927:33: note: in expansion of macro 'SvGROW'
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                 ^~~~~~
regcomp.c:5929:66: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5929 |                                           SvPVX_const(last_str), l,
      |                                                                  ^
regcomp.c:5931:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5931 |                                 SvCUR_set(last_str, SvCUR(last_str) * mincount);
      |                                                                     ^
sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
regcomp.c:5942:65: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                                 ^
regcomp.c:5942:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                    ^~
regcomp.c:5942:55: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                       ^~~~~~~~~
regcomp.c:5944:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5944 |                                 last_chrs *= mincount;
      |                                           ^~
regcomp.c:5945:53: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                     ^
regcomp.c:5945:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                ^~
regcomp.c:5945:51: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                   ^
regcomp.c:5991:66: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5991 |                             data->last_start_min = data->pos_min - last_chrs;
      |                                                                  ^
regcomp.c:5991:52: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5991 |                             data->last_start_min = data->pos_min - last_chrs;
      |                                                    ^~~~
regcomp.c:5994:67: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5994 |                                 : data->pos_min + data->pos_delta - last_chrs;
      |                                                                   ^
regcomp.c:5992:52: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5992 |                             data->last_start_max = is_inf
      |                                                    ^~~~~~
regcomp.c:6027:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6027 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:6038:52: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6038 |                                                 &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                    ^
regcomp.c:6049:52: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6049 |                                                 &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                    ^
regcomp.c:6051:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6051 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:6079:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6079 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
regcomp.c:639:43: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  639 | #define classnum_to_namedclass(classnum)  ((classnum) * 2)
      |                                           ^
regcomp.c:6178:34: note: in expansion of macro 'classnum_to_namedclass'
 6178 |                     namedclass = classnum_to_namedclass(FLAGS(scan)) + invert;
      |                                  ^~~~~~~~~~~~~~~~~~~~~~
regcomp.c:6253:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6253 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:6335:42: warning: conversion from 'ssize_t' {aka 'int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 6335 |                         scan->next_off = deltanext;
      |                                          ^~~~~~~~~
regcomp.c:6344:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6344 |                             ckWARNexperimental_with_arg(RExC_parse,
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:6350:35: warning: conversion from 'ssize_t' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 6350 |                     scan->flags = (U8)minnext + deltanext;
      |                                   ^
regcomp.h:263:24: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
regcomp.c:6506:40: note: in expansion of macro 'ARG'
 6506 |                 *(data->last_closep) = ARG(scan);
      |                                        ^~~
regcomp.c:6517:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6517 |                 flags &= ~SCF_DO_SUBSTR;
      |                       ^~
regcomp.c:6521:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6521 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:6535:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6535 |                 flags &= ~SCF_DO_SUBSTR;
      |                       ^~
regcomp.c:6547:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6547 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
regcomp.c:6556:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6556 |                     RExC_rx->gofs = min;
      |                                     ^~~
regcomp.c:6582:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6582 |                 min1= trie->minlen;
      |                       ^~~~
regcomp.c:6583:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6583 |                 max1= trie->maxlen;
      |                       ^~~~
regcomp.c:6631:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6631 |                     if (min1 > (SSize_t)(minnext + trie->minlen))
      |                                                  ^
regcomp.c:6632:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6632 |                         min1 = minnext + trie->minlen;
      |                                        ^
regcomp.c:6632:32: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6632 |                         min1 = minnext + trie->minlen;
      |                                ^~~~~~~
regcomp.c:6636:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6636 |                     } else if (max1 < (SSize_t)(minnext + deltanext + trie->maxlen))
      |                                                                     ^
regcomp.c:6637:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6637 |                         max1 = minnext + deltanext + trie->maxlen;
      |                                                    ^
regcomp.c:6637:32: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6637 |                         max1 = minnext + deltanext + trie->maxlen;
      |                                ^~~~~~~
regcomp.c:6644:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6644 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
regcomp.c:6675:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6675 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
regcomp.c:6681:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6681 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
regcomp.c:6688:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 6688 |                     flags &= ~SCF_DO_STCLASS_AND;
      |                           ^~
In file included from perl.h:3003:
regcomp.c: In function 'S_alloc_code_blocks':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:7011:9: note: in expansion of macro 'Newx'
 7011 |         Newx(cbs->cb, ncode, struct reg_code_block);
      |         ^~~~
regcomp.c: In function 'S_pat_upgrade_to_utf8':
regcomp.c:7049:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7049 |                 pRExC_state->code_blocks->cb[n].start = d - dst - 1;
      |                                                         ^
regcomp.c:7054:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7054 |                 pRExC_state->code_blocks->cb[n].end = d - dst - 1;
      |                                                       ^
regcomp.c:7063:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7063 |     *plen_p = d - dst;
      |               ^
regcomp.c: In function 'S_concat_pat':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:7139:17: note: in expansion of macro 'Newx'
 7139 |                 Newx(array, maxarg, SV*);
      |                 ^~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:7277:21: note: in expansion of macro 'Renew'
 7277 |                     Renew(pRExC_state->code_blocks->cb,
      |                     ^~~~~
regcomp.c: In function 'S_compile_runtime_code':
regcomp.c:7390:22: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7390 |         int newlen = plen + 7; /* allow for "qr''xx\0" extra chars */
      |                      ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:7400:9: note: in expansion of macro 'Newx'
 7400 |         Newx(newpat, newlen, char);
      |         ^~~~
regcomp.c:7451:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7451 |         sv = newSVpvn_flags(newpat, p-newpat-1, RExC_utf8 ? SVf_UTF8 : 0);
      |                                     ~~~~~~~~^~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:7516:9: note: in expansion of macro 'Newx'
 7516 |         Newx(new_block, r1c + r2c, struct reg_code_block);
      |         ^~~~
regcomp.c: In function 'S_setup_longest':
regcomp.c:7603:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7603 |         - longest_length
      |         ^
regcomp.c:7608:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7608 |         + sub->lookbehind;
      |         ^
regcomp.c:7602:22: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7602 |     rsd->end_shift = ml - sub->min_offset
      |                      ^~
regcomp.c: In function 'S_set_regex_pv':
regcomp.c:285:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  285 | #define RExC_precomp_end (pRExC_state->precomp_end)
      |                          ^
regcomp.c:7638:22: note: in expansion of macro 'RExC_precomp_end'
 7638 |     STRLEN pat_len = RExC_precomp_end - RExC_precomp;
      |                      ^~~~~~~~~~~~~~~~
regcomp.c:7693:27: warning: conversion from 'int' to 'unsigned char:4' may change value [-Wconversion]
 7693 |     RExC_rx->pre_prefix = p - RX_WRAPPED(Rx);
      |                           ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
regcomp.c:7703:5: note: in expansion of macro 'SvCUR_set'
 7703 |     SvCUR_set(Rx, p - RX_WRAPPED(Rx));
      |     ^~~~~~~~~
regcomp.c: In function 'Perl_re_op_compile':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:7842:9: note: in expansion of macro 'Newx'
 7842 |         Newx(new_patternp, n, SV*);
      |         ^~~~
regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
regcomp.c:8065:21: note: in expansion of macro 'STR_SZ'
 8065 |         RExC_size = STR_SZ(RExC_end - RExC_start);
      |                     ^~~~~~
regcomp.h:340:25: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
regcomp.c:8065:21: note: in expansion of macro 'STR_SZ'
 8065 |         RExC_size = STR_SZ(RExC_end - RExC_start);
      |                     ^~~~~~
regcomp.c:8068:45: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8068 |     Newxc(RExC_rxi, sizeof(regexp_internal) + RExC_size, char, regexp_internal);
      |                                             ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:8068:5: note: in expansion of macro 'Newxc'
 8068 |     Newxc(RExC_rxi, sizeof(regexp_internal) + RExC_size, char, regexp_internal);
      |     ^~~~~
regcomp.c:8072:44: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8072 |     Zero(RExC_rxi, sizeof(regexp_internal) + RExC_size, char);
      |                                            ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:8072:5: note: in expansion of macro 'Zero'
 8072 |     Zero(RExC_rxi, sizeof(regexp_internal) + RExC_size, char);
      |     ^~~~
regcomp.c:8083:30: warning: conversion from 'U32' {aka 'unsigned int'} to 'short unsigned int:9' may change value [-Wconversion]
 8083 |     RXp_COMPFLAGS(RExC_rx) = orig_rx_flags & RXf_PMf_FLAGCOPYMASK;
      |                              ^~~~~~~~~~~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:8164:13: note: in expansion of macro 'Renew'
 8164 |             Renew(RExC_open_parens, RExC_total_parens, regnode_offset);
      |             ^~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:8165:13: note: in expansion of macro 'Zero'
 8165 |             Zero(RExC_open_parens, RExC_total_parens, regnode_offset);
      |             ^~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:8168:13: note: in expansion of macro 'Renew'
 8168 |             Renew(RExC_close_parens, RExC_total_parens, regnode_offset);
      |             ^~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:8169:13: note: in expansion of macro 'Zero'
 8169 |             Zero(RExC_close_parens, RExC_total_parens, regnode_offset);
      |             ^~~~
regcomp.c:304:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  304 | #define RExC_total_parens       (pRExC_state->total_par)
      |                                 ^
regcomp.c:8197:24: note: in expansion of macro 'RExC_total_parens'
 8197 |     RExC_rx->nparens = RExC_total_parens - 1;
      |                        ^~~~~~~~~~~~~~~~~
regcomp.c:301:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  301 | #define RExC_size       (pRExC_state->size)
      |                         ^
regcomp.c:1240:40: note: in definition of macro 'SetProgLen'
 1240 | #define SetProgLen(ri,x) ri->proglen = x
      |                                        ^
regcomp.c:8210:25: note: in expansion of macro 'RExC_size'
 8210 |     SetProgLen(RExC_rxi,RExC_size);
      |                         ^~~~~~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:8230:9: note: in expansion of macro 'Newx'
 8230 |         Newx(RExC_recurse, RExC_recurse_count, regnode *);
      |         ^~~~
regcomp.c:8237:42: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8237 |         RExC_study_chunk_recursed_bytes= (RExC_total_parens >> 3) +
      |                                          ^
regcomp.c:8240:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8240 |              RExC_study_chunk_recursed_bytes * RExC_total_parens, U8);
      |                                              ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:8239:9: note: in expansion of macro 'Newx'
 8239 |         Newx(RExC_study_chunk_recursed,
      |         ^~~~
regcomp.c:8252:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8252 |              RExC_study_chunk_recursed_bytes * RExC_total_parens, U8);
      |                                              ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:8251:9: note: in expansion of macro 'Zero'
 8251 |         Zero(RExC_study_chunk_recursed,
      |         ^~~~
regcomp.c:8269:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 8269 |             RExC_seen &= ~REG_TOP_LEVEL_BRANCHES_SEEN;
      |                       ^~
regcomp.c:8389:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8389 |             RExC_rx->intflags |= (type | PREGf_IMPLICIT);
      |                               ^~
regcomp.c:8454:27: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8454 |                           | (restudied ? SCF_TRIE_DOING_RESTUDY : 0),
      |                           ^
embed.h:1136:87: note: in definition of macro 'study_chunk'
 1136 | #define study_chunk(a,b,c,d,e,f,g,h,i,j,k,l)    S_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
      |                                                                                       ^
regcomp.c:8529:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 8529 |             RExC_rx->intflags &= ~PREGf_SKIP;   /* Used in find_byclass(). */
      |                               ^~
regcomp.c:8541:38: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 8541 |         RExC_rx->substrs->check_ix = i;
      |                                      ^
regcomp.c:8613:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 8613 |             RExC_rx->intflags &= ~PREGf_SKIP;   /* Used in find_byclass(). */
      |                               ^~
regcomp.c:304:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  304 | #define RExC_total_parens       (pRExC_state->total_par)
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:8741:5: note: in expansion of macro 'Newxz'
 8741 |     Newxz(RExC_rx->offs, RExC_total_parens, regexp_paren_pair);
      |     ^~~~~
regcomp.c:8741:26: note: in expansion of macro 'RExC_total_parens'
 8741 |     Newxz(RExC_rx->offs, RExC_total_parens, regexp_paren_pair);
      |                          ^~~~~~~~~~~~~~~~~
regcomp.c: In function 'Perl_reg_named_buff_firstkey':
regcomp.c:8892:58: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 8892 |         return CALLREG_NAMED_BUFF_NEXTKEY(r, NULL, flags & ~RXapif_FIRSTKEY);
      |                                                          ^
perl.h:280:61: note: in definition of macro 'CALLREG_NAMED_BUFF_NEXTKEY'
  280 |     RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), (lastkey), ((flags) | RXapif_NEXTKEY))
      |                                                             ^~~~~
regcomp.c: In function 'Perl_reg_named_buff_scalar':
hv.h:352:54: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  352 | #define HvTOTALKEYS(hv)         (((XPVHV*) SvANY(hv))->xhv_keys)
      |                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
embed.h:393:52: note: in definition of macro 'newSViv'
  393 | #define newSViv(a)              Perl_newSViv(aTHX_ a)
      |                                                    ^
regcomp.c:8943:28: note: in expansion of macro 'HvTOTALKEYS'
 8943 |             return newSViv(HvTOTALKEYS(RXp_PAREN_NAMES(rx)));
      |                            ^~~~~~~~~~~
embed.h:58:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
regcomp.c: In function 'Perl_reg_numbered_buff_fetch':
regcomp.c:9066:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9066 |         sv_setpvn(sv, s, i);
      |                          ^
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
regcomp.c: In function 'Perl_reg_numbered_buff_length':
regcomp.c:9188:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9188 |         if (is_utf8_string_loclen((U8*)s, i, &ep, &el))
      |                                           ^
regcomp.c:9189:17: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 9189 |             i = el;
      |                 ^~
regcomp.c: In function 'S_reg_scan_name':
regcomp.c:9244:42: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9244 |     sv_name = newSVpvn_flags(name_start, (int)(RExC_parse - name_start),
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
regcomp.c: In function 'Perl__new_invlist':
regcomp.c:9574:39: warning: conversion to 'size_t' {aka 'const unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 9574 |     initialize_invlist_guts(new_list, initial_size);
      |                                       ^~~~~~~~~~~~
embed.h:1569:75: note: in definition of macro 'initialize_invlist_guts'
 1569 | #define initialize_invlist_guts(a,b)    S_initialize_invlist_guts(aTHX_ a,b)
      |                                                                           ^
regcomp.c: In function 'Perl__invlist_search':
embed.h:1185:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1185 | #define _invlist_len            S__invlist_len
      |                                 ^~~~~~~~~~~~~~
embed.h:1185:33: note: in definition of macro '_invlist_len'
 1185 | #define _invlist_len            S__invlist_len
      |                                 ^~~~~~~~~~~~~~
regcomp.c: In function 'Perl__invlist_union_maybe_complement_2nd':
regcomp.c:9967:28: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 9967 |     u = _new_invlist(len_a + len_b);
      |                      ~~~~~~^~~~~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
regcomp.c:10057:25: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10057 |         IV copy_count = len_a - i_a;
      |                         ^~~~~
handy.h:2791:133: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:10059:13: note: in expansion of macro 'Copy'
10059 |             Copy(array_a + i_a, array_u + i_u, copy_count, UV);
      |             ^~~~
regcomp.c:10062:26: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10062 |             copy_count = len_b - i_b;
      |                          ^~~~~
handy.h:2791:133: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:10063:13: note: in expansion of macro 'Copy'
10063 |             Copy(array_b + i_b, array_u + i_u, copy_count, UV);
      |             ^~~~
regcomp.c:10065:21: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10065 |         len_u = i_u + copy_count;
      |                     ^
regcomp.c: In function 'Perl__invlist_intersection_maybe_complement_2nd':
regcomp.c:10200:27: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10200 |     r= _new_invlist(len_a + len_b);
      |                     ~~~~~~^~~~~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
regcomp.c:10291:25: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10291 |         IV copy_count = len_a - i_a;
      |                         ^~~~~
handy.h:2791:133: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:10293:13: note: in expansion of macro 'Copy'
10293 |             Copy(array_a + i_a, array_r + i_r, copy_count, UV);
      |             ^~~~
regcomp.c:10296:26: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10296 |             copy_count = len_b - i_b;
      |                          ^~~~~
handy.h:2791:133: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:10297:13: note: in expansion of macro 'Copy'
10297 |             Copy(array_b + i_b, array_r + i_r, copy_count, UV);
      |             ^~~~
regcomp.c:10299:21: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10299 |         len_r = i_r + copy_count;
      |                     ^
regcomp.c: In function 'Perl__add_range_to_invlist':
regcomp.c:10393:19: warning: conversion to 'ssize_t' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10393 |             i_e = len;
      |                   ^~~
regcomp.c:10396:19: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
10396 |             i_e = len - 2;
      |                   ^~~
regcomp.c:10491:60: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10491 |                     Move(array + i_s + 2, array + i_s, len - i_s - 2, UV);
      |                                                            ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
handy.h:2668:16: note: in expansion of macro 'UNLIKELY'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                ^~~~~~~~
handy.h:2668:25: note: in expansion of macro '_MEM_WRAP_WILL_WRAP'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                         ^~~~~~~~~~~~~~~~~~~
handy.h:2680:30: note: in expansion of macro 'MEM_WRAP_CHECK'
 2680 | #define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),
      |                              ^~~~~~~~~~~~~~
handy.h:2790:26: note: in expansion of macro 'MEM_WRAP_CHECK_'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                          ^~~~~~~~~~~~~~~
regcomp.c:10491:21: note: in expansion of macro 'Move'
10491 |                     Move(array + i_s + 2, array + i_s, len - i_s - 2, UV);
      |                     ^~~~
regcomp.c:10491:60: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10491 |                     Move(array + i_s + 2, array + i_s, len - i_s - 2, UV);
      |                                                            ^
handy.h:2790:131: note: in definition of macro 'Move'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                   ^
regcomp.c:10530:38: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10530 |         invlist_set_len(invlist, i_s + 1, *(get_invlist_offset_addr(invlist)));
      |                                  ~~~~^~~
embed.h:1145:59: note: in definition of macro 'invlist_set_len'
 1145 | #define invlist_set_len(a,b,c)  S_invlist_set_len(aTHX_ a,b,c)
      |                                                           ^
regcomp.c:10570:52: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10570 |         Move(array + i_e + 1, array + i_e + 3, len - i_e - 1, UV);
      |                                                    ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
handy.h:2668:16: note: in expansion of macro 'UNLIKELY'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                ^~~~~~~~
handy.h:2668:25: note: in expansion of macro '_MEM_WRAP_WILL_WRAP'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                         ^~~~~~~~~~~~~~~~~~~
handy.h:2680:30: note: in expansion of macro 'MEM_WRAP_CHECK'
 2680 | #define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),
      |                              ^~~~~~~~~~~~~~
handy.h:2790:26: note: in expansion of macro 'MEM_WRAP_CHECK_'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                          ^~~~~~~~~~~~~~~
regcomp.c:10570:9: note: in expansion of macro 'Move'
10570 |         Move(array + i_e + 1, array + i_e + 3, len - i_e - 1, UV);
      |         ^~~~
regcomp.c:10570:52: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10570 |         Move(array + i_e + 1, array + i_e + 3, len - i_e - 1, UV);
      |                                                    ^
handy.h:2790:131: note: in definition of macro 'Move'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                   ^
regcomp.c:10583:48: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10583 |     Move(array + i_e + 1, array + i_s + 1, len - i_e - 1, UV);
      |                                                ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
handy.h:2668:16: note: in expansion of macro 'UNLIKELY'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                ^~~~~~~~
handy.h:2668:25: note: in expansion of macro '_MEM_WRAP_WILL_WRAP'
 2668 |         (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) \
      |                         ^~~~~~~~~~~~~~~~~~~
handy.h:2680:30: note: in expansion of macro 'MEM_WRAP_CHECK'
 2680 | #define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),
      |                              ^~~~~~~~~~~~~~
handy.h:2790:26: note: in expansion of macro 'MEM_WRAP_CHECK_'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                          ^~~~~~~~~~~~~~~
regcomp.c:10583:5: note: in expansion of macro 'Move'
10583 |     Move(array + i_e + 1, array + i_s + 1, len - i_e - 1, UV);
      |     ^~~~
regcomp.c:10583:48: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10583 |     Move(array + i_e + 1, array + i_s + 1, len - i_e - 1, UV);
      |                                                ^
handy.h:2790:131: note: in definition of macro 'Move'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                   ^
regcomp.c:10585:25: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10585 |                     len - i_e + i_s,
      |                         ^
embed.h:1145:59: note: in definition of macro 'invlist_set_len'
 1145 | #define invlist_set_len(a,b,c)  S_invlist_set_len(aTHX_ a,b,c)
      |                                                           ^
regcomp.c:10585:31: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10585 |                     len - i_e + i_s,
      |                               ^
embed.h:1145:59: note: in definition of macro 'invlist_set_len'
 1145 | #define invlist_set_len(a,b,c)  S_invlist_set_len(aTHX_ a,b,c)
      |                                                           ^
regcomp.c: In function 'Perl__setup_canned_invlist':
regcomp.c:10607:32: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
10607 |     SV* invlist = _new_invlist(size);
      |                                ^~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
regcomp.c: In function 'Perl_invlist_clone':
regcomp.c:10656:36: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
10656 |         new_invlist = _new_invlist(nominal_length);
      |                                    ^~~~~~~~~~~~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
regcomp.c: In function 'S_make_exactf_invlist':
regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
regcomp.c:10875:23: note: in expansion of macro 'STR_LEN'
10875 |     SSize_t bytelen = STR_LEN(node);
      |                       ^~~~~~~
regcomp.c:10931:14: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10931 |         fc = uc = utf8_to_uvchr_buf(s, s + bytelen, NULL);
      |              ^~
regcomp.c:10956:30: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10956 |                         fc = fold;
      |                              ^~~~
regcomp.c:10987:50: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10987 |             invlist = add_cp_to_invlist(invlist, fc);
      |                                                  ^~
embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
regcomp.c:10991:42: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10991 |             folds_count = _inverse_folds(fc, &first_fold,
      |                                          ^~
embed.h:963:59: note: in definition of macro '_inverse_folds'
  963 | #define _inverse_folds(a,b,c)   Perl__inverse_folds(aTHX_ a,b,c)
      |                                                           ^
regcomp.c: In function 'S_parse_lparen_question_flags':
regcomp.c:11198:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11198 |                         vWARN5(
      |                         ^~~~~~
regcomp.c:11218:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11218 |                         vWARN3(
      |                         ^~~~~~
regcomp.c:11232:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11232 |                     ckWARNreg(RExC_parse + 1,"Useless use of (?-p)");
      |                     ^~~~~~~~~
regcomp.c: In function 'S_reg':
regcomp.c:291:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  291 | #define RExC_parse      (pRExC_state->parse)
      |                         ^
regcomp.c:11628:24: note: in expansion of macro 'RExC_parse'
11628 |             verb_len = RExC_parse - start_verb;
      |                        ^~~~~~~~~~
regcomp.c:11888:58: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11888 |                 SV *sv = newSVpvn( start_arg, RExC_parse - start_arg);
      |                                                          ^
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
regcomp.c:12212:54: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12212 |                 ret = reg2Lanode(pRExC_state, GOSUB, num, RExC_recurse_count);
      |                                                      ^~~
embed.h:1104:56: note: in definition of macro 'reg2Lanode'
 1104 | #define reg2Lanode(a,b,c,d)     S_reg2Lanode(aTHX_ a,b,c,d)
      |                                                        ^
regcomp.c:12410:57: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12410 |                     ret = reganode(pRExC_state, INSUBP, parno);
      |                                                         ^~~~~
embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
regcomp.c:12427:57: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12427 |                     ret = reganode(pRExC_state, GROUPP, parno);
      |                                                         ^~~~~
embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
regcomp.c:12524:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12524 |                     ckWARNreg(RExC_parse, "Empty (?) without any modifiers");
      |                     ^~~~~~~~~
regcomp.c:305:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  305 | #define RExC_parens_buf_size    (pRExC_state->parens_buf_size)
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:12562:21: note: in expansion of macro 'Newxz'
12562 |                     Newxz(RExC_open_parens, RExC_parens_buf_size,
      |                     ^~~~~
regcomp.c:12562:45: note: in expansion of macro 'RExC_parens_buf_size'
12562 |                     Newxz(RExC_open_parens, RExC_parens_buf_size,
      |                                             ^~~~~~~~~~~~~~~~~~~~
regcomp.c:305:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  305 | #define RExC_parens_buf_size    (pRExC_state->parens_buf_size)
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:12570:21: note: in expansion of macro 'Newxz'
12570 |                     Newxz(RExC_close_parens, RExC_parens_buf_size,
      |                     ^~~~~
regcomp.c:12570:46: note: in expansion of macro 'RExC_parens_buf_size'
12570 |                     Newxz(RExC_close_parens, RExC_parens_buf_size,
      |                                              ^~~~~~~~~~~~~~~~~~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:12581:21: note: in expansion of macro 'Renew'
12581 |                     Renew(RExC_open_parens, RExC_parens_buf_size,
      |                     ^~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:12583:21: note: in expansion of macro 'Zero'
12583 |                     Zero(RExC_open_parens + old_size,
      |                     ^~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:12586:21: note: in expansion of macro 'Renew'
12586 |                     Renew(RExC_close_parens, RExC_parens_buf_size,
      |                     ^~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:12588:21: note: in expansion of macro 'Zero'
12588 |                     Zero(RExC_close_parens + old_size,
      |                     ^~~~
regcomp.c:12593:47: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12593 |             ret = reganode(pRExC_state, OPEN, parno);
      |                                               ^~~~~
embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
regcomp.c:12687:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12687 |             ender = reganode(pRExC_state, CLOSE, parno);
      |                                                  ^~~~~
embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
regcomp.c:1236:30: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 1236 | #define REGNODE_p(offset)    (RExC_emit_start + (offset))
      |                              ^
regcomp.c:12809:35: note: in expansion of macro 'REGNODE_p'
12809 |                     NEXT_OFF(br)= REGNODE_p(ender) - br;
      |                                   ^~~~~~~~~
regcomp.c:12830:37: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
12830 |             FLAGS(REGNODE_p(ret)) = flag;
      |                                     ^~~~
regcomp.c: In function 'S_regpiece':
embed.h:1082:41: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
embed.h:1082:41: note: in definition of macro 'get_quantifier_value'
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
embed.h:1082:41: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
embed.h:1082:41: note: in definition of macro 'get_quantifier_value'
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
regcomp.c:13204:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13204 |                 ckWARNreg(RExC_parse, "Quantifier {n,m} with n > m can't match");
      |                 ^~~~~~~~~
regcomp.c:13210:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13210 |                 ckWARN2reg(RExC_parse + 1,
      |                 ^~~~~~~~~~
regcomp.c:13241:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13241 |                 ckWARN2reg(RExC_parse,
      |                 ^~~~~~~~~~
regcomp.c: In function 'S_grok_bslash_N':
regcomp.c:13523:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13523 |     endbrace = (char *) memchr(RExC_parse, '}', RExC_end - RExC_parse);
      |                                                          ^
regcomp.c:13568:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13568 |         const STRLEN name_len = e - RExC_parse;
      |                                 ^
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
regcomp.c:13586:26: note: in expansion of macro 'hv_fetch'
13586 |         if ((value_svp = hv_fetch(RExC_unlexed_names, RExC_parse,
      |                          ^~~~~~~~
hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
regcomp.c:13605:19: note: in expansion of macro 'hv_store'
13605 |             if (! hv_store(RExC_unlexed_names, RExC_parse, name_len,
      |                   ^~~~~~~~
regcomp.c:13644:25: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13644 |             *cp_count = (SvUTF8(value_sv))
      |                         ^
regcomp.c:13692:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13692 |             STRLEN len = e - RExC_parse;
      |                          ^
regcomp.c:13767:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13767 |                                             RExC_parse - start_digit);
      |                                                        ^
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
regcomp.c:13766:17: note: in expansion of macro 'sv_catpvn'
13766 |                 sv_catpvn(substitute_parse, start_digit,
      |                 ^~~~~~~~~
regcomp.c:13781:25: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13781 |             *cp_count = count;
      |                         ^~~~~
In file included from regcomp.h:766:
regcomp.c: In function 'S_regatom':
regnodes.h:111:39: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  111 | #define BOUND                         8        /* 0x08 Like BOUNDA for
      |                                       ^
regcomp.c:14141:18: note: in expansion of macro 'BOUND'
14141 |             op = BOUND + charset;
      |                  ^~~~~
regcomp.c:14153:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14153 |                                                    RExC_end - RExC_parse);
      |                                                             ^
regcomp.c:14175:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14175 |                 length = e - RExC_parse;
      |                          ^
regcomp.c:14224:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14224 |                     ckWARN4reg(RExC_parse + 1,  /* Include the '}' in msg */
      |                     ^~~~~~~~~~
regcomp.c:14380:69: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14380 |                         endbrace = (char *) memchr(s, '}', RExC_end - s);
      |                                                                     ^
regcomp.c:14513:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
14513 |                                 num);
      |                                 ^~~
embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
regcomp.c:14589:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14589 |                                                  + ((! FOLD)
      |                                                  ^
regcomp.h:340:28: note: in definition of macro 'STR_SZ'
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                            ^
regcomp.h:340:25: warning: conversion to 'ptrdiff_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
regcomp.c:14588:46: note: in expansion of macro 'STR_SZ'
14588 |             Ptrdiff_t current_string_nodes = STR_SZ(max_string_len
      |                                              ^~~~~~
regcomp.c:14631:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
14631 |             ret = REGNODE_GUTS(pRExC_state, node_type, current_string_nodes);
      |                                                        ^~~~~~~~~~~~~~~~~~~~
embed.h:1116:56: note: in definition of macro 'regnode_guts'
 1116 | #define regnode_guts(a,b)       S_regnode_guts(aTHX_ a,b)
      |                                                        ^
regcomp.c:14631:19: note: in expansion of macro 'REGNODE_GUTS'
14631 |             ret = REGNODE_GUTS(pRExC_state, node_type, current_string_nodes);
      |                   ^~~~~~~~~~~~
regcomp.c:14825:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14825 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:14844:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14844 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:14872:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14872 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:14919:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14919 |                                 reg_warn_non_literal_string(
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:14936:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14936 |                                 ckWARN2reg(p + 1, "Unrecognized escape \\%.1s"
      |                                 ^~~~~~~~~~
regcomp.c:14969:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14969 |                         ckWARNreg(p + 1, "Unescaped left brace in regex is"
      |                         ^~~~~~~~~
regcomp.c:14976:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14976 |                         ckWARN2reg(p + 1, "Unescaped literal '%c'", *p);
      |                         ^~~~~~~~~~
regcomp.c:14983:65: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14983 |                         ender = utf8n_to_uvchr((U8*)p, RExC_end - p,
      |                                                                 ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regcomp.c:14983:33: note: in expansion of macro 'utf8n_to_uvchr'
14983 |                         ender = utf8n_to_uvchr((U8*)p, RExC_end - p,
      |                                 ^~~~~~~~~~~~~~
regcomp.c:15001:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15001 |                         ckWARN2_non_literal_string(p,
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:15050:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15050 |                         added_len = (char *) new_s - s;
      |                                     ^
handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
regcomp.c:15218:37: note: in expansion of macro 'UNLIKELY'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~
regcomp.c:15218:46: note: in expansion of macro 'isALPHA_FOLD_EQ'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                              ^~~~~~~~~~~~~~~
regcomp.c:15303:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15303 |                     RExC_emit += overhead_expansion;
      |                               ^~
regcomp.c:15303:34: warning: conversion to 'regnode_offset' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15303 |                     RExC_emit += overhead_expansion;
      |                                  ^~~~~~~~~~~~~~~~~~
In file included from perl.h:1115:
regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
regcomp.c:15316:57: note: in expansion of macro 'STR_SZ'
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                         ^~~~~~
regcomp.c:15316:55: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                       ^
regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
regcomp.c:15316:57: note: in expansion of macro 'STR_SZ'
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                         ^~~~~~
regcomp.c:15316:55: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                       ^
regcomp.c:15317:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15317 |                 delta = achievable - current_string_nodes;
      |                                    ^
regcomp.c:15317:25: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15317 |                 delta = achievable - current_string_nodes;
      |                         ^~~~~~~~~~
regcomp.c:15325:55: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15325 |                 change_engine_size(pRExC_state, delta + overhead_expansion);
      |                                                       ^
embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
regcomp.c:15325:55: warning: conversion to 'ptrdiff_t' {aka 'const int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15325 |                 change_engine_size(pRExC_state, delta + overhead_expansion);
      |                                                 ~~~~~~^~~~~~~~~~~~~~~~~~~~
embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
regcomp.c:15328:53: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15328 |                            = sizeof(struct regnode) * current_string_nodes;
      |                                                     ^
regcomp.c:15447:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15447 |                                                         = redo_p - RExC_parse;
      |                                                           ^~~~~~
regcomp.c:15490:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15490 |                                             + (oldp - redo_p)
      |                                             ^
regcomp.c:15741:42: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15741 |                             upper_fill = s - s0;
      |                                          ^
regcomp.c:15750:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15750 |                     len = old_s - s0;
      |                           ^~~~~
regcomp.c:15769:61: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15769 |                         - (Ptrdiff_t) (current_string_nodes - STR_SZ(len)));
      |                                                             ^
embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
regcomp.c:15843:37: note: in expansion of macro 'isALPHA_FOLD_EQ'
15843 |                                  || isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~~~~~~~~
regcomp.h:351:55: warning: conversion from 'STRLEN' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  351 |             ((struct regnode_string *)(p))->str_len = (v);                  \
      |                                                       ^
regcomp.c:15867:17: note: in expansion of macro 'setSTR_LEN'
15867 |                 setSTR_LEN(REGNODE_p(ret), len);
      |                 ^~~~~~~~~~
regcomp.c:15868:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15868 |                 RExC_emit += STR_SZ(len);
      |                           ^~
regcomp.h:340:25: warning: conversion to 'regnode_offset' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
regcomp.c:15868:30: note: in expansion of macro 'STR_SZ'
15868 |                 RExC_emit += STR_SZ(len);
      |                              ^~~~~~
regcomp.c:15882:25: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15882 |                 IV iv = len;
      |                         ^~~
regcomp.c:15901:9: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15901 |         ckWARNreg(RExC_parse + 1, "Unescaped left brace in regex is"
      |         ^~~~~~~~~
regcomp.c: In function 'S_populate_ANYOF_from_invlist':
regcomp.c:15954:22: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
15954 |             for (i = start; i <= (int) high; i++) {
      |                      ^~~~~
regcomp.c: In function 'S_handle_possible_posix':
regcomp.c:16779:58: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
16779 |             CLEAR_POSIX_WARNINGS_AND_RETURN(class_number + complement);
      |                                                          ^
regcomp.c:16017:16: note: in definition of macro 'CLEAR_POSIX_WARNINGS_AND_RETURN'
16017 |         return ret;                                                         \
      |                ^~~
regcomp.c:16779:58: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
16779 |             CLEAR_POSIX_WARNINGS_AND_RETURN(class_number + complement);
      |                                             ~~~~~~~~~~~~~^~~~~~~~~~~~
regcomp.c:16017:16: note: in definition of macro 'CLEAR_POSIX_WARNINGS_AND_RETURN'
16017 |         return ret;                                                         \
      |                ^~~
regcomp.c: In function 'S_add_above_Latin1_folds':
regcomp.c:17638:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17638 |                 ckWARN2reg_d(RExC_parse,
      |                 ^~~~~~~~~~~~
regcomp.c: In function 'S_output_posix_warnings':
regcomp.c:17688:5: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17688 |     UPDATE_WARNINGS_LOC(RExC_parse);
      |     ^~~~~~~~~~~~~~~~~~~
regcomp.c: In function 'S_find_first_differing_byte_pos':
regcomp.c:17703:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17703 |     return s1 - start;
      |            ~~~^~~~~~~
regcomp.c: In function 'S_add_multi_match':
regcomp.c:17740:39: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17740 |     if (av_exists(multi_char_matches, cp_count)) {
      |                                       ^~~~~~~~
embed.h:60:56: note: in definition of macro 'av_exists'
   60 | #define av_exists(a,b)          Perl_av_exists(aTHX_ a,b)
      |                                                        ^
regcomp.c:17741:62: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17741 |         this_array_ptr = (AV**) av_fetch(multi_char_matches, cp_count, FALSE);
      |                                                              ^~~~~~~~
embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
regcomp.c:17746:38: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17746 |         av_store(multi_char_matches, cp_count,
      |                                      ^~~~~~~~
embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
regcomp.c: In function 'S_regclass':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
regcomp.c:17964:13: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17964 |             ckWARN4reg(not_posix_region_end,
      |             ^~~~~~~~~~
regcomp.c:18023:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18023 |                                    RExC_end - RExC_parse,
      |                                             ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regcomp.c:18022:21: note: in expansion of macro 'utf8n_to_uvchr'
18022 |             value = utf8n_to_uvchr((U8*)RExC_parse,
      |                     ^~~~~~~~~~~~~~
regcomp.c:18087:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18087 |                                    RExC_end - RExC_parse,
      |                                             ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regcomp.c:18086:25: note: in expansion of macro 'utf8n_to_uvchr'
18086 |                 value = utf8n_to_uvchr((U8*)RExC_parse,
      |                         ^~~~~~~~~~~~~~
regcomp.c:18144:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18144 |                             ckWARNreg(RExC_parse,
      |                             ^~~~~~~~~
regcomp.c:18159:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18159 |                                     ckWARNreg(RExC_parse, "Using just the first character returned by \\N{} in character class");
      |                                     ^~~~~~~~~
regcomp.c:18166:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18166 |                                                  RExC_parse - backslash_N_beg);
      |                                                             ^
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
regcomp.c:18170:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18170 |                                                           cp_count);
      |                                                           ^~~~~~~~
embed.h:1072:61: note: in definition of macro 'add_multi_match'
 1072 | #define add_multi_match(a,b,c)  S_add_multi_match(aTHX_ a,b,c)
      |                                                             ^
regcomp.c:18208:67: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18208 |                     e = (char *) memchr(RExC_parse, '}', RExC_end - RExC_parse);
      |                                                                   ^
regcomp.c:18238:25: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18238 |                     n = e - RExC_parse;
      |                         ^
regcomp.c:18300:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18300 |                                 ckWARNreg(e + 1,
      |                                 ^~~~~~~~~
regcomp.c:18441:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18441 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18463:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18463 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18483:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18483 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18507:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18507 |                             reg_warn_non_literal_string(
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18526:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18526 |                         ckWARN2reg(RExC_parse,
      |                         ^~~~~~~~~~
regcomp.c:18553:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18553 |                     ckWARN2reg(RExC_parse,
      |                     ^~~~~~~~~~
regcomp.c:638:40: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  638 | #define namedclass_to_classnum(class)  ((int) ((class) / 2))
      |                                        ^
regcomp.c:18565:24: note: in expansion of macro 'namedclass_to_classnum'
18565 |             classnum = namedclass_to_classnum(namedclass);
      |                        ^~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18591:44: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
18591 |                     has_runtime_dependency &= ~HAS_L_RUNTIME_DEPENDENCY;
      |                                            ^~
regcomp.c:18592:36: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
18592 |                     anyof_flags &= ~ANYOF_MATCHES_POSIXL;
      |                                    ^
regcomp.c:18753:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18753 |                                 vWARN4(RExC_parse,
      |                                 ^~~~~~
regcomp.c:18787:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18787 |                 ckWARN2_non_literal_string(RExC_parse,
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
regcomp.c:18864:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18864 |                     vWARN(RExC_parse, "Both or neither range ends should be Unicode");
      |                     ^~~~~
regcomp.c:18881:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18881 |                         vWARN(RExC_parse, "Ranges of ASCII printables should"
      |                         ^~~~~
regcomp.c:18952:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18952 |                                 vWARN(RExC_parse, "Ranges of digits should be"
      |                                 ^~~~~
regcomp.c:18964:45: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
18964 |                     if (isBACKSLASHED_PUNCT(value)) {
      |                                             ^~~~~
handy.h:718:70: note: in definition of macro 'memCHRs'
  718 | #define memCHRs(s1,c) ((const char *) memchr(ASSERT_IS_LITERAL(s1) , c, sizeof(s1)-1))
      |                                                                      ^
regcomp.c:18964:25: note: in expansion of macro 'isBACKSLASHED_PUNCT'
18964 |                     if (isBACKSLASHED_PUNCT(value)) {
      |                         ^~~~~~~~~~~~~~~~~~~
regcomp.c:18970:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18970 |                     vWARN4(RExC_parse,
      |                     ^~~~~~
regcomp.c:18978:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18978 |                     vWARN4(RExC_parse,
      |                     ^~~~~~
regcomp.c:19099:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
19099 |             sv_catpvn(substitute_parse, orig_parse, RExC_parse - orig_parse);
      |                                                                ^
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
regcomp.c:19099:13: note: in expansion of macro 'sv_catpvn'
19099 |             sv_catpvn(substitute_parse, orig_parse, RExC_parse - orig_parse);
      |             ^~~~~~~~~
regcomp.c: In function 'S_optimize_regclass':
embed.h:572:33: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  572 | #define single_1bit_pos32       Perl_single_1bit_pos32
      |                                 ^~~~~~~~~~~~~~~~~~~~~~
embed.h:572:33: note: in definition of macro 'single_1bit_pos32'
  572 | #define single_1bit_pos32       Perl_single_1bit_pos32
      |                                 ^~~~~~~~~~~~~~~~~~~~~~
regcomp.c:638:40: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  638 | #define namedclass_to_classnum(class)  ((int) ((class) / 2))
      |                                        ^
regcomp.c:19749:24: note: in expansion of macro 'namedclass_to_classnum'
19749 |             classnum = namedclass_to_classnum(namedclass);
      |                        ^~~~~~~~~~~~~~~~~~~~~~
regnodes.h:349:38: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  349 | #define POSIXL                       31        /* 0x1f Some [[:class:]] under
      |                                      ^~
regnodes.h:349:38: note: in definition of macro 'POSIXL'
  349 | #define POSIXL                       31        /* 0x1f Some [[:class:]] under
      |                                      ^~
regcomp.c:19895:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
19895 |         else if (  ! (has_runtime_dependency & ~HAS_D_RUNTIME_DEPENDENCY)
      |                                              ^
handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
regcomp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
handy.h:2516:55: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                                                       ^
regcomp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
regcomp.c:19994:47: warning: conversion to 'IV' {aka 'long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
19994 |                 SV * fold_list = _new_invlist(folds_count);
      |                                               ^~~~~~~~~~~
embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
regcomp.c:20121:19: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20121 |             len = (UTF) ? UVCHR_SKIP(value) : 1;
      |                   ^
regcomp.c:20125:23: warning: conversion to 'unsigned int' from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
20125 |             RExC_emit += 1 + STR_SZ(len);
      |                       ^~
regcomp.c:20125:26: warning: conversion to 'regnode_offset' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
20125 |             RExC_emit += 1 + STR_SZ(len);
      |                          ^
regcomp.c:20207:40: warning: conversion from 'long unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20207 |                     bits_differing  |= i ^ lowest_cp;
      |                                        ^
regcomp.c:20363:50: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20363 |                         FLAGS(REGNODE_p(*ret)) = posix_class;
      |                                                  ^~~~~~~~~~~
embed.h:773:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:773:49: note: in definition of macro 'uvoffuni_to_utf8_flags_msgs'
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:75:37: note: in expansion of macro 'uvchr_to_utf8_flags_msgs'
   75 |                                     uvchr_to_utf8_flags_msgs(d,uv,flags, 0)
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:73:37: note: in expansion of macro 'uvchr_to_utf8_flags'
   73 | #define uvchr_to_utf8(a,b)          uvchr_to_utf8_flags(a,b,0)
      |                                     ^~~~~~~~~~~~~~~~~~~
regcomp.c:20434:26: note: in expansion of macro 'uvchr_to_utf8'
20434 |         Size_t low_len = uvchr_to_utf8(low_utf8, MIN(lowest_cp, IV_MAX))
      |                          ^~~~~~~~~~~~~
embed.h:773:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:773:49: note: in definition of macro 'uvoffuni_to_utf8_flags_msgs'
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:75:37: note: in expansion of macro 'uvchr_to_utf8_flags_msgs'
   75 |                                     uvchr_to_utf8_flags_msgs(d,uv,flags, 0)
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:73:37: note: in expansion of macro 'uvchr_to_utf8_flags'
   73 | #define uvchr_to_utf8(a,b)          uvchr_to_utf8_flags(a,b,0)
      |                                     ^~~~~~~~~~~~~~~~~~~
regcomp.c:20451:31: note: in expansion of macro 'uvchr_to_utf8'
20451 |             Size_t high_len = uvchr_to_utf8(high_utf8, highest_cp) - high_utf8;
      |                               ^~~~~~~~~~~~~
regcomp.c:20474:71: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20474 |                                                                     = len;
      |                                                                       ^~~
regcomp.c:20478:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
20478 |                     RExC_emit += NODE_SZ_STR(REGNODE_p(*ret));
      |                               ^~
regcomp.h:344:25: warning: conversion to 'regnode_offset' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  344 | #define NODE_SZ_STR(p)  (STR_SZ(STR_LEN(p)) + 1 + regarglen[(p)->type])
      |                         ^
regcomp.c:20478:34: note: in expansion of macro 'NODE_SZ_STR'
20478 |                     RExC_emit += NODE_SZ_STR(REGNODE_p(*ret));
      |                                  ^~~~~~~~~~~
regcomp.c:20507:32: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20507 |                 *anyof_flags = (*anyof_flags - 0xC0) << 2 | bits;
      |                                ^
regcomp.c: In function 'Perl_get_regclass_nonbitmap_data':
sv.h:1318:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1318 | #    define SvPVX(sv) ((sv)->sv_u.svu_pv)
      |                       ^
regcomp.c:20730:29: note: in expansion of macro 'SvPVX'
20730 |                 remaining = SvPVX(si) + SvCUR(si) - si_string;
      |                             ^~~~~
regcomp.c: In function 'S_change_engine_size':
regcomp.c:20965:54: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
20965 |            sizeof(regexp_internal) + (RExC_size + 1) * sizeof(regnode),
      |                                                      ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regcomp.c:20964:5: note: in expansion of macro 'Renewc'
20964 |     Renewc(RExC_rxi,
      |     ^~~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:20975:9: note: in expansion of macro 'Zero'
20975 |         Zero(REGNODE_p(RExC_emit), size, regnode);
      |         ^~~~
regcomp.c: In function 'S_regnode_guts':
regcomp.c:20993:51: warning: conversion to 'ptrdiff_t' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
20993 |     change_engine_size(pRExC_state, (Ptrdiff_t) 1 + extra_size);
      |                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~
embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
regcomp.c: In function 'S_reginsert':
handy.h:2792:97: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regcomp.c:21159:5: note: in expansion of macro 'Zero'
21159 |     Zero(src, offset, regnode);
      |     ^~~~
regcomp.c: In function 'S_regtail':
regcomp.h:264:36: warning: conversion to 'U32' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  264 | #define ARG__SET(arg,val) ((arg) = (val))
      |                                    ^
regcomp.h:276:25: note: in expansion of macro 'ARG__SET'
  276 | #define ARG_SET(p, val) ARG__SET(ARG_LOC(p), (val))
      |                         ^~~~~~~~
regcomp.c:21206:9: note: in expansion of macro 'ARG_SET'
21206 |         ARG_SET(REGNODE_p(scan), val - scan);
      |         ^~~~~~~
regcomp.c:21216:37: warning: conversion from 'regnode_offset' {aka 'int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
21216 |         NEXT_OFF(REGNODE_p(scan)) = val - scan;
      |                                     ^~~
regcomp.c: In function 'Perl_reg_temp_copy':
regcomp.c:22192:44: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
22192 |             SvFLAGS(temp) = (SvFLAGS(temp) & ~SVTYPEMASK) | SVt_NULL;
      |                                            ^
regcomp.c:22215:26: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22215 |         const I32 npar = srx->nparens+1;
      |                          ^~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22216:9: note: in expansion of macro 'Newx'
22216 |         Newx(drx->offs, npar, regexp_paren_pair);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:22217:9: note: in expansion of macro 'Copy'
22217 |         Copy(srx->offs, drx->offs, npar, regexp_paren_pair);
      |         ^~~~
regcomp.c: In function 'Perl_regfree_internal':
regcomp.c:22287:17: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22287 |         int n = ri->data->count;
      |                 ^~
regcomp.c: In function 'Perl_re_dup_guts':
regcomp.c:22402:12: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22402 |     npar = r->nparens+1;
      |            ^
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22403:5: note: in expansion of macro 'Newx'
22403 |     Newx(ret->offs, npar, regexp_paren_pair);
      |     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:22404:5: note: in expansion of macro 'Copy'
22404 |     Copy(r->offs, ret->offs, npar, regexp_paren_pair);
      |     ^~~~
regcomp.c:22458:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
22458 |         ret->subbeg  = SAVEPVN(ret->subbeg, ret->sublen);
      |                                             ~~~^~~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
regcomp.c:22458:24: note: in expansion of macro 'SAVEPVN'
22458 |         ret->subbeg  = SAVEPVN(ret->subbeg, ret->sublen);
      |                        ^~~~~~~
regcomp.c: In function 'Perl_regdupe_internal':
regcomp.c:22505:19: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22505 |     len = ProgLen(ri);
      |                   ^~
regcomp.c:1239:21: note: in definition of macro 'ProgLen'
 1239 | #define ProgLen(ri) ri->proglen
      |                     ^~
regcomp.c:22507:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
22507 |     Newxc(reti, sizeof(regexp_internal) + len*sizeof(regnode),
      |                                              ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22507:5: note: in expansion of macro 'Newxc'
22507 |     Newxc(reti, sizeof(regexp_internal) + len*sizeof(regnode),
      |     ^~~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:22509:5: note: in expansion of macro 'Copy'
22509 |     Copy(ri->program, reti->program, len+1, regnode);
      |     ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22515:9: note: in expansion of macro 'Newx'
22515 |         Newx(reti->code_blocks->cb, ri->code_blocks->count,
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regcomp.c:22517:9: note: in expansion of macro 'Copy'
22517 |         Copy(ri->code_blocks->cb, reti->code_blocks->cb,
      |         ^~~~
regcomp.c:22532:27: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22532 |         const int count = ri->data->count;
      |                           ^~
regcomp.c:22535:49: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
22535 |         Newxc(d, sizeof(struct reg_data) + count*sizeof(void *),
      |                                                 ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22535:9: note: in expansion of macro 'Newxc'
22535 |         Newxc(d, sizeof(struct reg_data) + count*sizeof(void *),
      |         ^~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regcomp.c:22537:9: note: in expansion of macro 'Newx'
22537 |         Newx(d->what, count, U8);
      |         ^~~~
regcomp.c:22539:20: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
22539 |         d->count = count;
      |                    ^~~~~
regcomp.c:22607:22: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
22607 |     SetProgLen(reti, len);
      |                      ^~~
regcomp.c:1240:40: note: in definition of macro 'SetProgLen'
 1240 | #define SetProgLen(ri,x) ri->proglen = x
      |                                        ^
regcomp.c: In function 'Perl_regnext':
regcomp.c:22632:14: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22632 |     offset = (reg_off_by_arg[OP(p)] ? ARG(p) : NEXT_OFF(p));
      |              ^
regcomp.c: In function 'Perl_save_re_context':
regexp.h:537:43: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  537 | #  define RX_NPARENS(rx_sv)               (RXp_NPARENS(ReANY(rx_sv)))
      |                                           ^
regcomp.c:22682:23: note: in expansion of macro 'RX_NPARENS'
22682 |             nparens = RX_NPARENS(rx);
      |                       ^~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
regcomp.c:22695:28: note: in expansion of macro 'my_snprintf'
22695 |         const STRLEN len = my_snprintf(digits, sizeof(digits),
      |                            ^~~~~~~~~~~
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
regcomp.c:22698:21: note: in expansion of macro 'hv_fetch'
22698 |             = (GV**)hv_fetch(PL_defstash, digits, len, 0);
      |                     ^~~~~~~~
In file included from perl.h:4168:
regcomp.c: In function 'Perl_init_uniprops':
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
regcomp.c: In function 'S_execute_wildcard':
regcomp.c:23745:18: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-513' to '4294966783' [-Wsign-conversion]
23745 |         PL_debug &= ~ DEBUG_r_FLAG;
      |                  ^~
regcomp.c: In function 'S_handle_user_defined_property':
regcomp.c:23948:66: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
23948 |         this_definition = _add_range_to_invlist(this_definition, min, max);
      |                                                                  ^~~
embed.h:1148:76: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                            ^
regcomp.c:23948:71: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
23948 |         this_definition = _add_range_to_invlist(this_definition, min, max);
      |                                                                       ^~~
embed.h:1148:78: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                              ^
regcomp.c:23968:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23968 |         this_definition = parse_uniprop_string(s0, s - s0,
      |                                                    ~~^~~~
embed.h:1100:88: note: in definition of macro 'parse_uniprop_string'
 1100 | #define parse_uniprop_string(a,b,c,d,e,f,g,h,i,j)       S_parse_uniprop_string(aTHX_ a,b,c,d,e,f,g,h,i,j)
      |                                                                                        ^
regcomp.c: In function 'S_delete_recursion_entry':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
regcomp.c:24086:21: note: in expansion of macro 'hv_fetch'
24086 |     current_entry = hv_fetch(PL_user_def_props, (const char *) key, key_len, 0);
      |                     ^~~~~~~~
hv.h:512:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                                                ^~~~~~
handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
hv.h:512:6: note: in expansion of macro 'MUTABLE_SV'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |      ^~~~~~~~~~
hv.h:512:17: note: in expansion of macro 'hv_common_key_len'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                 ^~~~~~~~~~~~~~~~~
regcomp.c:24091:16: note: in expansion of macro 'hv_delete'
24091 |         (void) hv_delete(PL_user_def_props, (const char *) key, key_len,
      |                ^~~~~~~~~
regcomp.c: In function 'S_parse_uniprop_string':
regcomp.c:24266:26: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24266 |             equals_pos = j; /* Note where it occurred in the input */
      |                          ^
regcomp.c:24317:20: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
24317 |         equals_pos -=  STRLENs("utf8::");
      |                    ^~
regcomp.c:24308:23: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24308 | #  define STRLENs(s)  (sizeof("" s "") - 1)
      |                       ^
regcomp.c:24317:24: note: in expansion of macro 'STRLENs'
24317 |         equals_pos -=  STRLENs("utf8::");
      |                        ^~~~~~~
regcomp.c:24351:61: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
24351 |                 table_index = do_uniprop_match(lookup_name, j);
      |                                                             ^
regcomp.c:24550:67: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
24550 |             character_name = newSVpvn(lookup_name + equals_pos, j - equals_pos);
      |                                                                   ^
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
regcomp.c:24779:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24779 |         slash_pos = j;
      |                     ^
sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
regcomp.c:24969:35: note: in expansion of macro 'hv_fetch'
24969 |             saved_user_prop_ptr = hv_fetch(PL_user_def_props,
      |                                   ^~~~~~~~
regcomp.c:24970:64: note: in expansion of macro 'SvCUR'
24970 |                                                    SvPVX(key), SvCUR(key), 0);
      |                                                                ^~~~~
perl.h:2188:33: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2188 | #  define INT2PTR(any,d)        (any)(d)
      |                                 ^~~~~~~~
embed.h:405:52: note: in definition of macro 'newSVuv'
  405 | #define newSVuv(a)              Perl_newSVuv(aTHX_ a)
      |                                                    ^
perl.h:2213:25: note: in expansion of macro 'INT2PTR'
 2213 | #define PTR2IV(p)       INT2PTR(IV,p)
      |                         ^~~~~~~
regcomp.c:25044:34: note: in expansion of macro 'PTR2IV'
25044 |             placeholder= newSVuv(PTR2IV(ORIGINAL_CONTEXT));
      |                                  ^~~~~~
regcomp.c:25189:49: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25189 |     table_index = do_uniprop_match(lookup_name, lookup_len);
      |                                                 ^~~~~~~~~~
regcomp.c:25206:57: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25206 |             table_index = do_uniprop_match(lookup_name, lookup_len);
      |                                                         ^~~~~~~~~~
regcomp.c:25241:48: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25241 |                 SSize_t value_len = lookup_len - equals_pos;
      |                                                ^
regcomp.c:25241:37: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
25241 |                 SSize_t value_len = lookup_len - equals_pos;
      |                                     ^~~~~~~~~~
regcomp.c:25246:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
25246 |                                 value_len)
      |                                 ^~~~~~~~~
embed.h:335:57: note: in definition of macro 'my_atof3'
  335 | #define my_atof3(a,b,c)         Perl_my_atof3(aTHX_ a,b,c)
      |                                                         ^
regcomp.c:25272:55: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
25272 |                         SSize_t excess_exponent_len = strlen(cur_ptr) - 2;
      |                                                       ^~~~~~
regcomp.c:25277:53: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
25277 |                             SSize_t leading_zeros = strspn(cur_ptr, "0");
      |                                                     ^~~~~~
regcomp.c:25283:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
25283 |                                      strlen(cur_ptr) - excess_leading_zeros
      |                                                      ^
handy.h:2790:131: note: in definition of macro 'Move'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                   ^
regcomp.c:25304:28: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25304 |                 lookup_len -= equals_pos;
      |                            ^~
regcomp.c:25328:28: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25328 |                 lookup_len -= slash_pos;
      |                            ^~
regcomp.c:25370:55: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25370 |             table_index = do_uniprop_match(canonical, strlen(canonical));
      |                                                       ^~~~~~~~~~~~~~~~~
regcomp.c:25390:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25390 |         Size_t warning_offset = table_index / MAX_UNI_KEYWORD_INDEX;
      |                                 ^~~~~~~~~~~
regcomp.c:25450:65: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25450 |                 pu_definition = newSVpvn(pos, strchr(pos, '\a') - pos);
      |                                               ~~~~~~~~~~~~~~~~~~^~~~~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
regcomp.c: In function 'S_handle_names_wildcard':
regcomp.c:25689:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25689 |                                           SvEND(names_string) - this_name_end);
regcomp.c:25698:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25698 |                                           SvEND(names_string) - this_name_end);
regcomp.c:25704:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25704 |                                          this_name_start - all_names_start);
      |                                          ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
regcomp.c:25733:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25733 |                                                cp_start - all_names_start);
      |                                                ~~~~~~~~~^~~~~~~~~~~~~~~~~
regcomp.c:25754:22: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25754 |                 cp = (XDIGIT_VALUE(cp_start[0]) << 16)
      |                      ^
regcomp.c:25856:62: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25856 |                                                              cp);
      |                                                              ^~
embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
regcomp.c:25912:76: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
25912 |                     *prop_definition = add_cp_to_invlist(*prop_definition, j);
      |                                                                            ^
embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o regexec.o regexec.c
In file included from perl.h:7246,
                 from regexec.c:75:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
regexec.c: In function 'S_regcppush':
regexec.c:232:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  232 |                 (maxopenparen - parenfloor) * REGCP_PAREN_ELEMS;
      |                               ^
regexec.c:232:17: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  232 |                 (maxopenparen - parenfloor) * REGCP_PAREN_ELEMS;
      |                 ^
regexec.c:233:28: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  233 |     const UV total_elems = paren_elems_to_push + REGCP_OTHER_ELEMS;
      |                            ^~~~~~~~~~~~~~~~~~~
In file included from perl.h:5841:
regexec.c:252:24: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  252 |     SSGROW(total_elems + REGCP_FRAME_ELEMS);
      |                        ^
embed.h:560:63: note: in definition of macro 'savestack_grow_cnt'
  560 | #define savestack_grow_cnt(a)   Perl_savestack_grow_cnt(aTHX_ a)
      |                                                               ^
regexec.c:252:5: note: in expansion of macro 'SSGROW'
  252 |     SSGROW(total_elems + REGCP_FRAME_ELEMS);
      |     ^~~~~~
In file included from perl.h:4172:
regexec.c: In function 'S_regcppop':
scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
regexec.c:354:27: note: in expansion of macro 'SSPOPINT'
  354 |     rex->lastcloseparen = SSPOPINT;
      |                           ^~~~~~~~
scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
regexec.c:355:22: note: in expansion of macro 'SSPOPINT'
  355 |     rex->lastparen = SSPOPINT;
      |                      ^~~~~~~~
scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
regexec.c:356:23: note: in expansion of macro 'SSPOPINT'
  356 |     *maxopenparen_p = SSPOPINT;
      |                       ^~~~~~~~
regexec.c: In function 'Perl_re_intuit_start':
sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
regexec.c:1004:32: note: in expansion of macro 'SvCUR'
 1004 |                 SSize_t slen = SvCUR(check);
      |                                ^~~~~
In file included from perl.h:3003:
regexec.c:1030:67: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1030 |                     || (slen > 1 && (memNE(SvPVX_const(check), s, slen)))))
      |                                                                   ^~~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
regexec.c:1030:38: note: in expansion of macro 'memNE'
 1030 |                     || (slen > 1 && (memNE(SvPVX_const(check), s, slen)))))
      |                                      ^~~~~
sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
regexec.c:1114:33: note: in expansion of macro 'SvCUR'
 1114 |             SSize_t check_len = SvCUR(check) - !!SvTAIL(check);
      |                                 ^~~~~
regexec.c:1419:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1419 |             ! ( rx_origin = (char *)memchr(rx_origin, '\n', s - rx_origin)))
      |                                                             ~~^~~~~~~~~~~
regexec.c: In function 'S_find_byclass':
regexec.c:1914:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1914 |     REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND(memchr(s, byte, strend - s),     \
      |                                                        ~~~~~~~^~~
regexec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
regexec.c:2312:13: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN'
 2312 |             REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN(first_byte,
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
regexec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
regexec.c:1921:38: note: in expansion of macro 'ninstr'
 1921 |                                      ninstr(s, strend, substr, substr_end), \
      |                                      ^~~~~~
regexec.c:2329:9: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_STRING_SCAN'
 2329 |         REXEC_FBC_FIND_NEXT_UTF8_STRING_SCAN(
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:1914:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1914 |     REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND(memchr(s, byte, strend - s),     \
      |                                                        ~~~~~~~^~~
regexec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
regexec.c:2364:13: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN'
 2364 |             REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN(first_byte,
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:2432:50: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2432 |                 s = (char *) memchr(s, c1, e + 1 - s);
      |                                            ~~~~~~^~~
regexec.c:2438:69: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2438 |                 if (   (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                  ~~~^~~
regexec.c:2462:73: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2462 |                     if (   (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                      ~~~^~~
regexec.c:2474:73: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2474 |                         && (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                      ~~~^~~
regexec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
regexec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
handy.h:2140:52: note: in expansion of macro '_is_uni_FOO'
 2140 |                             (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))
      |                                                    ^~~~~~~~~~~
handy.h:2162:32: note: in expansion of macro '_generic_LC_invlist_uvchr'
 2162 | #define isWORDCHAR_LC_uvchr(c) _generic_LC_invlist_uvchr(isWORDCHAR_LC,         \
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:1986:11: note: in expansion of macro 'isWORDCHAR_LC_uvchr'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
regexec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
regexec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
handy.h:2140:52: note: in expansion of macro '_is_uni_FOO'
 2140 |                             (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))
      |                                                    ^~~~~~~~~~~
handy.h:2162:32: note: in expansion of macro '_generic_LC_invlist_uvchr'
 2162 | #define isWORDCHAR_LC_uvchr(c) _generic_LC_invlist_uvchr(isWORDCHAR_LC,         \
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:1986:11: note: in expansion of macro 'isWORDCHAR_LC_uvchr'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
regexec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
regexec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
handy.h:2078:48: note: in expansion of macro '_is_uni_FOO'
 2078 |                                              : _is_uni_FOO(classnum, c))
      |                                                ^~~~~~~~~~~
handy.h:2099:31: note: in expansion of macro '_generic_invlist_uvchr'
 2099 | #define isWORDCHAR_uvchr(c)   _generic_invlist_uvchr(_CC_WORDCHAR, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
handy.h:2125:33: note: in expansion of macro 'isWORDCHAR_uvchr'
 2125 | #define isWORDCHAR_uni(c)       isWORDCHAR_uvchr(c)
      |                                 ^~~~~~~~~~~~~~~~
regexec.c:1986:11: note: in expansion of macro 'isWORDCHAR_uni'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
regexec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
regexec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
regexec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
regexec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
regexec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
regexec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
handy.h:2078:48: note: in expansion of macro '_is_uni_FOO'
 2078 |                                              : _is_uni_FOO(classnum, c))
      |                                                ^~~~~~~~~~~
handy.h:2099:31: note: in expansion of macro '_generic_invlist_uvchr'
 2099 | #define isWORDCHAR_uvchr(c)   _generic_invlist_uvchr(_CC_WORDCHAR, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
handy.h:2125:33: note: in expansion of macro 'isWORDCHAR_uvchr'
 2125 | #define isWORDCHAR_uni(c)       isWORDCHAR_uvchr(c)
      |                                 ^~~~~~~~~~~~~~~~
regexec.c:1986:11: note: in expansion of macro 'isWORDCHAR_uni'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
regexec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
regexec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
utf8.h:737:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 | #define UTF8_SAFE_SKIP(s, e)  (__ASSERT_((e) >= (s))                \
      |                               ^
regexec.c:1738:19: note: in expansion of macro 'UTF8_SAFE_SKIP'
 1738 |             len = UTF8_SAFE_SKIP(uc, uc_end);                                       \
      |                   ^~~~~~~~~~~~~~
regexec.c:3242:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 3242 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
regexec.c:1772:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |                                                      ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regexec.c:1772:15: note: in expansion of macro 'utf8n_to_uvchr'
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |               ^~~~~~~~~~~~~~
regexec.c:3242:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 3242 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
regexec.c:3279:47: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3279 |                                  ( ((offset = base + charid
      |                                               ^~~~
regexec.c: In function 'S_reg_set_capture_string':
regexec.c:3477:68: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3477 |                             (char*)saferealloc(prog->subbeg, sublen+1);
      |                                                              ~~~~~~^~
regexec.c:3480:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3480 |                 prog->subbeg = (char*)safemalloc(sublen+1);
      |                                                  ~~~~~~^~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
regexec.c:3481:13: note: in expansion of macro 'Copy'
 3481 |             Copy(strbeg + min, prog->subbeg, sublen, char);
      |             ^~~~
regexec.c:3504:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3504 |                 prog->subcoffset = sv_pos_b2u_flags(sv, prog->subcoffset,
      |                                                         ~~~~^~~~~~~~~~~~
embed.h:654:63: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                                               ^
embed.h:654:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
embed.h:654:33: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
In file included from perl.h:4171:
regexec.c: In function 'Perl_regexec_flags':
regexec.c:3585:56: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3585 |             ? strbeg + MgBYTEPOS(mg, sv, strbeg, strend-strbeg)
      |                                                  ~~~~~~^~~~~~~
mg.h:73:61: note: in definition of macro 'MgBYTEPOS'
   73 | # define MgBYTEPOS(mg,sv,pv,len) S_MgBYTEPOS(aTHX_ mg,sv,pv,len)
      |                                                             ^~~
regexec.c:140:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |             ? reghopmaybe3((U8*)pos, (SSize_t)0-off, (U8*)(lim)) \
      |                                                ^
regexec.c:145:36: note: in expansion of macro 'HOPBACK3'
  145 | #define HOPBACKc(pos, off) ((char*)HOPBACK3(pos, off, reginfo->strbeg))
      |                                    ^~~~~~~~
regexec.c:3603:28: note: in expansion of macro 'HOPBACKc'
 3603 |                 startpos = HOPBACKc(reginfo->ganch, prog->gofs);
      |                            ^~~~~~~~
regexec.c:140:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |             ? reghopmaybe3((U8*)pos, (SSize_t)0-off, (U8*)(lim)) \
      |                                                ^
regexec.c:145:36: note: in expansion of macro 'HOPBACK3'
  145 | #define HOPBACKc(pos, off) ((char*)HOPBACK3(pos, off, reginfo->strbeg))
      |                                    ^~~~~~~~
regexec.c:3616:24: note: in expansion of macro 'HOPBACKc'
 3616 |             startpos = HOPBACKc(startpos, prog->gofs);
      |                        ^~~~~~~~
regexec.c:3952:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3952 |                          - (SvTAIL(must) != 0) + back_min), strbeg);
      |                                                ^
regexec.c:147:75: note: in definition of macro 'HOP3'
  147 | #define HOP3(pos,off,lim) (reginfo->is_utf8_target  ? reghop3((U8*)(pos), off, (U8*)(lim)) : (U8*)(pos + off))
      |                                                                           ^~~
regexec.c:3950:20: note: in expansion of macro 'HOP3c'
 3950 |             last = HOP3c(strend,        /* Cannot start after this */
      |                    ^~~~~
regexec.c:3952:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3952 |                          - (SvTAIL(must) != 0) + back_min), strbeg);
      |                                                ^
regexec.c:147:106: note: in definition of macro 'HOP3'
  147 | #define HOP3(pos,off,lim) (reginfo->is_utf8_target  ? reghop3((U8*)(pos), off, (U8*)(lim)) : (U8*)(pos + off))
      |                                                                                                          ^~~
regexec.c:3950:20: note: in expansion of macro 'HOP3c'
 3950 |             last = HOP3c(strend,        /* Cannot start after this */
      |                    ^~~~~
regexec.c: In function 'S_regtry':
regexec.c:4274:18: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4274 |         for (i = prog->nparens; i > (I32)prog->lastparen; i--) {
      |                  ^~~~
regexec.c: In function 'S_setup_EXACTISH_ST':
handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
regexec.c:4792:18: note: in expansion of macro 'UNLIKELY'
 4792 |         else if (UNLIKELY(    op == TURKISH
      |                  ^~~~~~~~
regexec.c:4793:34: note: in expansion of macro 'isALPHA_FOLD_EQ'
 4793 |                           && (   isALPHA_FOLD_EQ(folded, 'i')
      |                                  ^~~~~~~~~~~~~~~
regexec.c:4822:23: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 4822 |                       + UNLIKELY(multi_fold_from != 0); i++)
      |                       ^
utf8.h:455:5: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  455 |     ((OFFUNI_IS_INVARIANT(uv))                                              \
      |     ^
utf8.h:482:25: note: in expansion of macro 'OFFUNISKIP'
  482 | #define UVCHR_SKIP(uv)  OFFUNISKIP(NATIVE_TO_UNI(uv))
      |                         ^~~~~~~~~~
regexec.c:4872:37: note: in expansion of macro 'UVCHR_SKIP'
 4872 |                 lengths[m->count] = UVCHR_SKIP(fold_from);
      |                                     ^~~~~~~~~~
regexec.c:4881:40: warning: conversion from 'UV' {aka 'long unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4881 |                 matches[m->count][0] = fold_from;
      |                                        ^~~~~~~~~
regexec.c:4892:36: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4892 |                 index_of_longest = m->count - 1;
      |                                    ^
regexec.c:4976:20: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4976 |         U8 shift = (which - 1) * 8;
      |                    ^
regexec.c: In function 'S_regmatch':
utf8.h:737:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 | #define UTF8_SAFE_SKIP(s, e)  (__ASSERT_((e) >= (s))                \
      |                               ^
regexec.c:1738:19: note: in expansion of macro 'UTF8_SAFE_SKIP'
 1738 |             len = UTF8_SAFE_SKIP(uc, uc_end);                                       \
      |                   ^~~~~~~~~~~~~~
regexec.c:6659:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 6659 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
regexec.c:1772:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |                                                      ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regexec.c:1772:15: note: in expansion of macro 'utf8n_to_uvchr'
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |               ^~~~~~~~~~~~~~
regexec.c:6659:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 6659 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
regexec.c:6668:31: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6668 |                               base + charid - 1 - trie->uniquecharcount)) >= 0)
      |                               ^~~~
regexec.c:6808:43: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6808 |                         uc = utf8_hop(uc, chars);
      |                                           ^~~~~
In file included from regexec.c:80:
regcomp.h:326:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  326 | #define STR_LENl(p)     (__ASSERT_(OP(p) == LEXACT || OP(p) == LEXACT_REQ8)  \
      |                         ^
regexec.c:6868:18: note: in expansion of macro 'STR_LENl'
 6868 |             ln = STR_LENl(scan);
      |                  ^~~~~~~~
regexec.c:6964:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6964 |                     || (ln > 1 && memNE(s, locinput, ln)))
      |                                                      ^~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
regexec.c:6964:35: note: in expansion of macro 'memNE'
 6964 |                     || (ln > 1 && memNE(s, locinput, ln)))
      |                                   ^~~~~
regexec.c:7061:48: warning: conversion to 'UV' {aka 'long unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7061 |                                         s, 0,  ln, is_utf8_pat,fold_utf8_flags))
      |                                                ^~
embed.h:183:90: note: in definition of macro 'foldEQ_utf8_flags'
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                                                          ^
embed.h:1222:41: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1222 | #define reg_check_named_buff_matched    S_reg_check_named_buff_matched
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:1222:41: note: in definition of macro 'reg_check_named_buff_matched'
 1222 | #define reg_check_named_buff_matched    S_reg_check_named_buff_matched
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regexec.c:7841:57: warning: conversion to 'UV' {aka 'long unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7841 |                 if (! foldEQ_utf8_flags(s, NULL, endref - ln, utf8_target,
      |                                                  ~~~~~~~^~~~
embed.h:183:82: note: in definition of macro 'foldEQ_utf8_flags'
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                                                  ^
regexec.c:7863:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7863 |                            ? memNE(s, locinput, ln)
      |                                                 ^~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
regexec.c:7863:30: note: in expansion of macro 'memNE'
 7863 |                            ? memNE(s, locinput, ln)
      |                              ^~~~~
mg.h:82:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
   82 |            (mg)->mg_flags &= ~MGf_BYTES))
      |                              ^
regexec.c:8089:21: note: in expansion of macro 'MgBYTEPOS_set'
 8089 |                     MgBYTEPOS_set(reginfo->info_aux_eval->pos_magic,
      |                     ^~~~~~~~~~~~~
regcomp.h:368:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  368 | #define ARG2L_LOC(p)    (((struct regnode_2L *)p)->arg2)
      |                                                  ^
regcomp.h:263:25: note: in definition of macro 'ARG_VALUE'
  263 | #define ARG_VALUE(arg) (arg)
      |                         ^~~
regcomp.h:274:28: note: in expansion of macro 'ARG2L_LOC'
  274 | #define ARG2L(p) ARG_VALUE(ARG2L_LOC(p))
      |                            ^~~~~~~~~
regexec.c:8202:37: note: in expansion of macro 'ARG2L'
 8202 |                                     ARG2L(scan),
      |                                     ^~~~~
regexec.c:8563:30: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8563 |                 parenfloor = rex->lastparen; /* Pessimization... */
      |                              ^~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
regexec.c:8694:29: note: in expansion of macro 'Renew'
 8694 |                             Renew(aux->poscache, size, char);
      |                             ^~~~~
regexec.c:8695:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8695 |                             reginfo->poscache_size = size;
      |                                                      ^~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
regexec.c:8697:25: note: in expansion of macro 'Zero'
 8697 |                         Zero(aux->poscache, size, char);
      |                         ^~~~
regexec.c:8700:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8700 |                         reginfo->poscache_size = size;
      |                                                  ^~~~
handy.h:2763:85: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2763 | #define Newxz(v,n,t)    (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))
      |                                                                                     ^~~
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
regexec.c:8701:25: note: in expansion of macro 'Newxz'
 8701 |                         Newxz(aux->poscache, size, char);
      |                         ^~~~~
regexec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8766:13: note: in expansion of macro 'CACHEsayNO'
 8766 |             CACHEsayNO;
      |             ^~~~~~~~~~
regexec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8776:13: note: in expansion of macro 'CACHEsayNO'
 8776 |             CACHEsayNO;
      |             ^~~~~~~~~~
regexec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
regexec.c:8820:17: note: in expansion of macro 'CACHEsayNO'
 8820 |                 CACHEsayNO;
      |                 ^~~~~~~~~~
In file included from perl.h:4161:
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
regexec.c:9278:36: note: in expansion of macro 'ninstr'
 9278 |                         locinput = ninstr(locinput, loceol,
      |                                    ^~~~~~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
regexec.c:9291:40: note: in expansion of macro 'ninstr'
 9291 |                             locinput = ninstr(locinput, loceol,
      |                                        ^~~~~~
regexec.c:9331:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 9331 |                 n = (utf8_target)
      |                     ^
regexec.c:9478:24: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 9478 |             ST.count = scan->next_off + 1; /* next_off repurposed to be
      |                        ^~~~
regexec.c:9819:19: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9819 |             depth -= (st - SLAB_FIRST(PL_regmatch_slab) + 1);
      |                   ^~
regexec.c:9823:15: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9823 |         depth -= (st - yes_state);
      |               ^~
regexec.c:9834:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9834 |         state_num = st->resume_state + no_final;
      |                     ^~
regexec.c:9891:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9891 |         state_num = st->resume_state + 1; /* failure = success + 1 */
      |                     ^~
regexec.c: In function 'S_regrepeat':
regexec.c:10004:53: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10004 |         scan = (char *) memchr(scan, '\n', this_eol - scan);
      |                                            ~~~~~~~~~^~~~~~
regexec.c: In function 'S_reginclass':
regexec.c:10609:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10609 |         c = utf8n_to_uvchr(p, p_end - p, &c_len, utf8n_flags | UTF8_CHECK_ONLY);
      |                               ~~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
regexec.c:10609:13: note: in expansion of macro 'utf8n_to_uvchr'
10609 |         c = utf8n_to_uvchr(p, p_end - p, &c_len, utf8n_flags | UTF8_CHECK_ONLY);
      |             ^~~~~~~~~~~~~~
embed.h:309:33: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  309 | #define lsbit_pos32             Perl_lsbit_pos32
      |                                 ^~~~~~~~~~~~~~~~
embed.h:309:33: note: in definition of macro 'lsbit_pos32'
  309 | #define lsbit_pos32             Perl_lsbit_pos32
      |                                 ^~~~~~~~~~~~~~~~
In file included from perl.h:4163:
regexec.c: In function 'S_setup_eval_state':
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
regexec.c:10925:13: note: in expansion of macro 'SAVE_DEFSV'
10925 |             SAVE_DEFSV;
      |             ^~~~~~~~~~
regexec.c:10969:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10969 |         eval_state->sublen     = rex->sublen;
      |                                  ^~~
regexec.c:10970:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10970 |         eval_state->suboffset  = rex->suboffset;
      |                                  ^~~
regexec.c:10971:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10971 |         eval_state->subcoffset = rex->subcoffset;
      |                                  ^~~
regexec.c: In function 'S_cleanup_regmatch_info_aux':
regexec.c:11004:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11004 |             rex->sublen     = eval_state->sublen;
      |                               ^~~~~~~~~~
regexec.c:11005:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11005 |             rex->suboffset  = eval_state->suboffset;
      |                               ^~~~~~~~~~
regexec.c:11006:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11006 |             rex->subcoffset = eval_state->subcoffset;
      |                               ^~~~~~~~~~
regexec.c:11016:18: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
11016 |                  (eval_state->pos_magic->mg_flags & ~MGf_BYTES)
      |                  ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o utf8.o utf8.c
In file included from perl.h:7246,
                 from utf8.c:33:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
utf8.c: In function 'Perl__force_out_malformed_utf8_message':
utf8.c:102:55: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65537' to '4294901759' [-Wsign-conversion]
  102 |     (void) utf8n_to_uvchr_error(p, e - p, NULL, flags & ~UTF8_CHECK_ONLY, &errors);
      |                                                       ^
utf8.h:83:59: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                           ^~~~~
utf8.c:102:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  102 |     (void) utf8n_to_uvchr_error(p, e - p, NULL, flags & ~UTF8_CHECK_ONLY, &errors);
      |                                    ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c: In function 'Perl_uvoffuni_to_utf8_flags_msgs':
utf8.c:263:19: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-5' to '4294967291' [-Wsign-conversion]
  263 |             flags &= ~UNICODE_WARN_SUPER;
      |                   ^~
utf8.c: In function 'S_does_utf8_overflow':
utf8.c:661:24: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  661 |     const STRLEN len = e - s;
      |                        ^
utf8.c: In function 'Perl_is_utf8_char_helper_':
utf8.c:838:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  838 |         return full_len;
      |                ^~~~~~~~
utf8.c:858:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  858 |         return full_len;
      |                ^~~~~~~~
utf8.c:863:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  863 |             return full_len;
      |                    ^~~~~~~~
utf8.c:879:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  879 |         return full_len;
      |                ^~~~~~~~
utf8.c:889:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  889 |         return full_len;
      |                ^~~~~~~~
utf8.c: In function 'Perl_is_utf8_FF_helper_':
utf8.c:943:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  943 |     if (0 < isFF_overlong(s0, e - s0)) {
      |                               ~~^~~~
utf8.c: In function 'Perl__byte_dump_string':
utf8.c:995:20: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
  995 |             *d++ = high_nibble + '0';
      |                    ^~~~~~~~~~~
utf8.c:998:20: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
  998 |             *d++ = high_nibble - 10 + 'a';
      |                    ^~~~~~~~~~~
utf8.c:1002:20: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
 1002 |             *d++ = low_nibble + '0';
      |                    ^~~~~~~~~~
utf8.c:1005:20: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
 1005 |             *d++ = low_nibble - 10 + 'a';
      |                    ^~~~~~~~~~
In file included from perl.h:5841:
utf8.c: In function 'S_unexpected_non_continuation_text':
utf8.c:1054:51: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1054 |                            _byte_dump_string(s, x - s, 0),
      |                                                 ~~^~~
embed.h:962:72: note: in definition of macro '_byte_dump_string'
  962 | #define _byte_dump_string(a,b,c)        Perl__byte_dump_string(aTHX_ a,b,c)
      |                                                                        ^
utf8.c: In function 'Perl__utf8n_to_uvchr_msgs_helper':
utf8.c:1583:14: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1583 |     curlen = s - s0;
      |              ^
utf8.c:1620:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1620 |                 || (UNLIKELY(0 < is_utf8_overlong(s0, s - s0))))))
      |                                                       ~~^~~~
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
utf8.c:1620:21: note: in expansion of macro 'UNLIKELY'
 1620 |                 || (UNLIKELY(0 < is_utf8_overlong(s0, s - s0))))))
      |                     ^~~~~~~~
utf8.c:1660:51: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17' to '4294967279' [-Wsign-conversion]
 1660 |     if (   (   (      LIKELY(! (possible_problems & ~UTF8_GOT_LONG))
      |                                                   ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3891:52: note: in expansion of macro 'cBOOL'
 3891 | #define LIKELY(cond)                        EXPECT(cBOOL(cond),TRUE)
      |                                                    ^~~~~
utf8.c:1660:23: note: in expansion of macro 'LIKELY'
 1660 |     if (   (   (      LIKELY(! (possible_problems & ~UTF8_GOT_LONG))
      |                       ^~~~~~
utf8.c:1682:41: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17' to '4294967279' [-Wsign-conversion]
 1682 |         if (LIKELY(! (possible_problems & ~UTF8_GOT_LONG))) {
      |                                         ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3891:52: note: in expansion of macro 'cBOOL'
 3891 | #define LIKELY(cond)                        EXPECT(cBOOL(cond),TRUE)
      |                                                    ^~~~~
utf8.c:1682:13: note: in expansion of macro 'LIKELY'
 1682 |         if (LIKELY(! (possible_problems & ~UTF8_GOT_LONG))) {
      |             ^~~~~~
utf8.c:1766:19: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-20609' to '4294946687' [-Wsign-conversion]
 1766 |                   &= ~(UTF8_GOT_OVERFLOW|UTF8_GOT_SUPER|UTF8_GOT_PERL_EXTENDED);
      |                   ^~
utf8.c:1815:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 1815 |                 possible_problems &= ~UTF8_GOT_EMPTY;
      |                                   ^~
utf8.c:1837:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 1837 |                 possible_problems &= ~UTF8_GOT_CONTINUATION;
      |                                   ^~
utf8.c:1856:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-9' to '4294967287' [-Wsign-conversion]
 1856 |                 possible_problems &= ~UTF8_GOT_SHORT;
      |                                   ^~
utf8.c:1868:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1868 |                              _byte_dump_string(s0, send - s0, 0),
      |                                                    ~~~~~^~~~
embed.h:962:72: note: in definition of macro '_byte_dump_string'
  962 | #define _byte_dump_string(a,b,c)        Perl__byte_dump_string(aTHX_ a,b,c)
      |                                                                        ^
utf8.c:1878:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
 1878 |                 possible_problems &= ~UTF8_GOT_NON_CONTINUATION;
      |                                   ^~
utf8.c:1896:61: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1896 |                                                             printlen,
      |                                                             ^~~~~~~~
embed.h:2018:100: note: in definition of macro 'unexpected_non_continuation_text'
 2018 | #define unexpected_non_continuation_text(a,b,c,d)       S_unexpected_non_continuation_text(aTHX_ a,b,c,d)
      |                                                                                                    ^
utf8.c:1897:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1897 |                                                             s - s0,
      |                                                             ~~^~~~
embed.h:2018:102: note: in definition of macro 'unexpected_non_continuation_text'
 2018 | #define unexpected_non_continuation_text(a,b,c,d)       S_unexpected_non_continuation_text(aTHX_ a,b,c,d)
      |                                                                                                      ^
utf8.c:1898:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1898 |                                                             (int) expectlen));
      |                                                             ^~~~~~~~~~~~~~~
embed.h:2018:104: note: in definition of macro 'unexpected_non_continuation_text'
 2018 | #define unexpected_non_continuation_text(a,b,c,d)       S_unexpected_non_continuation_text(aTHX_ a,b,c,d)
      |                                                                                                        ^
utf8.c:1904:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
 1904 |                 possible_problems &= ~UTF8_GOT_SURROGATE;
      |                                   ^~
utf8.c:1935:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4097' to '4294963199' [-Wsign-conversion]
 1935 |                 possible_problems &= ~UTF8_GOT_SUPER;
      |                                   ^~
utf8.c:2010:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 2010 |                 possible_problems &= ~UTF8_GOT_NONCHAR;
      |                                   ^~
utf8.c:2035:35: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17' to '4294967279' [-Wsign-conversion]
 2035 |                 possible_problems &= ~UTF8_GOT_LONG;
      |                                   ^~
utf8.c:2069:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2069 |                                     _byte_dump_string(s0, send - s0, 0),
      |                                                           ~~~~~^~~~
embed.h:962:72: note: in definition of macro '_byte_dump_string'
  962 | #define _byte_dump_string(a,b,c)        Perl__byte_dump_string(aTHX_ a,b,c)
      |                                                                        ^
utf8.c:2089:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2089 |                                 _byte_dump_string(s0, send - s0, 0),
      |                                                       ~~~~~^~~~
embed.h:962:72: note: in definition of macro '_byte_dump_string'
  962 | #define _byte_dump_string(a,b,c)        Perl__byte_dump_string(aTHX_ a,b,c)
      |                                                                        ^
utf8.c:2090:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2090 |                                 _byte_dump_string(tmpbuf, e - tmpbuf, 0),
      |                                                           ~~^~~~~~~~
embed.h:962:72: note: in definition of macro '_byte_dump_string'
  962 | #define _byte_dump_string(a,b,c)        Perl__byte_dump_string(aTHX_ a,b,c)
      |                                                                        ^
utf8.c: In function 'Perl_utf8_to_bytes':
utf8.c:2387:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2387 |         *lenp = d - save;
      |                 ^
utf8.c: In function 'Perl_bytes_from_utf8_loc':
utf8.c:2526:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2526 |     *lenp = d - converted_start;
      |             ^
utf8.c: In function 'Perl_bytes_to_utf8':
utf8.c:2576:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2576 |     *lenp = d-dst;
      |             ^
utf8.c: In function 'Perl_utf16_to_utf8_base':
utf8.c:2627:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2627 |         U32 uv = (p[(U8) high_byte] << 8) + p[(U8) low_byte];
      |                  ^
utf8.c:2644:37: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2644 |                 U32 low_surrogate = (p[(U8) high_byte] << 8) + p[(U8) low_byte];
      |                                     ^
utf8.c:2666:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2666 |     *newlen = d - dstart;
      |               ^
utf8.c: In function 'Perl_utf8_to_utf16_base':
utf8.c:2716:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2716 |         UV uv = utf8n_to_uvchr(s, send - s, &retlen,
      |                                   ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:2716:17: note: in expansion of macro 'utf8n_to_uvchr'
 2716 |         UV uv = utf8n_to_uvchr(s, send - s, &retlen,
      |                 ^~~~~~~~~~~~~~
utf8.c:2735:33: warning: conversion from 'U32' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 2735 |             d[(U8) high_byte] = high_surrogate >> 8;
      |                                 ^~~~~~~~~~~~~~
utf8.c:2747:29: warning: conversion from 'UV' {aka 'long unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 2747 |         d[(U8) high_byte] = uv >> 8;
      |                             ^~
utf8.c:2754:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2754 |     *newlen = d - dstart;
      |               ^
utf8.c: In function 'Perl__to_uni_fold_flags':
utf8.c:3047:22: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 3047 |             flags &= ~FOLD_FLAGS_LOCALE;
      |                      ^
utf8.c: In function 'S_is_utf8_common':
utf8.c:3082:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3082 |     UV cp = utf8n_to_uvchr(p, e - p, NULL, 0);
      |                               ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3082:13: note: in expansion of macro 'utf8n_to_uvchr'
 3082 |     UV cp = utf8n_to_uvchr(p, e - p, NULL, 0);
      |             ^~~~~~~~~~~~~~
utf8.c: In function 'S_to_case_cp_list':
utf8.c:3243:21: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3243 |         return base + original - invlist_array(invlist)[index];
      |                     ^
utf8.c: In function 'S__to_utf8_case':
utf8.c:3316:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3316 |         *lenp = d - ustrp;
      |                 ^
utf8.c: In function 'Perl__inverse_folds':
utf8.c:3384:35: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3384 |     *first_folds_to = (U32) (base + cp
      |                                   ^
utf8.c: In function 'Perl__to_utf8_upper_flags':
utf8.c:3673:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3673 |     CASE_CHANGE_BODY_START(~0, toupper, _to_upper_title_latin1, 'S',
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c:3673:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
utf8.c:3629:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                                    ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3629:18: note: in expansion of macro 'utf8n_to_uvchr'
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                  ^~~~~~~~~~~~~~
utf8.c:3673:5: note: in expansion of macro 'CASE_CHANGE_BODY_START'
 3673 |     CASE_CHANGE_BODY_START(~0, toupper, _to_upper_title_latin1, 'S',
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c: In function 'Perl__to_utf8_title_flags':
utf8.c:3696:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3696 |     CASE_CHANGE_BODY_START(~0, toupper, _to_upper_title_latin1, 's',
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c:3696:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
utf8.c:3629:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                                    ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3629:18: note: in expansion of macro 'utf8n_to_uvchr'
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                  ^~~~~~~~~~~~~~
utf8.c:3696:5: note: in expansion of macro 'CASE_CHANGE_BODY_START'
 3696 |     CASE_CHANGE_BODY_START(~0, toupper, _to_upper_title_latin1, 's',
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c: In function 'Perl__to_utf8_lower_flags':
utf8.c:3717:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3717 |     CASE_CHANGE_BODY_START(~0, tolower, to_lower_latin1, 0 /* 0 is dummy */,
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c:3717:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
utf8.c:3629:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                                    ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3629:18: note: in expansion of macro 'utf8n_to_uvchr'
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                  ^~~~~~~~~~~~~~
utf8.c:3717:5: note: in expansion of macro 'CASE_CHANGE_BODY_START'
 3717 |     CASE_CHANGE_BODY_START(~0, tolower, to_lower_latin1, 0 /* 0 is dummy */,
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c: In function 'Perl__to_utf8_fold_flags':
utf8.c:3606:22: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 3606 |             flags &= ~(locale_flags);                                        \
      |                      ^
utf8.c:3748:5: note: in expansion of macro 'CASE_CHANGE_BODY_START'
 3748 |     CASE_CHANGE_BODY_START(FOLD_FLAGS_LOCALE, tolower, _to_fold_latin1,
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c:3748:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
utf8.c:3748:5: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
utf8.c:3629:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                                    ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3629:18: note: in expansion of macro 'utf8n_to_uvchr'
 3629 |         result = utf8n_to_uvchr(p, e - p, &len_result, UTF8_CHECK_ONLY);     \
      |                  ^~~~~~~~~~~~~~
utf8.c:3748:5: note: in expansion of macro 'CASE_CHANGE_BODY_START'
 3748 |     CASE_CHANGE_BODY_START(FOLD_FLAGS_LOCALE, tolower, _to_fold_latin1,
      |     ^~~~~~~~~~~~~~~~~~~~~~
utf8.c: In function 'Perl_check_utf8_print':
utf8.c:3926:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3926 |                     (void) utf8n_to_uvchr(s, e - s, NULL, UTF8_WARN_SUPER);
      |                                              ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3926:28: note: in expansion of macro 'utf8n_to_uvchr'
 3926 |                     (void) utf8n_to_uvchr(s, e - s, NULL, UTF8_WARN_SUPER);
      |                            ^~~~~~~~~~~~~~
utf8.c:3946:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3946 |                 (void) utf8n_to_uvchr(s, e - s, NULL, UTF8_WARN_NONCHAR);
      |                                          ~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
utf8.c:3946:24: note: in expansion of macro 'utf8n_to_uvchr'
 3946 |                 (void) utf8n_to_uvchr(s, e - s, NULL, UTF8_WARN_NONCHAR);
      |                        ^~~~~~~~~~~~~~
utf8.c: In function 'Perl_pv_uni_display':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
utf8.c: In function 'Perl_foldEQ_utf8_flags':
utf8.c:4182:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 4182 |                 flags &= ~FOLDEQ_LOCALE;
      |                       ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o sv.o sv.c
In file included from perl.h:7246,
                 from sv.c:32:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv.c: In function 'do_clean_objs':
sv.h:1004:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:1004:46: note: in definition of macro 'SvROK_off'
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.c: In function 'Perl_sv_upgrade':
sv.c:1021:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
 1021 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:3003:
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:1146:13: note: in expansion of macro 'Copy'
 1146 |             Copy((char *)old_body + offset, (char *)new_body + offset, length,
      |             ^~~~
sv.c: In function 'Perl_sv_backoff':
sv.c:1266:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1266 |     SvFLAGS(sv) &= ~SVf_OOK;
      |                 ^~
sv.c: In function 'Perl_sv_setrv_noinc':
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.c:1601:5: note: in expansion of macro 'prepare_SV_for_RV'
 1601 |     prepare_SV_for_RV(sv);
      |     ^~~~~~~~~~~~~~~~~
sv.c: In function 'S_sv_display':
sv.c:1699:28: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 1699 |                     *d++ = ch;
      |                            ^~
sv.c: In function 'S_uiv_2buf':
sv.c:2722:14: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2722 |         uv = iv;
      |              ^~
sv.c: In function 'S_infnan_2pv':
sv.c:2790:14: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2790 |     return s - buffer;
      |            ~~^~~~~~~~
sv.c: In function 'Perl_sv_2pv_flags':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
In file included from perl.h:4168:
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
sv.c:2895:40: note: in expansion of macro 'HEK_LEN'
 2895 |                         stashnamelen = HEK_LEN(name);
      |                                        ^~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.c:2938:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2938 |                 len = buffer_end - retval - 1; /* -1 for that \0  */
      |                       ^~~~~~~~~~
sv.c:2972:55: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2972 |         ptr = uiv_2buf(buf.arr, SvIVX(sv), SvUVX(sv), isUIOK, &ebuf);
      |                                                       ^~~~~~
sv.c:2973:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2973 |         len = ebuf - ptr;
      |               ^~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.c:3101:28: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3101 |         const STRLEN len = s - SvPVX_const(sv);
      |                            ^
sv.c: In function 'Perl_sv_copypv_flags':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
In file included from perl.h:5841:
sv.c: In function 'Perl_sv_utf8_upgrade_flags_grow':
sv.c:3344:42: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3344 |             (void) sv_2pv_flags(sv,&len, flags);
      |                                          ^~~~~
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
sv.c:3425:45: warning: conversion to 'size_t' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3425 |             const Size_t invariant_length = t - s;
      |                                             ^
sv.c:3429:48: warning: conversion to 'size_t' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3429 |             const Size_t remaining_length_p1 = e - t;
      |                                                ^
sv.c:3475:37: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
 3475 |                     mg->mg_flags &= ~MGf_BYTES;
      |                                     ^
sv.c: In function 'Perl_sv_utf8_downgrade_flags':
sv.c:3529:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3529 |                         mg->mg_len = sv_pos_b2u_flags(sv, mg->mg_len,
      |                                                           ~~^~~~~~~~
embed.h:654:63: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                                               ^
embed.h:654:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
embed.h:654:33: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.c: In function 'Perl_sv_utf8_encode':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.c: In function 'Perl_sv_utf8_decode':
sv.c:3609:58: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3609 |             if (!is_utf8_string(first_variant, SvCUR(sv) - (first_variant -c)))
      |                                                          ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
sv.c: In function 'S_glob_assign_glob':
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
sv.c:3682:28: note: in expansion of macro 'GvNAMELEN'
 3682 |         const STRLEN len = GvNAMELEN(ssv);
      |                            ^~~~~~~~~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
sv.c:3730:28: note: in expansion of macro 'GvNAMELEN'
 3730 |         const STRLEN len = GvNAMELEN(dsv);
      |                            ^~~~~~~~~
In file included from perl.h:4163:
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
sv.c: In function 'Perl_gv_setref':
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
In file included from perl.h:4169:
cop.h:660:33: warning: conversion from 'line_t' {aka 'unsigned int'} to 'unsigned int:31' may change value [-Wconversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
sv.c:3823:23: note: in expansion of macro 'CopLINE'
 3823 |         GvLINE(dsv) = CopLINE(PL_curcop);
      |                       ^~~~~~~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
sv.c:3934:32: note: in expansion of macro 'GvNAMELEN'
 3934 |             const STRLEN len = GvNAMELEN(dsv);
      |                                ^~~~~~~~~
sv.c: In function 'Perl_sv_setsv_flags':
sv.c:4086:24: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4086 |     both_type = (stype | dtype);
      |                        ^
sv.c:4134:26: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4134 |             new_dflags = dtype; /* turn off everything except the type */
      |                          ^~~~~
In file included from perl.h:4165:
cv.h:205:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
cv.h:205:46: note: in definition of macro 'CvAUTOLOAD_off'
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
sv.c:4360:36: note: in expansion of macro 'GvNAMELEN'
 4360 |                 const STRLEN len = GvNAMELEN(dsv);
      |                                    ^~~~~~~~~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.c:4578:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 4578 |                 SvFLAGS(dsv) &= ~SVf_POK;
      |                              ^~
sv.c:4589:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 4589 |                 SvFLAGS(dsv) &= ~SVf_POK;
      |                              ^~
sv.c: In function 'Perl_sv_setpv_bufsize':
cv.h:205:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
cv.h:205:46: note: in definition of macro 'CvAUTOLOAD_off'
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
sv.c: In function 'Perl_sv_setpvn':
sv.c:4858:23: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4858 |         const IV iv = len;
      |                       ^~~
cv.h:205:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
cv.h:205:46: note: in definition of macro 'CvAUTOLOAD_off'
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
sv.c: In function 'Perl_sv_setpvn_fresh':
sv.c:4894:23: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4894 |         const IV iv = len;
      |                       ^~~
sv.c: In function 'Perl_sv_setpv':
cv.h:205:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
cv.h:205:46: note: in definition of macro 'CvAUTOLOAD_off'
  205 | #define CvAUTOLOAD_off(cv)      (CvFLAGS(cv) &= ~CVf_AUTOLOAD)
      |                                              ^~
sv.c: In function 'Perl_sv_sethek':
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
sv.c:4956:31: note: in expansion of macro 'HEK_LEN'
 4956 |             STRLEN utf8_len = HEK_LEN(hek);
      |                               ^~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.c:4962:41: note: in expansion of macro 'HEK_LEN'
 4962 |             sv_setpvn(sv, HEK_KEY(hek), HEK_LEN(hek));
      |                                         ^~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:4973:13: note: in expansion of macro 'SvCUR_set'
 4973 |             SvCUR_set(sv, HEK_LEN(hek));
      |             ^~~~~~~~~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.c: In function 'Perl_sv_usepvn_flags':
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.c: In function 'S_sv_uncow':
sv.h:2025:47: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1342177281' to '2952790015' [-Wsign-conversion]
 2025 | #define SvIsCOW_off(sv)          (SvFLAGS(sv) &= ~(SVf_IsCOW|SVppv_STATIC))
      |                                               ^~
sv.h:2025:47: note: in definition of macro 'SvIsCOW_off'
 2025 | #define SvIsCOW_off(sv)          (SvFLAGS(sv) &= ~(SVf_IsCOW|SVppv_STATIC))
      |                                               ^~
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.c: In function 'Perl_sv_force_normal_flags':
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.c:5255:25: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
 5255 |             SvFLAGS(sv) &= ~SVTYPEMASK;
      |                         ^~
sv.c:5260:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
 5260 |         SvFLAGS(temp) &= ~(SVTYPEMASK);
      |                       ^~
sv.c: In function 'Perl_sv_chop':
sv.c:5307:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5307 |     delta = ptr - SvPVX_const(sv);
      |             ^~~
sv.c: In function 'Perl_sv_catpvn_flags':
sv.c:5417:59: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5417 |     const char * const dstr = SvPV_force_flags(dsv, dlen, flags);
      |                                                           ^~~~~
embed.h:664:75: note: in definition of macro 'sv_pvn_force_flags'
  664 | #define sv_pvn_force_flags(a,b,c)       Perl_sv_pvn_force_flags(aTHX_ a,b,c)
      |                                                                           ^
sv.c:5417:31: note: in expansion of macro 'SvPV_force_flags'
 5417 |     const char * const dstr = SvPV_force_flags(dsv, dlen, flags);
      |                               ^~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:5450:9: note: in expansion of macro 'SvCUR_set'
 5450 |         SvCUR_set(dsv, d-(const U8 *)SvPVX(dsv));
      |         ^~~~~~~~~
sv.c: In function 'Perl_sv_catsv_flags':
sv.h:1852:49: warning: conversion to 'U32' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |      (const char*) sv_2pv_flags(sv, &len, (flags|SV_CONST_RETURN)))
      |                                           ~~~~~~^~~~~~~~~~~~~~~~~
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
sv.c:5494:27: note: in expansion of macro 'SvPV_flags_const'
 5494 |         const char *spv = SvPV_flags_const(sstr, slen, flags);
      |                           ^~~~~~~~~~~~~~~~
sv.c: In function 'Perl_sv_magicext':
sv.c:5673:19: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 5673 |     mg->mg_type = how;
      |                   ^~~
sv.c:5677:40: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5677 |             mg->mg_ptr = savepvn(name, namlen);
      |                                        ^~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
sv.c: In function 'Perl_sv_magic':
sv.c:5774:25: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
 5774 |         mg->mg_flags &= ~MGf_BYTES;
      |                         ^
sv.c: In function 'S_sv_unmagicext_flags':
sv.h:1008:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.h:1008:46: note: in definition of macro 'SvMAGICAL_off'
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
In file included from perl.h:4170:
sv.c: In function 'Perl_sv_add_backref':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
sv.c: In function 'Perl_sv_insert_flags':
sv.c:6315:9: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6315 |     i = littlelen - len;
      |         ^~~~~~~~~
sv.c:6317:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6317 |         big = SvGROW(bigstr, SvCUR(bigstr) + i + 1);
      |                                            ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:6317:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6317 |         big = SvGROW(bigstr, SvCUR(bigstr) + i + 1);
      |                                            ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:6317:15: note: in expansion of macro 'SvGROW'
 6317 |         big = SvGROW(bigstr, SvCUR(bigstr) + i + 1);
      |               ^~~~~~
sv.c:6325:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6325 |         SvCUR_set(bigstr, SvCUR(bigstr) + i);
      |                                         ^
sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
sv.c:6351:13: note: in expansion of macro 'Move'
 6351 |             Move(midend, mid, i,char);
      |             ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:6355:9: note: in expansion of macro 'SvCUR_set'
 6355 |         SvCUR_set(bigstr, mid - big);
      |         ^~~~~~~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
sv.c:6360:9: note: in expansion of macro 'Move'
 6360 |         Move(big, midend - i, i, char);
      |         ^~~~
sv.c: In function 'Perl_sv_replace':
sv.h:1008:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.h:1008:46: note: in definition of macro 'SvMAGICAL_off'
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.c: In function 'Perl_sv_clear':
sv.h:1008:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-14680065' to '4280287231' [-Wsign-conversion]
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
sv.h:1008:46: note: in definition of macro 'SvMAGICAL_off'
 1008 | #define SvMAGICAL_off(sv)       (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))
      |                                              ^~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:545:41: note: in expansion of macro 'HEK_LEN'
  545 |     hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek), \
      |                                         ^~~~~~~
sv.c:6612:31: note: in expansion of macro 'hv_deletehek'
 6612 |                         (void)hv_deletehek(PL_stashcache,
      |                               ^~~~~~~~~~~~
sv.c: In function 'S_curse':
sv.h:1004:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:1004:46: note: in definition of macro 'SvROK_off'
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:1154:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1048577' to '4293918719' [-Wsign-conversion]
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
sv.h:1154:46: note: in definition of macro 'SvOBJECT_off'
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
sv.c: In function 'Perl_sv_len_utf8_nomg':
sv.c:7198:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7198 |                     ulen = mg->mg_len;
      |                            ^~
sv.c: In function 'S_sv_pos_u2b_forwards':
sv.c:7251:14: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7251 |     return s - start;
      |            ~~^~~~~~~
sv.c: In function 'S_sv_pos_u2b_midway':
sv.c:7276:18: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7276 |         return s - start;
      |                ~~^~~~~~~
sv.c:7284:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7284 |     return send - start;
      |            ~~~~~^~~~~~~
sv.c: In function 'S_sv_pos_u2b_cached':
sv.c:7339:62: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7339 |                                               (*mgp)->mg_len - uoffset0);
      |                                                              ^
sv.c:7378:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7378 |                                       (*mgp)->mg_len - uoffset0);
      |                                                      ^
sv.c:7401:70: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7401 |             utf8_mg_pos_cache_update(sv, mgp, boffset, uoffset, send - start);
      |                                                                 ~~~~~^~~~~~~
embed.h:1952:90: note: in definition of macro 'utf8_mg_pos_cache_update'
 1952 | #define utf8_mg_pos_cache_update(a,b,c,d,e)     S_utf8_mg_pos_cache_update(aTHX_ a,b,c,d,e)
      |                                                                                          ^
sv.c: In function 'S_utf8_mg_len_cache_update':
sv.c:7518:22: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7518 |     (*mgp)->mg_len = ulen;
      |                      ^~~~
sv.c: In function 'S_utf8_mg_pos_cache_update':
sv.c:7602:26: warning: conversion from 'STRLEN' {aka 'unsigned int'} to 'float' may change value [-Wconversion]
 7602 |             ((float)((d) - (c))) * ((float)((d) - (c))) \
      |                          ^
sv.c:7637:28: note: in expansion of macro 'THREEWAY_SQUARE'
 7637 |             keep_earlier = THREEWAY_SQUARE(0, b, c, blen);
      |                            ^~~~~~~~~~~~~~~
sv.c:7602:49: warning: conversion from 'STRLEN' {aka 'unsigned int'} to 'float' may change value [-Wconversion]
 7602 |             ((float)((d) - (c))) * ((float)((d) - (c))) \
      |                                                 ^
sv.c:7637:28: note: in expansion of macro 'THREEWAY_SQUARE'
 7637 |             keep_earlier = THREEWAY_SQUARE(0, b, c, blen);
      |                            ^~~~~~~~~~~~~~~
sv.c: In function 'S_sv_pos_b2u_midway':
sv.c:7668:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7668 |     const STRLEN forw = target - s;
      |                         ^~~~~~
sv.c:7669:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7669 |     STRLEN backw = end - target;
      |                    ^~~
sv.c: In function 'Perl_sv_pos_b2u_flags':
sv.c:7746:68: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7746 |                                               s + blen, mg->mg_len - cache[0]);
      |                                                                    ^
sv.c:7769:66: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7769 |             len = S_sv_pos_b2u_midway(aTHX_ s, send, s + blen, mg->mg_len);
      |                                                                ~~^~~~~~~~
sv.c: In function 'Perl_sv_cmp_locale_flags':
sv.c:8281:45: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8281 |         pv1 = sv_collxfrm_flags(sv1, &len1, flags);
      |                                             ^~~~~
embed.h:930:74: note: in definition of macro 'sv_collxfrm_flags'
  930 | #define sv_collxfrm_flags(a,b,c)        Perl_sv_collxfrm_flags(aTHX_ a,b,c)
      |                                                                          ^
sv.c:8285:45: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8285 |         pv2 = sv_collxfrm_flags(sv2, &len2, flags);
      |                                             ^~~~~
embed.h:930:74: note: in definition of macro 'sv_collxfrm_flags'
  930 | #define sv_collxfrm_flags(a,b,c)        Perl_sv_collxfrm_flags(aTHX_ a,b,c)
      |                                                                          ^
sv.c:8291:51: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8291 |         pv1 = sv1 ? sv_collxfrm_flags(sv1, &len1, flags) : (char *) NULL;
      |                                                   ^~~~~
embed.h:930:74: note: in definition of macro 'sv_collxfrm_flags'
  930 | #define sv_collxfrm_flags(a,b,c)        Perl_sv_collxfrm_flags(aTHX_ a,b,c)
      |                                                                          ^
sv.c:8292:51: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8292 |         pv2 = sv2 ? sv_collxfrm_flags(sv2, &len2, flags) : (char *) NULL;
      |                                                   ^~~~~
embed.h:930:74: note: in definition of macro 'sv_collxfrm_flags'
  930 | #define sv_collxfrm_flags(a,b,c)        Perl_sv_collxfrm_flags(aTHX_ a,b,c)
      |                                                                          ^
sv.c: In function 'Perl_sv_collxfrm_flags':
sv.h:1852:49: warning: conversion to 'U32' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |      (const char*) sv_2pv_flags(sv, &len, (flags|SV_CONST_RETURN)))
      |                                           ~~~~~~^~~~~~~~~~~~~~~~~
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
sv.c:8370:13: note: in expansion of macro 'SvPV_flags_const'
 8370 |         s = SvPV_flags_const(sv, len, flags);
      |             ^~~~~~~~~~~~~~~~
sv.c:8378:26: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8378 |             mg->mg_len = xlen;
      |                          ^~~~
sv.c:8389:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8389 |         *nxp = mg->mg_len;
      |                ^~
sv.c: In function 'S_sv_gets_append_to_utf8':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:8408:5: note: in expansion of macro 'SvCUR_set'
 8408 |     SvCUR_set(sv,append);
      |     ^~~~~~~~~
sv.c:8411:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8411 |     return (SvCUR(sv) - append) ? SvPVX(sv) : NULL;
      |                       ^
sv.c: In function 'S_sv_gets_read_record':
sv.c:8420:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8420 |     char *buffer = SvGROW(sv, (STRLEN)(recsize + append + 1)) + append;
      |                                                ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:8420:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8420 |     char *buffer = SvGROW(sv, (STRLEN)(recsize + append + 1)) + append;
      |                                                ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:8420:20: note: in expansion of macro 'SvGROW'
 8420 |     char *buffer = SvGROW(sv, (STRLEN)(recsize + append + 1)) + append;
      |                    ^~~~~~
sv.c:8479:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8479 |                     STRLEN bufp_offset = bufp - buffer;
      |                                          ^~~~
sv.c:8497:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8497 |                         readsize = skip - (bend - bufp) + recsize - charcount - 1;
      |                                         ^
sv.c:8498:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8498 |                     buffer = SvGROW(sv, append + bytesread + readsize + 1) + append;
      |                                                            ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:8498:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8498 |                     buffer = SvGROW(sv, append + bytesread + readsize + 1) + append;
      |                                                            ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:8498:30: note: in expansion of macro 'SvGROW'
 8498 |                     buffer = SvGROW(sv, append + bytesread + readsize + 1) + append;
      |                              ^~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:8525:5: note: in expansion of macro 'SvCUR_set'
 8525 |     SvCUR_set(sv, bytesread + append);
      |     ^~~~~~~~~
sv.c:8527:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8527 |     return (SvCUR(sv) - append) ? SvPVX(sv) : NULL;
      |                       ^
sv.c: In function 'Perl_sv_gets':
sv.c:8750:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8750 |     if ((I32)(SvLEN(sv) - append) <= cnt + 1) {
      |                         ^
sv.c:8756:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8756 |             shortbuffered = cnt - SvLEN(sv) + append + 1;
      |                                 ^
sv.c:8756:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8756 |             shortbuffered = cnt - SvLEN(sv) + append + 1;
      |                                             ^
sv.c:8756:29: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8756 |             shortbuffered = cnt - SvLEN(sv) + append + 1;
      |                             ^~~
sv.c:8800:52: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8800 |                 p = (STDCHAR *)memchr(ptr, rslast, cnt);
      |                                                    ^~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:8803:21: note: in expansion of macro 'Copy'
 8803 |                     Copy(ptr, bp, got, STDCHAR);
      |                     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:8809:17: note: in expansion of macro 'Copy'
 8809 |                 Copy(ptr, bp, cnt, STDCHAR);
      |                 ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:8816:17: note: in expansion of macro 'Copy'
 8816 |                 Copy(ptr, bp, cnt, char);            /* this     |  eat */
      |                 ^~~~
sv.c:8830:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8830 |             bpx = bp - (STDCHAR*)SvPVX_const(sv); /* box up before relocation */
      |                   ^~
sv.c:8833:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |                                  ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:8833:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |                                           ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:8833:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |                                  ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:8833:13: note: in expansion of macro 'SvGROW'
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |             ^~~~~~
sv.c:8833:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |                                           ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:8833:13: note: in expansion of macro 'SvGROW'
 8833 |             SvGROW(sv, SvLEN(sv) + append + cnt + 2);
      |             ^~~~~~
sv.c:8860:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8860 |         bpx = bp - (STDCHAR*)SvPVX_const(sv);
      |               ^~
sv.c:8881:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8881 |         bpx = bp - (STDCHAR*)SvPVX_const(sv);   /* box up before relocation */
      |               ^~
sv.c:8883:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8883 |         SvGROW(sv, bpx + cnt + 2);
      |                        ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
sv.c:8883:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8883 |         SvGROW(sv, bpx + cnt + 2);
      |                        ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
sv.c:8883:9: note: in expansion of macro 'SvGROW'
 8883 |         SvGROW(sv, bpx + cnt + 2);
      |         ^~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:8912:5: note: in expansion of macro 'SvCUR_set'
 8912 |     SvCUR_set(sv, bp - (STDCHAR*)SvPVX_const(sv));      /* set length */
      |     ^~~~~~~~~
sv.c:8944:46: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8944 |             sv_catpvn_nomg(sv, (char *) buf, cnt);
      |                                              ^~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
sv.c:8944:13: note: in expansion of macro 'sv_catpvn_nomg'
 8944 |             sv_catpvn_nomg(sv, (char *) buf, cnt);
      |             ^~~~~~~~~~~~~~
sv.c:8946:41: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8946 |             sv_setpvn(sv, (char *) buf, cnt);   /* "nomg" is implied */
      |                                         ^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.c:8981:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8981 |     return (SvCUR(sv) - append) ? SvPVX(sv) : NULL;
      |                       ^
sv.c: In function 'Perl_sv_inc_nomg':
sv.h:343:25: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                         ^
sv.c:9028:13: note: in expansion of macro 'SvFLAGS'
 9028 |     flags = SvFLAGS(sv);
      |             ^~~~~~~
sv.h:343:25: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                         ^
sv.c:9033:17: note: in expansion of macro 'SvFLAGS'
 9033 |         flags = SvFLAGS(sv);
      |                 ^~~~~~~
sv.h:888:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536936193' to '3758031103' [-Wsign-conversion]
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
sv.h:888:46: note: in definition of macro 'SvOK_off_exc_UV'
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
sv.c:9044:23: note: in expansion of macro 'SvIOK_only_UV'
 9044 |                 (void)SvIOK_only_UV(sv);
      |                       ^~~~~~~~~~~~~
sv.c: In function 'Perl_sv_dec_nomg':
sv.h:343:25: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                         ^
sv.c:9214:13: note: in expansion of macro 'SvFLAGS'
 9214 |     flags = SvFLAGS(sv);
      |             ^~~~~~~
sv.h:888:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536936193' to '3758031103' [-Wsign-conversion]
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
sv.h:888:46: note: in definition of macro 'SvOK_off_exc_UV'
  888 |                                  SvFLAGS(sv) &= ~(SVf_OK|               \
      |                                              ^~
sv.c:9226:23: note: in expansion of macro 'SvIOK_only_UV'
 9226 |                 (void)SvIOK_only_UV(sv);
      |                       ^~~~~~~~~~~~~
sv.c: In function 'Perl_sv_mortalcopy_flags':
sv.c:9350:36: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 9350 |     sv_setsv_flags(sv,oldstr,flags & ~SV_GMAGIC);
      |                                    ^
embed.h:710:63: note: in definition of macro 'sv_setsv_flags'
  710 | #define sv_setsv_flags(a,b,c)   Perl_sv_setsv_flags(aTHX_ a,b,c)
      |                                                               ^
sv.c:9350:36: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 9350 |     sv_setsv_flags(sv,oldstr,flags & ~SV_GMAGIC);
embed.h:710:63: note: in definition of macro 'sv_setsv_flags'
  710 | #define sv_setsv_flags(a,b,c)   Perl_sv_setsv_flags(aTHX_ a,b,c)
      |                                                               ^
sv.c: In function 'Perl_newSVhek':
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
sv.c:9532:31: note: in expansion of macro 'HEK_LEN'
 9532 |             STRLEN utf8_len = HEK_LEN(hek);
      |                               ^~~~~~~
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
sv.c:9544:53: note: in expansion of macro 'HEK_LEN'
 9544 |             SV * const sv = newSVpvn (HEK_KEY(hek), HEK_LEN(hek));
      |                                                     ^~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:9556:13: note: in expansion of macro 'SvCUR_set'
 9556 |             SvCUR_set(sv, HEK_LEN(hek));
      |             ^~~~~~~~~
sv.c: In function 'Perl_newSVpvn_share':
sv.c:9591:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9591 |         STRLEN tmplen = -len;
      |                         ^
sv.c:9595:15: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 9595 |         len = tmplen;
      |               ^~~~~~
In file included from hv.h:673:
hv_func.h:107:79: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  107 |         ? sbox32_hash_with_state((state + __PERL_HASH_STATE_BYTES),(U8*)(str),(len))    \
      |                                                                               ^~~~~
hv_func.h:115:14: note: in expansion of macro '_PERL_HASH_WITH_STATE'
  115 |     (hash) = _PERL_HASH_WITH_STATE((state),(U8*)(str),(len))
      |              ^~~~~~~~~~~~~~~~~~~~~
hv_func.h:131:5: note: in expansion of macro 'PERL_HASH_WITH_STATE'
  131 |     PERL_HASH_WITH_STATE(PL_hash_state,hash,(U8*)(str),(len))
      |     ^~~~~~~~~~~~~~~~~~~~
sv.c:9598:9: note: in expansion of macro 'PERL_HASH'
 9598 |         PERL_HASH(hash, src, len);
      |         ^~~~~~~~~
hv_func.h:59:97: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   59 | # define __PERL_HASH_WITH_STATE(state,str,len) (U32)zaphod32_hash_with_state((state),(U8*)(str),(len))
      |                                                                                                 ^~~~~
hv_func.h:108:11: note: in expansion of macro '__PERL_HASH_WITH_STATE'
  108 |         : __PERL_HASH_WITH_STATE((state),(str),(len)))
      |           ^~~~~~~~~~~~~~~~~~~~~~
hv_func.h:115:14: note: in expansion of macro '_PERL_HASH_WITH_STATE'
  115 |     (hash) = _PERL_HASH_WITH_STATE((state),(U8*)(str),(len))
      |              ^~~~~~~~~~~~~~~~~~~~~
hv_func.h:131:5: note: in expansion of macro 'PERL_HASH_WITH_STATE'
  131 |     PERL_HASH_WITH_STATE(PL_hash_state,hash,(U8*)(str),(len))
      |     ^~~~~~~~~~~~~~~~~~~~
sv.c:9598:9: note: in expansion of macro 'PERL_HASH'
 9598 |         PERL_HASH(hash, src, len);
      |         ^~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:9603:5: note: in expansion of macro 'SvCUR_set'
 9603 |     SvCUR_set(sv, len);
      |     ^~~~~~~~~
sv.c: In function 'Perl_newSVpv_share':
sv.c:9626:32: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 9626 |     return newSVpvn_share(src, strlen(src), hash);
      |                                ^~~~~~~~~~~
embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
sv.c: In function 'Perl_newRV_noinc':
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.c: In function 'Perl_sv_resetpvn':
sv.c:9887:42: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9887 |             const U32 count = mg->mg_len / sizeof(PMOP**);
      |                                          ^
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.c: In function 'Perl_sv_pvn_force_flags':
sv.c:10166:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
10166 |         s = sv_2pv_flags(sv, &len, flags &~ SV_GMAGIC);
      |                                          ^
embed.h:584:61: note: in definition of macro 'sv_2pv_flags'
  584 | #define sv_2pv_flags(a,b,c)     Perl_sv_2pv_flags(aTHX_ a,b,c)
      |                                                             ^
sv.c: In function 'Perl_newSVrv':
sv.h:1453:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.h:1453:42: note: in definition of macro 'SvPV_free'
 1453 |                              SvFLAGS(sv) &= ~SVf_OOK;                   \
      |                                          ^~
sv.c:10423:9: note: in expansion of macro 'prepare_SV_for_RV'
10423 |         prepare_SV_for_RV(rv);
      |         ^~~~~~~~~~~~~~~~~
sv.c: In function 'S_sv_unglob':
sv.h:1000:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16777217' to '4278190079' [-Wsign-conversion]
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
sv.h:1000:46: note: in definition of macro 'SvFAKE_off'
 1000 | #define SvFAKE_off(sv)          (SvFLAGS(sv) &= ~SVf_FAKE)
      |                                              ^~
gv.h:178:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
  178 | #define GvMULTI_off(gv)         (GvFLAGS(gv) &= ~GVf_MULTI)
      |                                              ^~
gv.h:178:46: note: in definition of macro 'GvMULTI_off'
  178 | #define GvMULTI_off(gv)         (GvFLAGS(gv) &= ~GVf_MULTI)
      |                                              ^~
sv.h:2387:22: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
 2387 |         (SvFLAGS(sv) &= ~SVpgv_GP);                                    \
      |                      ^~
sv.h:2387:22: note: in definition of macro 'isGV_with_GP_off'
 2387 |         (SvFLAGS(sv) &= ~SVpgv_GP);                                    \
      |                      ^~
sv.c:10655:21: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
10655 |         SvFLAGS(sv) &= ~SVTYPEMASK;
      |                     ^~
sv.c: In function 'Perl_sv_unref_flags':
sv.h:1004:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.h:1004:46: note: in definition of macro 'SvROK_off'
 1004 | #define SvROK_off(sv)           (SvFLAGS(sv) &= ~(SVf_ROK))
      |                                              ^~
sv.c: In function 'Perl_sv_setpviv':
sv.c:10781:29: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10781 |     sv_setpvn(sv, ptr, ebuf - ptr);
      |                        ~~~~~^~~~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv.c: In function 'S_sprintf_arg_num_val':
sv.c:11142:14: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
11142 |         iv = uv;
      |              ^~
sv.c: In function 'S_F0convert':
sv.c:11217:20: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
11217 |             *--p = '0' + dig;
      |                    ^~~
sv.c:11221:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11221 |         *len = endbuf - p;
      |                ^~~~~~
sv.c: In function 'S_format_hexfp':
sv.c:11764:26: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
11764 |               vshr[1] |= (vshr[0] & (0xF >> (4 - n))) << (4 - n);
      |                          ^
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
sv.c:11822:25: note: in expansion of macro 'Move'
11822 |                         Move(v0, v0 + 1, vn - 1, char);
      |                         ^~~~
sv.c:11833:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
11833 |                   subnormal ? precis - vn + 1 :
      |                                      ^
sv.c:11834:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11834 |                   precis - (vlnz - vhex);
      |                          ^
sv.c:11889:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11889 |     elen = p - buf;
      |            ^
sv.c:11896:10: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11896 |     elen += my_snprintf(p, bufsize - elen,
      |          ^~
sv.c: In function 'Perl_sv_vcatpvfn_flags':
sv.c:12101:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12101 |                 STRLEN need = SvCUR(sv) + (q - fmtstart) + 1;
      |                                         ^
sv.c:12115:58: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12115 |                 S_sv_catpvn_simple(aTHX_ sv, fmtstart, q - fmtstart);
      |                                                        ~~^~~~~~~~~~
hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
sv.c:12524:28: note: in expansion of macro 'HEK_LEN'
12524 |                     elen = HEK_LEN(hek);
      |                            ^~~~~~~
sv.c:12745:30: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
12745 |                         uv = iv;
      |                              ^~
sv.c:12769:40: warning: conversion to 'UV' {aka 'long unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12769 |                         case 't': uv = va_arg(*args, ptrdiff_t);     break;
      |                                        ^~~~~~
sv.c:12827:34: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
12827 |                         *--ptr = '0' + dig;
      |                                  ^~~
sv.c:12835:34: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
12835 |                         *--ptr = '0' + dig;
      |                                  ^~~
embed.h:773:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
embed.h:773:49: note: in definition of macro 'uvoffuni_to_utf8_flags_msgs'
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:75:37: note: in expansion of macro 'uvchr_to_utf8_flags_msgs'
   75 |                                     uvchr_to_utf8_flags_msgs(d,uv,flags, 0)
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:73:37: note: in expansion of macro 'uvchr_to_utf8_flags'
   73 | #define uvchr_to_utf8(a,b)          uvchr_to_utf8_flags(a,b,0)
      |                                     ^~~~~~~~~~~~~~~~~~~
sv.c:12854:32: note: in expansion of macro 'uvchr_to_utf8'
12854 |                         elen = uvchr_to_utf8((U8*)eptr, uv) - (U8*)ebuf;
      |                                ^~~~~~~~~~~~~
sv.c:12866:34: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
12866 |                         dig = uv % base;
      |                                  ^
sv.c:12867:34: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
12867 |                         *--ptr = '0' + dig;
      |                                  ^~~
sv.c:12868:33: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
12868 |                     } while (uv /= base);
      |                                 ^~
sv.c:12871:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12871 |                 elen = (ebuf + sizeof ebuf) - ptr;
      |                        ^
handy.h:290:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  290 | #define BIT_DIGITS(N)   (((N)*146)/485 + 1)  /* log10(2) =~ 146/485 */
      |                         ^
sv.c:13100:30: note: in expansion of macro 'BIT_DIGITS'
13100 |                     digits = BIT_DIGITS(i);
      |                              ^~~~~~~~~~
sv.c:13237:28: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13237 |                     base = precis;
      |                            ^~~~~~
sv.c:13238:35: warning: conversion from 'int' to 'char' may change value [-Wconversion]
13238 |                     do { *--ptr = '0' + (base % 10); } while (base /= 10);
      |                                   ^~~
sv.c:13242:28: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13242 |                     base = width;
      |                            ^~~~~
sv.c:13243:35: warning: conversion from 'int' to 'char' may change value [-Wconversion]
13243 |                     do { *--ptr = '0' + (base % 10); } while (base /= 10);
      |                                   ^~~
sv.c:13276:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13276 |                     elen = ((intsize == 'q')
      |                            ^
perl.h:7171:13: note: in definition of macro 'WITH_LC_NUMERIC_SET_TO_NEEDED_IN'
 7171 |             block;                                                          \
      |             ^~~~~
sv.c:13322:63: warning: conversion from 'int' to 'char' may change value [-Wconversion]
13322 |                     case 'c':  *(va_arg(*args, char*))      = i; break;
      |                                                               ^
sv.c:13323:63: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
13323 |                     case 'h':  *(va_arg(*args, short*))     = i; break;
      |                                                               ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
sv.c:13474:13: note: in expansion of macro 'SvCUR_set'
13474 |             SvCUR_set(sv, s - SvPVX_const(sv));
      |             ^~~~~~~~~
sv.c: In function 'Perl_parser_dup':
sv.c:13584:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13584 |                     (proto->lex_brackets < 120 ? 120 : proto->lex_brackets));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
sv.c:13586:52: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13586 |                     (proto->lex_casemods < 12 ? 12 : proto->lex_casemods));
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
sv.c: In function 'Perl_mg_dup':
sv.c:13917:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
13917 |                 nmg->mg_ptr     = SAVEPVN(nmg->mg_ptr, nmg->mg_len);
      |                                                        ~~~^~~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
sv.c:13917:35: note: in expansion of macro 'SAVEPVN'
13917 |                 nmg->mg_ptr     = SAVEPVN(nmg->mg_ptr, nmg->mg_len);
      |                                   ^~~~~~~
sv.c: In function 'Perl_rvpv_dup':
sv.h:2025:47: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1342177281' to '2952790015' [-Wsign-conversion]
 2025 | #define SvIsCOW_off(sv)          (SvFLAGS(sv) &= ~(SVf_IsCOW|SVppv_STATIC))
      |                                               ^~
sv.h:2025:47: note: in definition of macro 'SvIsCOW_off'
 2025 | #define SvIsCOW_off(sv)          (SvFLAGS(sv) &= ~(SVf_IsCOW|SVppv_STATIC))
      |                                               ^~
sv.c: In function 'S_sv_dup_common':
hv.h:424:38: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
sv.c:14223:23: note: in expansion of macro 'MUTABLE_SV'
14223 |                 dsv = MUTABLE_SV(gv_stashpvn(HEK_KEY(hvname), HEK_LEN(hvname),
      |                       ^~~~~~~~~~
sv.c:14223:34: note: in expansion of macro 'gv_stashpvn'
14223 |                 dsv = MUTABLE_SV(gv_stashpvn(HEK_KEY(hvname), HEK_LEN(hvname),
      |                                  ^~~~~~~~~~~
sv.c:14223:63: note: in expansion of macro 'HEK_LEN'
14223 |                 dsv = MUTABLE_SV(gv_stashpvn(HEK_KEY(hvname), HEK_LEN(hvname),
      |                                                               ^~~~~~~
hv.h:424:38: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:243:58: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                          ^
sv.c:14235:54: note: in expansion of macro 'HEK_LEN'
14235 |                 stash = gv_stashpvn(HEK_KEY(hvname), HEK_LEN(hvname),
      |                                                      ^~~~~~~
sv.c:14268:25: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
14268 |     SvFLAGS(dsv)        &= ~SVf_OOK;            /* don't propagate OOK hack */
      |                         ^~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:14465:21: note: in expansion of macro 'Newx'
14465 |                     Newx(dst_ary, AvMAX((const AV *)ssv)+1, SV*);
      |                     ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:14518:29: note: in expansion of macro 'Newx'
14518 |                             Newx(daux->xhv_name_u.xhvnameu_names, count, HEK *);
      |                             ^~~~
cv.h:196:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
cv.h:196:46: note: in definition of macro 'CvSLABBED_off'
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
sv.c: In function 'Perl_cx_dup':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:14681:5: note: in expansion of macro 'Newx'
14681 |     Newx(ncxs, max + 1, PERL_CONTEXT);
      |     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:14683:5: note: in expansion of macro 'Copy'
14683 |     Copy(cxs, ncxs, max + 1, PERL_CONTEXT);
      |     ^~~~
sv.c: In function 'Perl_ss_dup':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:14902:5: note: in expansion of macro 'Newx'
14902 |     Newx(nss, max, ANY);
      |     ^~~~
sv.c:15101:16: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15101 |             ix -= uv >> SAVE_TIGHT_SHIFT;
      |                ^~
sv.c:15101:19: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
15101 |             ix -= uv >> SAVE_TIGHT_SHIFT;
      |                   ^~
sv.c: In function 'do_mark_cloneable_stash':
sv.c:15187:29: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
15187 |                 SvFLAGS(sv) &= ~SVphv_CLONEABLE;
      |                             ^~
sv.c: In function 'perl_clone':
hv.h:366:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:366:46: note: in definition of macro 'HvSHAREKEYS_off'
  366 | #define HvSHAREKEYS_off(hv)     (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
      |                                              ^~
hv.h:352:54: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  352 | #define HvTOTALKEYS(hv)         (((XPVHV*) SvANY(hv))->xhv_keys)
      |                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
embed.h:259:56: note: in definition of macro 'hv_ksplit'
  259 | #define hv_ksplit(a,b)          Perl_hv_ksplit(aTHX_ a,b)
      |                                                        ^
sv.c:15594:26: note: in expansion of macro 'HvTOTALKEYS'
15594 |     hv_ksplit(PL_strtab, HvTOTALKEYS(proto_perl->Istrtab));
      |                          ^~~~~~~~~~~
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15656:5: note: in expansion of macro 'Newx'
15656 |     Newx(PL_stashpad, PL_stashpadmax, HV *);
      |     ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15731:9: note: in expansion of macro 'Newx'
15731 |         Newx(PL_exitlist, PL_exitlistlen, PerlExitListEntry);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:15732:9: note: in expansion of macro 'Copy'
15732 |         Copy(proto_perl->Iexitlist, PL_exitlist, PL_exitlistlen, PerlExitListEntry);
      |         ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15739:9: note: in expansion of macro 'Newx'
15739 |         Newx(PL_my_cxt_list, PL_my_cxt_size, void *);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:15740:9: note: in expansion of macro 'Copy'
15740 |         Copy(proto_perl->Imy_cxt_list, PL_my_cxt_list, PL_my_cxt_size, void *);
      |         ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15881:9: note: in expansion of macro 'Newx'
15881 |         Newx(PL_tmps_stack, PL_tmps_max, SV*);
      |         ^~~~
handy.h:2761:99: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15887:9: note: in expansion of macro 'Newx'
15887 |         Newx(PL_markstack, i, I32);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:15892:9: note: in expansion of macro 'Copy'
15892 |         Copy(proto_perl->Imarkstack, PL_markstack,
      |         ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
sv.c:15897:9: note: in expansion of macro 'Newx'
15897 |         Newx(PL_scopestack, PL_scopestack_max, I32);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
sv.c:15898:9: note: in expansion of macro 'Copy'
15898 |         Copy(proto_perl->Iscopestack, PL_scopestack, PL_scopestack_ix, I32);
      |         ^~~~
sv.c: In function 'S_unreferenced_to_tmp_stack':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
sv.c: In function 'Perl_clone_params_new':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
In file included from perl.h:5782:
sv.c: In function 'Perl_sv_cat_decode':
pp.h:489:51: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  489 | #define mPUSHp(p,l)     PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
      |                                                   ^~~
pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
pp.h:489:31: note: in expansion of macro 'newSVpvn_flags'
  489 | #define mPUSHp(p,l)     PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
      |                               ^~~~~~~~~~~~~~
sv.c:16285:9: note: in expansion of macro 'mPUSHp'
16285 |         mPUSHp(tstr, tlen);
      |         ^~~~~~
sv.c: In function 'S_find_hash_subscript':
hv.h:284:25: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  284 | #define HvMAX(hv)       ((XPVHV*)  SvANY(hv))->xhv_max
      |                         ^
sv.c:16331:12: note: in expansion of macro 'HvMAX'
16331 |     for (i=HvMAX(hv); i>=0; i--) {
      |            ^~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o taint.o taint.c
In file included from perl.h:7246,
                 from taint.c:24:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
taint.c: In function 'Perl_taint_env':
taint.c:198:64: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  198 |         SV * const * const svp = hv_fetch(GvHVn(PL_envgv), *e, strlen(*e), FALSE);
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
taint.c:198:34: note: in expansion of macro 'hv_fetch'
  198 |         SV * const * const svp = hv_fetch(GvHVn(PL_envgv), *e, strlen(*e), FALSE);
      |                                  ^~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o toke.o toke.c
In file included from perl.h:7246,
                 from toke.c:40:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
toke.c: In function 'S_missingterm':
toke.c:702:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  702 |             len = nl - s;
      |                   ^~
toke.c:722:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  722 |             len = end - tmpbuf;
      |                   ^~~
toke.c: In function 'Perl_lex_start':
toke.c:814:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32' to '4294967264' [-Wsign-conversion]
  814 |     if (flags && flags & ~LEX_START_FLAGS)
      |                        ^
In file included from perl.h:5810:
toke.c: In function 'Perl_lex_grow_linestr':
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1072:18: note: in expansion of macro 'PL_parser'
 1072 |     bufend_pos = PL_parser->bufend - buf;
      |                  ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1073:18: note: in expansion of macro 'PL_parser'
 1073 |     bufptr_pos = PL_parser->bufptr - buf;
      |                  ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1074:21: note: in expansion of macro 'PL_parser'
 1074 |     oldbufptr_pos = PL_parser->oldbufptr - buf;
      |                     ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1075:24: note: in expansion of macro 'PL_parser'
 1075 |     oldoldbufptr_pos = PL_parser->oldoldbufptr - buf;
      |                        ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1076:21: note: in expansion of macro 'PL_parser'
 1076 |     linestart_pos = PL_parser->linestart - buf;
      |                     ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1077:20: note: in expansion of macro 'PL_parser'
 1077 |     last_uni_pos = PL_parser->last_uni ? PL_parser->last_uni - buf : 0;
      |                    ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1078:20: note: in expansion of macro 'PL_parser'
 1078 |     last_lop_pos = PL_parser->last_lop ? PL_parser->last_lop - buf : 0;
      |                    ^~~~~~~~~
toke.c:1079:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1079 |     re_eval_start_pos = (current && PL_parser->lex_shared->re_eval_start) ?
      |                         ^
toke.c: In function 'Perl_lex_stuff_pvn':
toke.c:1127:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 1127 |     if (flags & ~(LEX_STUFF_UTF8))
      |               ^
In file included from perl.h:3003:
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:1140:13: note: in expansion of macro 'Move'
 1140 |             Move(bufptr, bufptr+len+highhalf, PL_parser->bufend+1-bufptr, char);
      |             ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:1166:13: note: in expansion of macro 'Move'
 1166 |             Move(bufptr, bufptr+len-highhalf, PL_parser->bufend+1-bufptr, char);
      |             ^~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:1186:13: note: in expansion of macro 'Move'
 1186 |             Move(bufptr, bufptr+len, PL_parser->bufend+1-bufptr, char);
      |             ^~~~
toke.c: In function 'Perl_lex_unstuff':
toke.c:1283:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1283 |     unstuff_len = ptr - buf;
      |                   ^~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:1284:5: note: in expansion of macro 'Move'
 1284 |     Move(ptr, buf, bufend+1-ptr, char);
      |     ^~~~
toke.c: In function 'Perl_lex_discard_to':
toke.c:1353:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1353 |     discard_len = ptr - buf;
      |                   ^~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:1362:5: note: in expansion of macro 'Move'
 1362 |     Move(ptr, buf, PL_parser->bufend+1-ptr, char);
      |     ^~~~
toke.c: In function 'Perl_lex_next_chunk':
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1449:26: note: in expansion of macro 'PL_parser'
 1449 |         old_bufend_pos = PL_parser->bufend - buf;
      |                          ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1450:22: note: in expansion of macro 'PL_parser'
 1450 |         bufptr_pos = PL_parser->bufptr - buf;
      |                      ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1451:25: note: in expansion of macro 'PL_parser'
 1451 |         oldbufptr_pos = PL_parser->oldbufptr - buf;
      |                         ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1452:28: note: in expansion of macro 'PL_parser'
 1452 |         oldoldbufptr_pos = PL_parser->oldoldbufptr - buf;
      |                            ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1453:25: note: in expansion of macro 'PL_parser'
 1453 |         linestart_pos = PL_parser->linestart - buf;
      |                         ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1454:24: note: in expansion of macro 'PL_parser'
 1454 |         last_uni_pos = PL_parser->last_uni ? PL_parser->last_uni - buf : 0;
      |                        ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:1455:24: note: in expansion of macro 'PL_parser'
 1455 |         last_lop_pos = PL_parser->last_lop ? PL_parser->last_lop - buf : 0;
      |                        ^~~~~~~~~
toke.c:1499:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1499 |                                    PL_parser->bufend - PL_parser->bufptr,
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
toke.c:1497:13: note: in expansion of macro 'UNLIKELY'
 1497 |         if (UNLIKELY(! is_utf8_string_loc(
      |             ^~~~~~~~
toke.c:1497:24: note: in expansion of macro 'is_utf8_string_loc'
 1497 |         if (UNLIKELY(! is_utf8_string_loc(
      |                        ^~~~~~~~~~~~~~~~~~
toke.c: In function 'Perl_lex_peek_unichar':
toke.c:1557:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 1557 |     if (flags & ~(LEX_KEEP_PREVIOUS))
      |               ^
toke.c:1583:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1583 |         unichar = utf8n_to_uvchr((U8*)s, bufend-s, &retlen, UTF8_CHECK_ONLY);
      |                                          ~~~~~~^~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
toke.c:1583:19: note: in expansion of macro 'utf8n_to_uvchr'
 1583 |         unichar = utf8n_to_uvchr((U8*)s, bufend-s, &retlen, UTF8_CHECK_ONLY);
      |                   ^~~~~~~~~~~~~~
In file included from perl.h:5841:
embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
embed.h:769:33: note: in definition of macro 'utf8n_to_uvchr_msgs'
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
toke.c:1583:19: note: in expansion of macro 'utf8n_to_uvchr'
 1583 |         unichar = utf8n_to_uvchr((U8*)s, bufend-s, &retlen, UTF8_CHECK_ONLY);
      |                   ^~~~~~~~~~~~~~
toke.c: In function 'Perl_lex_read_unichar':
toke.c:1626:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
 1626 |     if (flags & ~(LEX_KEEP_PREVIOUS))
      |               ^
toke.c: In function 'S_incline':
toke.c:1878:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1878 |     if (*s == '"' && (t = (char *) memchr(s+1, '"', end - s))) {
      |                                                     ~~~~^~~
toke.c:1898:28: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1898 |         const STRLEN len = t - s;
      |                            ^
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
toke.c:1923:30: note: in expansion of macro 'hv_fetch'
 1923 |                 gv2 = *(GV**)hv_fetch(PL_defstash, tmpbuf2, tmplen2, TRUE);
      |                              ^~~~~~~~
toke.c:1938:53: warning: conversion to 'line_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1938 |                         SSize_t items = AvFILLp(av) - start;
      |                                                     ^
In file included from perl.h:4170:
av.h:81:25: warning: conversion to 'ssize_t' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   81 | #define AvFILLp(av)     ((XPVAV*)  SvANY(av))->xav_fill
      |                         ^
toke.c:1938:41: note: in expansion of macro 'AvFILLp'
 1938 |                         SSize_t items = AvFILLp(av) - start;
      |                                         ^~~~~~~
toke.c: In function 'S_update_debugger_info':
cop.h:660:37: warning: conversion to 'ssize_t' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ~~~~^~~~~~~~~~~
embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
toke.c:1979:26: note: in expansion of macro 'CopLINE'
 1979 |             av_store(av, CopLINE(PL_curcop), sv);
      |                          ^~~~~~~
toke.c: In function 'Perl_skipspace_flags':
toke.c:70:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   70 | #define PL_bufptr               (PL_parser->bufptr)
      |                                 ^
toke.c:2005:29: note: in expansion of macro 'PL_bufptr'
 2005 |         STRLEN bufptr_pos = PL_bufptr - SvPVX(PL_linestr);
      |                             ^~~~~~~~~
toke.c: In function 'S_check_uni':
toke.c:2040:51: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2040 |     if (s < PL_bufptr && memchr(s, '(', PL_bufptr - s))
      |                                                   ^
toke.c: In function 'S_force_word':
toke.c:2225:27: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2225 |           if (keyword(s2, len2, 0))
      |                           ^~~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c: In function 'S_tokeq':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:2443:5: note: in expansion of macro 'SvCUR_set'
 2443 |     SvCUR_set(sv, d - SvPVX_const(sv));
      |     ^~~~~~~~~
toke.c: In function 'S_sublex_push':
toke.c:2623:19: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-17' [-Wsign-conversion]
 2623 |     PL_in_eval &= ~EVAL_RE_REPARSING;
      |                   ^
toke.c: In function 'S_sublex_done':
toke.c:2696:39: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2696 |             PL_parser->herelines += l - PL_multi_end;
      |                                       ^
toke.c: In function 'Perl_get_and_check_backslash_N_name':
toke.c:2811:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2811 |     STRLEN context_len = e - context + 1; /* include all of \N{...} */
      |                          ^
toke.c:2827:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2827 |     char_name = newSVpvn_flags(s, e - s, (is_utf8) ? SVf_UTF8 : 0);
      |                                   ~~^~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
toke.c: In function 'S_scan_const':
toke.c:3099:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3099 |     SV *sv = newSV(send - start);       /* sv for the constant.  See note below
      |                    ~~~~~^~~~~~~
embed.h:387:50: note: in definition of macro 'newSV'
  387 | #define newSV(a)                Perl_newSV(aTHX_ a)
      |                                                  ^
toke.c:3262:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3262 |                 offset_to_max = max_ptr - SvPVX_const(sv);
      |                                 ^~~~~~~
embed.h:778:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  778 | #define valid_utf8_to_uvchr     Perl_valid_utf8_to_uvchr
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
embed.h:778:33: note: in definition of macro 'valid_utf8_to_uvchr'
  778 | #define valid_utf8_to_uvchr     Perl_valid_utf8_to_uvchr
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
embed.h:778:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  778 | #define valid_utf8_to_uvchr     Perl_valid_utf8_to_uvchr
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
embed.h:778:33: note: in definition of macro 'valid_utf8_to_uvchr'
  778 | #define valid_utf8_to_uvchr     Perl_valid_utf8_to_uvchr
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
toke.c:3383:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3383 |                         const STRLEN off = d - SvPVX(sv);
      |                                            ^
toke.c:3384:46: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3384 |                         const STRLEN extra = 1 + (send - s) + 1;
      |                                              ^
toke.c:3445:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3445 |                         extras = (range_max - 1) - (range_min + 1) + 1;
      |                                  ^
toke.c:3450:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3450 |                         extras = (range_max - 1) - UTF_CONTINUATION_MARK + 1;
      |                                  ^
toke.c:3462:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3462 |                 grow = (range_max - 1) - (range_min + 1) + 1;
      |                        ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:3484:17: note: in expansion of macro 'SvCUR_set'
 3484 |                 SvCUR_set(sv, d - SvPVX_const(sv));
      |                 ^~~~~~~~~
toke.c:3485:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3485 |                 offset_to_min = min_ptr - SvPVX_const(sv);
      |                                 ^~~~~~~
toke.c:3489:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3489 |                                              + (send - s)
      |                                              ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
toke.c:3489:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3489 |                                              + (send - s)
      |                                              ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
toke.c:3488:37: note: in expansion of macro 'SvGROW'
 3488 |                 d = offset_to_min + SvGROW(sv, SvCUR(sv)
      |                                     ^~~~~~
utf8.h:737:31: warning: conversion from 'int' to 'PERL_UINT_FAST8_T' {aka 'unsigned char'} may change value [-Wconversion]
  737 | #define UTF8_SAFE_SKIP(s, e)  (__ASSERT_((e) >= (s))                \
      |                               ^
toke.c:3605:31: note: in expansion of macro 'UTF8_SAFE_SKIP'
 3605 |                         len = UTF8_SAFE_SKIP(s, send);
      |                               ^~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:3802:29: note: in expansion of macro 'SvCUR_set'
 3802 |                             SvCUR_set(sv, d - SvPVX_const(sv));
      |                             ^~~~~~~~~
toke.c:3837:45: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 3837 |                                             + UVCHR_SKIP(uv)
      |                                             ^
toke.c:3838:45: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 3838 |                                             + (send - s)
      |                                             ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:3841:29: note: in expansion of macro 'SvCUR_set'
 3841 |                             SvCUR_set(sv, d - SvPVX_const(sv));
      |                             ^~~~~~~~~
toke.c:3904:62: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3904 |                 if (! (rbrace = (char *) memchr(s, '}', send - s))) {
      |                                                         ~~~~~^~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
toke.c:3949:25: note: in expansion of macro 'Copy'
 3949 |                         Copy(bslash, d, rbrace - bslash + 1, char);
      |                         ^~~~
toke.c:3957:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3957 |                         STRLEN len = e - s;
      |                                      ^
toke.c:3982:65: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 3982 |                             const STRLEN extra = OFFUNISKIP(uv) + (send - rbrace) + 1;
      |                                                                 ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:3984:29: note: in expansion of macro 'SvCUR_set'
 3984 |                             SvCUR_set(sv, d - SvPVX_const(sv));
      |                             ^~~~~~~~~
toke.c:4040:48: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4040 |                             const STRLEN off = d - SvPVX_const(sv);
      |                                                ^
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
toke.c:4099:37: note: in expansion of macro 'my_snprintf'
 4099 |                                     my_snprintf(hex_string, sizeof(hex_string),
      |                                     ^~~~~~~~~~~
toke.c:4115:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4115 |                                     const STRLEN off = d - SvPVX_const(sv);
      |                                                        ^
toke.c:4117:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4117 |                                                             str_end - str,
      |                                                             ~~~~~~~~^~~~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
toke.c:4116:46: note: in expansion of macro 'utf8n_to_uvchr'
 4116 |                                     U32 uv = utf8n_to_uvchr((U8 *) str,
      |                                              ^~~~~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
toke.c:4121:41: note: in expansion of macro 'my_snprintf'
 4121 |                                         my_snprintf(hex_string,
      |                                         ^~~~~~~~~~~
toke.c:4174:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4174 |                             const STRLEN extra = len + (send - s) + 1;
      |                                                      ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4176:29: note: in expansion of macro 'SvCUR_set'
 4176 |                             SvCUR_set(sv, d - SvPVX_const(sv));
      |                             ^~~~~~~~~
toke.c:4195:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4195 |                             const STRLEN extra = len + (send - rbrace) + 1;
      |                                                      ^
toke.c:4196:48: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4196 |                             const STRLEN off = d - SvPVX_const(sv);
      |                                                ^
toke.c:4292:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4292 |             STRLEN need = send - s + 1; /* See Note on sizing above. */
      |                           ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4294:13: note: in expansion of macro 'SvCUR_set'
 4294 |             SvCUR_set(sv, d - SvPVX_const(sv));
      |             ^~~~~~~~~
toke.c:4315:32: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4315 |             const STRLEN off = d - SvPVX(sv);
      |                                ^
toke.c:4316:34: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4316 |             const STRLEN extra = 2 + (send - s - 1) + 1;
      |                                  ^
toke.c:4327:28: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4327 |         const STRLEN off = d - SvPVX(sv);
      |                            ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4350:5: note: in expansion of macro 'SvCUR_set'
 4350 |     SvCUR_set(sv, d - SvPVX_const(sv));
      |     ^~~~~~~~~
toke.c:4392:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4392 |             sv = S_new_constant(aTHX_ start, s - start, key, keylen, sv, NULL,
      |                                              ~~^~~~~~~
toke.c: In function 'S_intuit_more':
toke.c:4460:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4460 |         const char * const send = (char *) memchr(s, ']', e - s);
      |                                                           ~~^~~
toke.c:4492:62: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4492 |                     if (len > 1 && gv_fetchpvn_flags(tmpbuf, len,
      |                                                              ^~~
embed.h:231:72: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
toke.c: In function 'S_intuit_method':
toke.c:4632:26: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4632 |     if (!keyword(tmpbuf, len, 0)) {
      |                          ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c: In function 'Perl_filter_add':
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4713:43: note: in expansion of macro 'PL_parser'
 4713 |                 STRLEN const bufptr_pos = PL_parser->bufptr - buf;
      |                                           ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4714:46: note: in expansion of macro 'PL_parser'
 4714 |                 STRLEN const oldbufptr_pos = PL_parser->oldbufptr - buf;
      |                                              ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4715:47: note: in expansion of macro 'PL_parser'
 4715 |                 STRLEN const oldoldbufptr_pos=PL_parser->oldoldbufptr-buf;
      |                                               ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4716:46: note: in expansion of macro 'PL_parser'
 4716 |                 STRLEN const linestart_pos = PL_parser->linestart - buf;
      |                                              ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4718:21: note: in expansion of macro 'PL_parser'
 4718 |                     PL_parser->last_uni ? PL_parser->last_uni - buf : 0;
      |                     ^~~~~~~~~
embedvar.h:227:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:4720:21: note: in expansion of macro 'PL_parser'
 4720 |                     PL_parser->last_lop ? PL_parser->last_lop - buf : 0;
      |                     ^~~~~~~~~
toke.c:4723:49: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4723 |                     newSVpvn(SvPVX(linestr), ++s-SvPVX(linestr));
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4735:17: note: in expansion of macro 'SvCUR_set'
 4735 |                 SvCUR_set(linestr, s - SvPVX(linestr));
      |                 ^~~~~~~~~
toke.c: In function 'Perl_filter_read':
toke.c:4790:35: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4790 |     unsigned int correct_length = maxlen < 0 ?  PERL_INT_MAX : maxlen;
      |                                   ^~~~~~
sv.h:1319:23: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
toke.c:4804:33: note: in expansion of macro 'SvCUR'
 4804 |             const int old_len = SvCUR(buf_sv);
      |                                 ^~~~~
toke.c:4807:45: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4807 |             SvGROW(buf_sv, (STRLEN)(old_len + correct_length + 1)) ;
      |                                             ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
toke.c:4807:45: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4807 |             SvGROW(buf_sv, (STRLEN)(old_len + correct_length + 1)) ;
      |                                             ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
toke.c:4807:13: note: in expansion of macro 'SvGROW'
 4807 |             SvGROW(buf_sv, (STRLEN)(old_len + correct_length + 1)) ;
      |             ^~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4815:13: note: in expansion of macro 'SvCUR_set'
 4815 |             SvCUR_set(buf_sv, old_len + len) ;
      |             ^~~~~~~~~
sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
embed.h:621:56: note: in definition of macro 'sv_gets'
  621 | #define sv_gets(a,b,c)          Perl_sv_gets(aTHX_ a,b,c)
      |                                                        ^
toke.c:4819:42: note: in expansion of macro 'SvCUR'
 4819 |             if (sv_gets(buf_sv, PL_rsfp, SvCUR(buf_sv)) == NULL) {
      |                                          ^~~~~
sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
toke.c:4833:43: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 4833 |         return FILTER_READ(idx+1, buf_sv, correct_length); /* recurse */
      |                                           ^~~~~~~~~~~~~~
embed.h:176:60: note: in definition of macro 'filter_read'
  176 | #define filter_read(a,b,c)      Perl_filter_read(aTHX_ a,b,c)
      |                                                            ^
toke.c:4833:16: note: in expansion of macro 'FILTER_READ'
 4833 |         return FILTER_READ(idx+1, buf_sv, correct_length); /* recurse */
      |                ^~~~~~~~~~~
toke.c:4855:47: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4855 |             sv_catpvn(buf_sv, SvEND(datasv), s-SvEND(datasv));
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
toke.c:4855:13: note: in expansion of macro 'sv_catpvn'
 4855 |             sv_catpvn(buf_sv, SvEND(datasv), s-SvEND(datasv));
      |             ^~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:4856:13: note: in expansion of macro 'SvCUR_set'
 4856 |             SvCUR_set(datasv, s-SvPVX(datasv));
      |             ^~~~~~~~~
sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
toke.c:4870:39: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 4870 |     ret = (*funcp)(aTHX_ idx, buf_sv, correct_length);
      |                                       ^~~~~~~~~~~~~~
toke.c: In function 'S_filter_gets':
toke.c:4894:38: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4894 |         return (sv_gets(sv, PL_rsfp, append));
      |                                      ^~~~~~
embed.h:621:56: note: in definition of macro 'sv_gets'
  621 | #define sv_gets(a,b,c)          Perl_sv_gets(aTHX_ a,b,c)
      |                                                        ^
toke.c: In function 'yyl_dollar':
toke.c:5229:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5229 |                     && (t = (char *) memchr(s, '}', PL_bufend - s))
      |                                                               ^
toke.c:5230:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5230 |                     && (t = (char *) memchr(t, '=', PL_bufend - t)))
      |                                                               ^
toke.c:5273:43: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5273 |                 if ((t2 = keyword(tmpbuf, len, 0))) {
      |                                           ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c: In function 'yyl_sub':
toke.c:5343:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5343 |             format_name = S_newSV_maybe_utf8(aTHX_ s, d - s);
      |                                                       ~~^~~
In file included from perl.h:4169:
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:5388:9: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 5388 |         COPLINE_SET_FROM_MULTI_END;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
toke.c: In function 'yyl_interpcasemod':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
toke.c:5496:17: note: in expansion of macro 'Renew'
 5496 |                 Renew(PL_lex_casestack, PL_lex_casemods + 2, char);
      |                 ^~~~~
toke.c: In function 'yyl_secondclass_keyword':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
toke.c:5554:31: note: in expansion of macro 'hv_fetch'
 5554 |             && (*pgvp = (GV**)hv_fetch(PL_globalstash, PL_tokenbuf, len, FALSE))
      |                               ^~~~~~~~
toke.c: In function 'yyl_qw':
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:5603:5: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 5603 |     COPLINE_SET_FROM_MULTI_END;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
toke.c:5633:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5633 |                 sv = newSVpvn_utf8(b, d-b, DO_UTF8(PL_lex_stuff));
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
toke.c:5633:22: note: in expansion of macro 'newSVpvn_utf8'
 5633 |                 sv = newSVpvn_utf8(b, d-b, DO_UTF8(PL_lex_stuff));
      |                      ^~~~~~~~~~~~~
toke.c: In function 'yyl_colon':
toke.c:5922:60: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5922 |             if (isLOWER(*s) && (tmp = keyword(PL_tokenbuf, len, 0))) {
      |                                                            ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:5947:17: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 5947 |                 COPLINE_SET_FROM_MULTI_END;
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
toke.c: In function 'yyl_leftcurly':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
toke.c:6116:9: note: in expansion of macro 'Renew'
 6116 |         Renew(PL_lex_brackstack, PL_lex_brackets + 10, char);
      |         ^~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:6310:22: note: in expansion of macro 'CopLINE'
 6310 |     pl_yylval.ival = CopLINE(PL_curcop);
      |                      ^~~~~~~
toke.c: In function 'yyl_leftsquare':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
toke.c:6561:9: note: in expansion of macro 'Renew'
 6561 |         Renew(PL_lex_brackstack, PL_lex_brackets + 10, char);
      |         ^~~~~
toke.c: In function 'yyl_leftpointy':
toke.c:6643:53: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6643 |         if (s[1] != '<' && !memchr(s,'>', PL_bufend - s))
      |                                                     ^
toke.c: In function 'yyl_sglquote':
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:6724:5: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 6724 |     COPLINE_SET_FROM_MULTI_END;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
toke.c: In function 'yyl_dblquote':
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:6761:9: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 6761 |         COPLINE_SET_FROM_MULTI_END;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
toke.c: In function 'yyl_croak_unrecognised':
toke.c:74:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   74 | #define PL_bufend               (PL_parser->bufend)
      |                                 ^
toke.c:6860:27: note: in expansion of macro 'PL_bufend'
 6860 |         STRLEN stravail = PL_bufend - s;
      |                           ^~~~~~~~~
toke.c: In function 'yyl_foreach':
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:6932:22: note: in expansion of macro 'CopLINE'
 6932 |     pl_yylval.ival = CopLINE(PL_curcop);
      |                      ^~~~~~~
toke.c: In function 'yyl_do':
toke.c:7018:39: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7018 |          && !keyword(PL_tokenbuf + 1, len, 0)) {
      |                                       ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c: In function 'yyl_fake_eof':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
toke.c:7307:21: note: in expansion of macro 'Newx'
 7307 |                     Newx(newargv,PL_origargc+3,char*);
      |                     ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
toke.c:7312:21: note: in expansion of macro 'Copy'
 7312 |                     Copy(PL_origargv+1, newargv+2, PL_origargc+1, char*);
      |                     ^~~~
toke.c: In function 'yyl_just_a_word':
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134283265' to '4160684031' [-Wsign-conversion]
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:1175:46: note: in definition of macro 'SvREADONLY_off'
 1175 | # define SvREADONLY_off(sv)     (SvFLAGS(sv) &=~(SVf_READONLY|SVf_PROTECT))
      |                                              ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
toke.c: In function 'yyl_word_or_keyword':
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:7927:26: note: in expansion of macro 'CopLINE'
 7927 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8111:26: note: in expansion of macro 'CopLINE'
 8111 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8125:26: note: in expansion of macro 'CopLINE'
 8125 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:374:9: note: in expansion of macro 'CopLINE_set'
  374 |         CopLINE_set(PL_curcop, PL_multi_end);   \
      |         ^~~~~~~~~~~
toke.c:8311:9: note: in expansion of macro 'COPLINE_SET_FROM_MULTI_END'
 8311 |         COPLINE_SET_FROM_MULTI_END;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8570:26: note: in expansion of macro 'CopLINE'
 8570 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8587:26: note: in expansion of macro 'CopLINE'
 8587 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8593:26: note: in expansion of macro 'CopLINE'
 8593 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8627:26: note: in expansion of macro 'CopLINE'
 8627 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:8636:26: note: in expansion of macro 'CopLINE'
 8636 |         pl_yylval.ival = CopLINE(PL_curcop);
      |                          ^~~~~~~
toke.c: In function 'yyl_key_core':
toke.c:8688:42: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8688 |         || (!(key = keyword(PL_tokenbuf, len, 1)) && *s == '\''))
      |                                          ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c: In function 'yyl_keylookup':
toke.c:8814:32: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8814 |     key = keyword(PL_tokenbuf, len, 0);
      |                                ^~~
embed.h:1372:54: note: in definition of macro 'keyword'
 1372 | #define keyword(a,b,c)          Perl_keyword(aTHX_ a,b,c)
      |                                                      ^
toke.c:70:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   70 | #define PL_bufptr               (PL_parser->bufptr)
      |                                 ^
toke.c:8824:25: note: in expansion of macro 'PL_bufptr'
 8824 |         STRLEN bufoff = PL_bufptr - SvPVX(PL_linestr);
      |                         ^~~~~~~~~
toke.c:8825:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8825 |         STRLEN   soff = s         - SvPVX(PL_linestr);
      |                         ^
toke.c: In function 'yyl_try':
toke.c:9096:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9096 |                                 s = (char *) memchr(s,'\n', d - s);
      |                                                             ~~^~~
toke.c:9271:59: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9271 |                 GV *const gv = gv_fetchpvn_flags(s, start - s,
      |                                                     ~~~~~~^~~
embed.h:231:72: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
toke.c: In function 'Perl_yylex':
toke.c:9378:67: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9378 |                                                         PL_bufend - PL_bufptr,
      |                                                                   ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
toke.c:9377:20: note: in expansion of macro 'UNLIKELY'
 9377 |         if (UTF && UNLIKELY(! is_utf8_string_loc((U8 *) PL_bufptr,
      |                    ^~~~~~~~
toke.c:9377:31: note: in expansion of macro 'is_utf8_string_loc'
 9377 |         if (UTF && UNLIKELY(! is_utf8_string_loc((U8 *) PL_bufptr,
      |                               ^~~~~~~~~~~~~~~~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
toke.c:9409:25: note: in expansion of macro 'Renew'
 9409 |                         Renew(PL_lex_brackstack, PL_lex_brackets + 10, char);
      |                         ^~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:9519:17: note: in expansion of macro 'SvCUR_set'
 9519 |                 SvCUR_set(sv,
      |                 ^~~~~~~~~
toke.c:9524:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9524 |                          PL_bufptr - PL_parser->lex_shared->re_eval_start);
      |                                    ^
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
toke.c: In function 'S_checkcomma':
toke.c:9852:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9852 |             gv = gv_fetchpvn_flags(w, s - w, ( UTF ? SVf_UTF8 : 0 ), SVt_PVCV);
      |                                       ~~^~~
embed.h:231:72: note: in definition of macro 'gv_fetchpvn_flags'
  231 | #define gv_fetchpvn_flags(a,b,c,d)      Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
toke.c:9858:17: note: in expansion of macro 'Copy'
 9858 |                 Copy(w, tmpbuf+1, s - w, char);
      |                 ^~~~
toke.c:9860:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9860 |                 off = pad_findmy_pvn(tmpbuf, s-w+1, 0);
      |                                              ~~~^~
embed.h:445:61: note: in definition of macro 'pad_findmy_pvn'
  445 | #define pad_findmy_pvn(a,b,c)   Perl_pad_findmy_pvn(aTHX_ a,b,c)
      |                                                             ^
toke.c: In function 'S_new_constant':
hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
toke.c:9908:11: note: in expansion of macro 'hv_fetch'
 9908 |     cvp = hv_fetch(table, key, keylen, FALSE);
      |           ^~~~~~~~
toke.c: In function 'S_parse_ident':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
toke.c:10010:13: note: in expansion of macro 'Copy'
10010 |             Copy(*s, *d, t - *s, char);
      |             ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
toke.c:10044:9: note: in expansion of macro 'Newx'
10044 |         Newx(this_d, *s - olds + saw_tick + 2, char); /* +2 for $# */
      |         ^~~~
toke.c: In function 'Perl_scan_word':
toke.c:10081:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10081 |     *slp = d - dest;
      |            ^
toke.c: In function 'S_scan_ident':
embedvar.h:227:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  227 | #define PL_parser               (vTHX->Iparser)
      |                                 ^
toke.c:10107:21: note: in expansion of macro 'PL_parser'
10107 |     I32 herelines = PL_parser->herelines;
      |                     ^~~~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:10162:24: note: in expansion of macro 'CopLINE'
10162 |         orig_copline = CopLINE(PL_curcop);
      |                        ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:10235:27: note: in expansion of macro 'CopLINE'
10235 |             tmp_copline = CopLINE(PL_curcop);
      |                           ^~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:10245:36: note: in expansion of macro 'CopLINE'
10245 |                     orig_copline = CopLINE(PL_curcop);
      |                                    ^~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:10246:21: note: in expansion of macro 'CopLINE_set'
10246 |                     CopLINE_set(PL_curcop, tmp_copline);
      |                     ^~~~~~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:10251:21: note: in expansion of macro 'CopLINE_set'
10251 |                     CopLINE_set(PL_curcop, orig_copline);
      |                     ^~~~~~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:10261:27: note: in expansion of macro 'CopLINE'
10261 |             tmp_copline = CopLINE(PL_curcop);
      |                           ^~~~~~~
toke.c:10265:28: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10265 |             STRLEN s_off = s - SvPVX(PL_linestr);
      |                            ^
toke.c:10286:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10286 |                         || get_cvn_flags(dest, d - dest, is_utf8
      |                                                ~~^~~~~~
embed.h:191:60: note: in definition of macro 'get_cvn_flags'
  191 | #define get_cvn_flags(a,b,c)    Perl_get_cvn_flags(aTHX_ a,b,c)
      |                                                            ^
toke.c:10290:55: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10290 |                     SV *tmp = newSVpvn_flags( dest, d - dest,
      |                                                     ~~^~~~~~
embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:10294:36: note: in expansion of macro 'CopLINE'
10294 |                     orig_copline = CopLINE(PL_curcop);
      |                                    ^~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:10295:21: note: in expansion of macro 'CopLINE_set'
10295 |                     CopLINE_set(PL_curcop, tmp_copline);
      |                     ^~~~~~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:10299:21: note: in expansion of macro 'CopLINE_set'
10299 |                     CopLINE_set(PL_curcop, orig_copline);
      |                     ^~~~~~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:10307:13: note: in expansion of macro 'CopLINE_set'
10307 |             CopLINE_set(PL_curcop, orig_copline);
      |             ^~~~~~~~~~~
toke.c:10308:36: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10308 |             PL_parser->herelines = herelines;
      |                                    ^~~~~~~~~
toke.c: In function 'S_scan_pat':
toke.c:10449:35: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10449 |             elements = mg->mg_len / sizeof(PMOP**);
      |                                   ^
toke.c:10452:26: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
10452 |             mg->mg_len = elements * sizeof(PMOP**);
      |                          ^~~~~~~~
toke.c: In function 'S_scan_trans':
toke.c:10629:22: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-240' [-Wsign-conversion]
10629 |     o->op_private &= ~OPpTRANS_ALL;
      |                      ^
toke.c: In function 'S_scan_heredoc':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
toke.c:10722:9: note: in expansion of macro 'Copy'
10722 |         Copy(s, d, len, char);
      |         ^~~~
toke.c:10735:44: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10735 |     d = (char *) memchr(s, '\r', PL_bufend - s);
      |                                            ^
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:10754:9: note: in expansion of macro 'SvCUR_set'
10754 |         SvCUR_set(PL_linestr, PL_bufend - SvPVX_const(PL_linestr));
      |         ^~~~~~~~~
toke.c:10770:22: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
10770 |     PL_multi_start = origline + 1 + PL_parser->herelines;
      |                      ^~~~~~~~
toke.c:10792:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10792 |                                 SvEND(shared->ls_linestr)-shared->ls_bufptr
toke.c:10819:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10819 |             s = (char*)memchr((void*)s, '\n', PL_bufend - s);
      |                                                         ^
toke.c:10834:51: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10834 |                 if (memEQ(s, PL_tokenbuf + 1, len - 1)) {
      |                                               ~~~~^~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
toke.c:10848:25: note: in expansion of macro 'Newx'
10848 |                         Newx(indent, indent_len + 1, char);
      |                         ^~~~
toke.c:10849:52: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10849 |                         memcpy(indent, backup + 1, indent_len);
      |                                                    ^~~~~~~~~~
toke.c:10860:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10860 |                    && memNE(s,PL_tokenbuf,len) )
      |                                           ^~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
toke.c:10860:23: note: in expansion of macro 'memNE'
10860 |                    && memNE(s,PL_tokenbuf,len) )
      |                       ^~~~~
toke.c:10871:31: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10871 |         sv_setpvn(tmpstr,d+1,s-d);
      |                              ~^~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
toke.c:10890:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10890 |                                 bufend - shared->re_eval_start);
      |                                 ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
toke.c:10904:9: note: in expansion of macro 'Move'
10904 |         Move(s,d,bufend-s + 1,char);
      |         ^~~~
toke.c:10905:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10905 |         SvCUR_set(linestr, SvCUR(linestr) - (s-d));
      |                                           ^
sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:10970:21: note: in expansion of macro 'SvCUR_set'
10970 |                     SvCUR_set(PL_linestr, PL_bufend - SvPVX_const(PL_linestr));
      |                     ^~~~~~~~~
In file included from perl.h:4161:
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
toke.c:10980:32: note: in expansion of macro 'ninstr'
10980 |                 char * found = ninstr(s, PL_bufend, (PL_tokenbuf + 1), (PL_tokenbuf +1 + len));
      |                                ^~~~~~
util.h:251:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  251 |                              (little), (lend) - (little)))
      |                                        ~~~~~~~^~~~~~~~~~
toke.c:10980:32: note: in expansion of macro 'ninstr'
10980 |                 char * found = ninstr(s, PL_bufend, (PL_tokenbuf + 1), (PL_tokenbuf +1 + len));
      |                                ^~~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
toke.c:10996:25: note: in expansion of macro 'Newx'
10996 |                         Newx(indent, indent_len + 1, char);
      |                         ^~~~
toke.c:10997:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10997 |                         memcpy(indent, backup, indent_len);
      |                                                ^~~~~~~~~~
toke.c:11015:48: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
11015 |                     && memEQ(s,PL_tokenbuf + 1,len))
      |                                                ^~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
toke.c:11033:20: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11033 |     PL_multi_end = origline + PL_parser->herelines;
      |                    ^~~~~~~~
toke.c:11054:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
11054 |                        && memEQ(ss, indent, indent_len))
      |                                             ^~~~~~~~~~
handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
toke.c: In function 'S_scan_inputsymbol':
toke.c:11134:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11134 |     end = (char *) memchr(s, '\n', PL_bufend - s);
      |                                              ^
toke.c:11205:53: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
11205 |             const PADOFFSET tmp = pad_findmy_pvn(d, len, 0);
      |                                                     ^~~
embed.h:445:61: note: in definition of macro 'pad_findmy_pvn'
  445 | #define pad_findmy_pvn(a,b,c)   Perl_pad_findmy_pvn(aTHX_ a,b,c)
      |                                                             ^
toke.c: In function 'Perl_scan_str':
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:11376:22: note: in expansion of macro 'CopLINE'
11376 |     PL_multi_start = CopLINE(PL_curcop);
      |                      ^~~~~~~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
toke.c:11417:24: note: in expansion of macro 'ninstr'
11417 |     const char *tmps = ninstr(legal_paired_opening_delims,
      |                        ^~~~~~
util.h:251:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  251 |                              (little), (lend) - (little)))
      |                                        ~~~~~~~^~~~~~~~~~
toke.c:11417:24: note: in expansion of macro 'ninstr'
11417 |     const char *tmps = ninstr(legal_paired_opening_delims,
      |                        ^~~~~~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
toke.c:11447:13: note: in expansion of macro 'ninstr'
11447 |         if (ninstr(deprecated_opening_delims, deprecated_delims_end,
      |             ^~~~~~
util.h:251:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  251 |                              (little), (lend) - (little)))
      |                                        ~~~~~~~^~~~~~~~~~
toke.c:11447:13: note: in expansion of macro 'ninstr'
11447 |         if (ninstr(deprecated_opening_delims, deprecated_delims_end,
      |             ^~~~~~
sv.h:1364:50: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1364 |                 (((XPVIV*)  SvANY(sv))->xiv_iv = (val)); } STMT_END
      |                                                  ^
toke.c:11470:5: note: in expansion of macro 'SvIV_set'
11470 |     SvIV_set(sv, close_delim_code);
      |     ^~~~~~~~
toke.c:11479:30: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11479 |         SvGROW(sv, SvCUR(sv) + (PL_bufend - s) + 1);
      |                              ^
sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
toke.c:11479:30: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11479 |         SvGROW(sv, SvCUR(sv) + (PL_bufend - s) + 1);
      |                              ^
embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
toke.c:11479:9: note: in expansion of macro 'SvGROW'
11479 |         SvGROW(sv, SvCUR(sv) + (PL_bufend - s) + 1);
      |         ^~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:11561:9: note: in expansion of macro 'SvCUR_set'
11561 |         SvCUR_set(sv, to - SvPVX_const(sv));
      |         ^~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
toke.c:11577:17: note: in expansion of macro 'SvCUR_set'
11577 |                 SvCUR_set(sv, to - SvPVX_const(sv));
      |                 ^~~~~~~~~
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:11608:20: note: in expansion of macro 'CopLINE'
11608 |     PL_multi_end = CopLINE(PL_curcop);
      |                    ^~~~~~~
cop.h:663:47: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  663 | #define CopLINE_set(c,l)        (CopLINE(c) = (l))
      |                                               ^
toke.c:11609:5: note: in expansion of macro 'CopLINE_set'
11609 |     CopLINE_set(PL_curcop, PL_multi_start);
      |     ^~~~~~~~~~~
toke.c: In function 'Perl_scan_num':
handy.h:2487:25: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 2487 | #define XDIGIT_VALUE(c) (__ASSERT_(isXDIGIT(c))                             \
      |                         ^
toke.c:11900:54: note: in expansion of macro 'XDIGIT_VALUE'
11900 |                     for (h++; ((isXDIGIT(*h) && (b = XDIGIT_VALUE(*h)) < lim) ||
      |                                                      ^~~~~~~~~~~~
toke.c:12065:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12065 |                 sv = new_constant(start, s - start, "integer",
      |                                          ~~^~~~~~~
toke.c:44:32: note: in definition of macro 'new_constant'
   44 |         S_new_constant(aTHX_ a,b,STR_WITH_LEN(c),d,e,f, g, h)
      |                                ^
toke.c:12068:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12068 |                 sv = new_constant(start, s - start, "binary",
      |                                          ~~^~~~~~~
toke.c:44:32: note: in definition of macro 'new_constant'
   44 |         S_new_constant(aTHX_ a,b,STR_WITH_LEN(c),d,e,f, g, h)
      |                                ^
toke.c:12252:59: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12252 |             const int flags = grok_number (PL_tokenbuf, d - PL_tokenbuf, &uv);
      |                                                           ^
embed.h:204:58: note: in definition of macro 'grok_number'
  204 | #define grok_number(a,b,c)      Perl_grok_number(aTHX_ a,b,c)
      |                                                          ^
toke.c:12256:30: warning: conversion to 'IV' {aka 'const long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
12256 |                 sv = newSViv(uv); /* Prefer IVs over UVs. */
      |                              ^~
embed.h:393:52: note: in definition of macro 'newSViv'
  393 | #define newSViv(a)              Perl_newSViv(aTHX_ a)
      |                                                    ^
toke.c:12277:34: warning: conversion from 'uint64_t' {aka 'long long unsigned int'} to 'NV' {aka 'double'} may change value [-Wconversion]
12277 |                 nv = hexfp_uquad * hexfp_mult;
      |                                  ^
toke.c:12291:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12291 |             sv = S_new_constant(aTHX_ PL_tokenbuf, d - PL_tokenbuf,
      |                                                      ^
toke.c: In function 'S_scan_formline':
toke.c:12343:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12343 |         eol = (char *) memchr(s,'\n',PL_bufend-s);
      |                                               ^
toke.c:12357:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12357 |                 sv_catpvn(stuff, s, eol-s);
      |                                     ~~~^~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
toke.c:12357:17: note: in expansion of macro 'sv_catpvn'
12357 |                 sv_catpvn(stuff, s, eol-s);
      |                 ^~~~~~~~~
toke.c: In function 'Perl_start_subparse':
cop.h:660:33: warning: conversion to 'I32' {aka 'int'} from 'line_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  660 | #define CopLINE(c)              ((c)->cop_line)
      |                                 ^
toke.c:12429:18: note: in expansion of macro 'CopLINE'
12429 |     PL_subline = CopLINE(PL_curcop);
      |                  ^~~~~~~
toke.c: In function 'Perl_yyerror_pvn':
toke.c:12572:37: warning: conversion from 'int' to 'char' may change value [-Wconversion]
12572 |                 const char string = yychar;
      |                                     ^~~~~~
toke.c:12590:41: warning: conversion to 'line_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12590 |             && (U32)(CopLINE(PL_curcop) - PL_multi_end) <= 1)
      |                                         ^
toke.c:12599:27: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
12599 |             PL_in_eval &= ~EVAL_WARNONLY;
      |                           ^
toke.c: In function 'S_utf16_textfilter':
toke.c:12774:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12774 |             STRLEN got = nl - SvPVX(utf8_buffer);
      |                          ^~
toke.c:12796:45: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
12796 |                     + ((SvCUR(utf16_buffer) & ~1) - (reverse ? 1 : 2));
      |                                             ^
toke.c: In function 'S_add_utf16_textfilter':
toke.c:12863:65: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12863 |     IoTOP_GV(filter) = MUTABLE_GV(newSVpvn((char *)s, PL_bufend - (char*)s));
      |                                                                 ^
handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
toke.c:12863:24: note: in expansion of macro 'MUTABLE_GV'
12863 |     IoTOP_GV(filter) = MUTABLE_GV(newSVpvn((char *)s, PL_bufend - (char*)s));
      |                        ^~~~~~~~~~
toke.c:12863:35: note: in expansion of macro 'newSVpvn'
12863 |     IoTOP_GV(filter) = MUTABLE_GV(newSVpvn((char *)s, PL_bufend - (char*)s));
      |                                   ^~~~~~~~
toke.c: In function 'Perl_scan_vstring':
toke.c:12922:39: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12922 |             sv_setpvn(sv,(char *)s,pos-s);
      |                                    ~~~^~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
toke.c:12955:55: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12955 |             sv_catpvn(sv, (const char*)tmpbuf, tmpend - tmpbuf);
      |                                                ~~~~~~~^~~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
toke.c:12955:13: note: in expansion of macro 'sv_catpvn'
12955 |             sv_catpvn(sv, (const char*)tmpbuf, tmpend - tmpbuf);
      |             ^~~~~~~~~
toke.c: In function 'S_parse_recdescent':
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
toke.c:13065:9: note: in expansion of macro 'Renew'
13065 |         Renew(PL_lex_brackstack, PL_lex_brackets + 10, char);
      |         ^~~~~
toke.c: In function 'S_parse_expr':
toke.c:13094:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
13094 |     if (flags & ~PARSE_OPTIONAL)
      |               ^
toke.c: In function 'Perl_parse_label':
toke.c:13334:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
13334 |     if (flags & ~PARSE_OPTIONAL)
      |               ^
toke.c:13358:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13358 |         bufptr_pos = s - SvPVX(PL_linestr);
      |                      ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o util.o util.c
In file included from perl.h:7246,
                 from util.c:26:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
util.c: In function 'Perl_delimcpy_no_escape':
util.c:608:52: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  608 |     delim_pos = (const char *) memchr(from, delim, from_len);
      |                                                    ^~~~~~~~
In file included from perl.h:3003:
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:616:9: note: in expansion of macro 'Copy'
  616 |         Copy(from, to, to_len, char);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:620:9: note: in expansion of macro 'Copy'
  620 |         Copy(from, to, copy_len, char);
      |         ^~~~
util.c: In function 'Perl_delimcpy':
util.c:722:73: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  722 |             delim_pos = (const char *) memchr(from + 1, delim, copy_len - 1);
      |                                                                ~~~~~~~~~^~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:762:17: note: in expansion of macro 'Copy'
  762 |                 Copy(from, to, to_end - to, char);
      |                 ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:767:17: note: in expansion of macro 'Copy'
  767 |                 Copy(from, to, copy_len, char);
      |                 ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:780:9: note: in expansion of macro 'Copy'
  780 |         Copy(from, to, to_end - to, char);
      |         ^~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
util.c:784:9: note: in expansion of macro 'Copy'
  784 |         Copy(from, to, copy_len, char);
      |         ^~~~
In file included from perl.h:4161:
util.c: In function 'Perl_ninstr':
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
util.c:832:12: note: in expansion of macro 'ninstr'
  832 |     return ninstr(big, bigend, little, lend);
      |            ^~~~~~
util.h:251:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  251 |                              (little), (lend) - (little)))
      |                                        ~~~~~~~^~~~~~~~~~
util.c:832:12: note: in expansion of macro 'ninstr'
  832 |     return ninstr(big, bigend, little, lend);
      |            ^~~~~~
util.c: In function 'Perl_rninstr':
util.c:908:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  908 |         return (char *) memrchr(big, final, big_len);
      |                                             ^~~~~~~
util.c:931:35: warning: conversion to 'size_t' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  931 |         const Size_t prefix_len = little_len - 1;
      |                                   ^~~~~~~~~~
util.c:947:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  947 |             cur = (char *) memrchr(left_fence, final, cur - left_fence);
      |                                                       ~~~~^~~~~~~~~~~~
util.c: In function 'Perl_fbm_compile':
sv.h:924:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-8705' to '4294958591' [-Wsign-conversion]
  924 | #define SvNOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_NOK|SVp_NOK))
      |                                              ^~
sv.h:924:46: note: in definition of macro 'SvNOK_off'
  924 | #define SvNOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_NOK|SVp_NOK))
      |                                              ^~
util.c: In function 'Perl_fbm_instr':
util.c:1115:68: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1115 |             s = (unsigned char *)memchr((void*)big, *little, bigend-big);
      |                                                              ~~~~~~^~~~
util.c:1159:74: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1159 |                         s = (unsigned char *)memchr((void*)s, c1, bigend - s);
      |                                                                   ~~~~~~~^~~
util.c:1173:74: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |                     s = (unsigned char *)memchr((void*)s, c2, bigend - s + 1);
      |                                                               ~~~~~~~~~~~^~~
util.c:1191:74: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1191 |                         s = (unsigned char *)memchr((void*)s, c1, bigend - s);
      |                                                                   ~~~~~~~^~~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
util.c:1228:26: note: in expansion of macro 'ninstr'
 1228 |         char * const b = ninstr((char*)big,(char*)bigend,
      |                          ^~~~~~
util.h:251:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  251 |                              (little), (lend) - (little)))
      |                                        ~~~~~~~^~~~~~~~~~
util.c:1228:26: note: in expansion of macro 'ninstr'
 1228 |         char * const b = ninstr((char*)big,(char*)bigend,
      |                          ^~~~~~
util.c:1263:73: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1263 |                     s = (unsigned char *)memchr((void*)s, lastc, bigend - s);
      |                                                                  ~~~~~~~^~~
util.c:1278:23: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1278 |                 tmp = littlelen;
      |                       ^~~~~~~~~
util.c: In function 'Perl_my_popen_list':
util.c:2783:24: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2783 |             read_total += n1;
      |                        ^~
util.c: In function 'Perl_my_popen':
util.c:2966:15: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2966 |             n += n1;
      |               ^~
util.c: In function 'Perl_repeatcpy':
util.c:3512:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 3512 |         memset(to, *from, count);
      |                           ^~~~~
util.c:3528:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 3528 |             memcpy(p, to, size);
      |                           ^~~~
util.c:3534:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3534 |             memcpy(p, to, (count - items) * len);
      |                           ~~~~~~~~~~~~~~~~^~~~~
util.c: In function 'Perl_find_script':
util.c:3730:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3730 |             if (len + 1 + strlen(scriptname) + MAX_EXT_LEN >= sizeof tmpbuf)
      |                         ^
util.c:3741:71: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3741 |             (void)my_strlcpy(tmpbuf + len, scriptname, sizeof(tmpbuf) - len);
      |                                                                       ^
In file included from perl.h:4173:
util.c: In function 'Perl_report_evil_fh':
warnings.h:226:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  226 | #define packWARN(a)             (a                                      )
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
warnings.h:210:51: note: in expansion of macro 'packWARN'
  210 | #define ckWARN(w)               Perl_ckwarn(aTHX_ packWARN(w))
      |                                                   ^~~~~~~~
util.c:4018:9: note: in expansion of macro 'ckWARN'
 4018 |     if (ckWARN(warn_type)) {
      |         ^~~~~~
warnings.h:226:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  226 | #define packWARN(a)             (a                                      )
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:4035:27: note: in expansion of macro 'packWARN'
 4035 |         Perl_warner(aTHX_ packWARN(warn_type),
      |                           ^~~~~~~~
warnings.h:226:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  226 | #define packWARN(a)             (a                                      )
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:4041:35: note: in expansion of macro 'packWARN'
 4041 |                             aTHX_ packWARN(warn_type),
      |                                   ^~~~~~~~
util.c: In function 'Perl_my_strftime':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
util.c:4342:3: note: in expansion of macro 'Newx'
 4342 |   Newx(buf, buflen, char);
      |   ^~~~
util.c:4346:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4346 |   len = strftime(buf, buflen, fmt, &mytm);
      |                       ^~~~~~
util.c:4346:9: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4346 |   len = strftime(buf, buflen, fmt, &mytm);
      |         ^~~~~~~~
util.c:4368:24: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4368 |     const int fmtlen = strlen(fmt);
      |                        ^~~~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
util.c:4371:5: note: in expansion of macro 'Renew'
 4371 |     Renew(buf, bufsize, char);
      |     ^~~~~
util.c:4375:30: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4375 |       buflen = strftime(buf, bufsize, fmt, &mytm);
      |                              ^~~~~~~
util.c:4375:16: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4375 |       buflen = strftime(buf, bufsize, fmt, &mytm);
      |                ^~~~~~~~
handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
util.c:4398:7: note: in expansion of macro 'Renew'
 4398 |       Renew(buf, bufsize, char);
      |       ^~~~~
In file included from perl.h:5841:
vutil.c: In function 'Perl_scan_version':
vutil.c:433:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  433 |         SV * orig = newSVpvn(start,s-start);
      |                                    ~^~~~~~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
In file included from util.c:4580:
vutil.c: In function 'Perl_new_version':
vutil.c:527:32: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  527 |             const STRLEN len = mg->mg_len;
      |                                ^~
util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
vutil.c:533:21: note: in expansion of macro 'ninstr'
  533 |             under = ninstr(raw, raw+len, underscore, underscore + 1);
      |                     ^~~~~~
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
vutil.c:535:17: note: in expansion of macro 'Move'
  535 |                 Move(under + 1, under, raw + len - under - 1, char);
      |                 ^~~~
vutil.c: In function 'Perl_upg_version':
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
vutil.c:589:15: note: in expansion of macro 'my_snprintf'
  589 |         len = my_snprintf(tbuf, sizeof(tbuf), "%d", VERSION_MAX);
      |               ^~~~~~~~~~~
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
vutil.c:705:23: note: in expansion of macro 'my_snprintf'
  705 |                 len = my_snprintf(tbuf, sizeof(tbuf), "%.9" NVff, SvNVX(ver));
      |                       ^~~~~~~~~~~
vutil.c:750:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  750 |         version = savepvn( (const char*)mg->mg_ptr,mg->mg_len );
      |                                                    ~~^~~~~~~~
embed.h:555:54: note: in definition of macro 'savepvn'
  555 | #define savepvn(a,b)            Perl_savepvn(aTHX_ a,b)
      |                                                      ^
util.c: In function 'Perl_parse_unicode_opts':
util.c:4962:11: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-512' to '4294966784' [-Wsign-conversion]
 4962 |   if (opt & ~PERL_UNICODE_ALL_FLAGS)
      |           ^
util.c:4964:29: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-512' to '4294966784' [-Wsign-conversion]
 4964 |                   (UV) (opt & ~PERL_UNICODE_ALL_FLAGS));
      |                             ^
util.c: In function 'Perl_seed':
util.c:5035:22: warning: conversion to 'long unsigned int' from '__time_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 5035 |     u = (U32)SEED_C1 * when.tv_sec + (U32)SEED_C2 * when.tv_usec;
      |                      ^
util.c:5035:51: warning: conversion to 'long unsigned int' from '__suseconds_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 5035 |     u = (U32)SEED_C1 * when.tv_sec + (U32)SEED_C2 * when.tv_usec;
      |                                                   ^
util.c: In function 'Perl_get_hash_seed':
handy.h:2493:25: warning: conversion from 'int' to 'unsigned char' may change value [-Wconversion]
 2493 | #define READ_XDIGIT(s)  ((s)++, XDIGIT_VALUE(*((s) - 1)))
      |                         ^
util.c:5085:30: note: in expansion of macro 'READ_XDIGIT'
 5085 |             seed_buffer[i] = READ_XDIGIT(env_pv) << 4;
      |                              ^~~~~~~~~~~
handy.h:2493:25: warning: conversion from 'int' to 'unsigned char' may change value [-Wconversion]
 2493 | #define READ_XDIGIT(s)  ((s)++, XDIGIT_VALUE(*((s) - 1)))
      |                         ^
util.c:5087:35: note: in expansion of macro 'READ_XDIGIT'
 5087 |                 seed_buffer[i] |= READ_XDIGIT(env_pv);
      |                                   ^~~~~~~~~~~
util.c: In function 'Perl_my_cxt_init':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
util.c:5730:13: note: in expansion of macro 'Renew'
 5730 |             Renew(PL_my_cxt_list, new_size, void *);
      |             ^~~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
util.c:5735:13: note: in expansion of macro 'Newx'
 5735 |             Newx(PL_my_cxt_list, PL_my_cxt_size, void *);
      |             ^~~~
util.c: In function 'Perl_xs_handshake':
util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
util.c:5803:21: note: in expansion of macro 'HS_KEY'
 5803 |     need = (void *)(HS_KEY(FALSE, FALSE, "", "") & HSm_KEY_MATCH);
      |                     ^~~~~~
util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
util.c:5803:21: note: in expansion of macro 'HS_KEY'
 5803 |     need = (void *)(HS_KEY(FALSE, FALSE, "", "") & HSm_KEY_MATCH);
      |                     ^~~~~~
In file included from perl.h:5782:
pp.h:81:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   81 | #define POPMARK Perl_POPMARK(aTHX)
      |                 ^~~~~~~~~~~~
pp.h:81:17: note: in definition of macro 'POPMARK'
   81 | #define POPMARK Perl_POPMARK(aTHX)
      |                 ^~~~~~~~~~~~
util.c:5850:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5850 |                 items = (I32)(SP - MARK);
      |                         ^
util.c:5878:12: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5878 |     return ax;
      |            ^~
util.c: In function 'S_gv_has_usable_name':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
hv.h:539:42: note: in expansion of macro 'HEK_LEN'
  539 |      hv_common((hv), NULL, HEK_KEY(hek), HEK_LEN(hek), HEK_UTF8(hek),   \
      |                                          ^~~~~~~
util.c:6010:26: note: in expansion of macro 'hv_fetchhek'
 6010 |         && (gvp = (GV **)hv_fetchhek(
      |                          ^~~~~~~~~~~
util.c: In function 'Perl_get_db_sub':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
sv.h:2172:48: note: in expansion of macro 'HEK_LEN'
 2172 |             sv_catpvn_flags(sv, HEK_KEY(bmxk), HEK_LEN(bmxk),          \
      |                                                ^~~~~~~
util.c:6057:13: note: in expansion of macro 'sv_cathek'
 6057 |             sv_cathek(dbsv, GvNAME_HEK(gv));
      |             ^~~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o deb.o deb.c
In file included from perl.h:7246,
                 from deb.c:25:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o run.o run.c
In file included from perl.h:7246,
                 from run.c:26:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o universal.o universal.c
In file included from perl.h:7246,
                 from universal.c:31:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
universal.c: In function 'S_isa_lookup':
universal.c:70:57: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   70 |     our_stash = gv_stashsvpvn_cached(namesv, name, len, flags);
      |                                                         ^~~~~
embed.h:1067:79: note: in definition of macro 'gv_stashsvpvn_cached'
 1067 | #define gv_stashsvpvn_cached(a,b,c,d)   Perl_gv_stashsvpvn_cached(aTHX_ a,b,c,d)
      |                                                                               ^
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
universal.c:76:55: note: in expansion of macro 'HEK_LEN'
   76 |         if (hv_common(isa, NULL, HEK_KEY(canon_name), HEK_LEN(canon_name),
      |                                                       ^~~~~~~
universal.c: In function 'XS_Internals_SvREADONLY':
universal.c:654:25: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134217729' to '4160749567' [-Wsign-conversion]
  654 |             SvFLAGS(sv) &=~ SVf_READONLY;
      |                         ^~
universal.c: In function 'XS_re_regnames':
embed.h:58:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
In file included from perl.h:4168:
vxs.inc: In function 'XS_version_new':
hv.h:321:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ^
vxs.inc:230:21: note: in expansion of macro 'HvNAMELEN_get'
  230 |         len       = HvNAMELEN_get(stash);
      |                     ^~~~~~~~~~~~~
vxs.inc:243:57: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  243 |         sv_bless(rv, gv_stashpvn(classname, len, GV_ADD | flags));
embed.h:589:55: note: in definition of macro 'sv_bless'
  589 | #define sv_bless(a,b)           Perl_sv_bless(aTHX_ a,b)
      |                                                       ^
vxs.inc:243:22: note: in expansion of macro 'gv_stashpvn'
  243 |         sv_bless(rv, gv_stashpvn(classname, len, GV_ADD | flags));
      |                      ^~~~~~~~~~~
vxs.inc: In function 'XS_version_qv':
hv.h:321:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ^
vxs.inc:416:29: note: in expansion of macro 'HvNAMELEN_get'
  416 |                 len       = HvNAMELEN_get(stash);
      |                             ^~~~~~~~~~~~~
vxs.inc:435:61: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  435 |             sv_bless(rv, gv_stashpvn(classname, len, GV_ADD | flags));
embed.h:589:55: note: in definition of macro 'sv_bless'
  589 | #define sv_bless(a,b)           Perl_sv_bless(aTHX_ a,b)
      |                                                       ^
vxs.inc:435:26: note: in expansion of macro 'gv_stashpvn'
  435 |             sv_bless(rv, gv_stashpvn(classname, len, GV_ADD | flags));
      |                          ^~~~~~~~~~~
In file included from perl.h:4165:
universal.c: In function 'Perl_boot_core_UNIVERSAL':
cv.h:201:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-4097' to '4294963199' [-Wsign-conversion]
  201 | #define CvDYNFILE_off(cv)       (CvFLAGS(cv) &= ~CVf_DYNFILE)
      |                                              ^~
cv.h:201:46: note: in definition of macro 'CvDYNFILE_off'
  201 | #define CvDYNFILE_off(cv)       (CvFLAGS(cv) &= ~CVf_DYNFILE)
      |                                              ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pad.o pad.c
In file included from perl.h:7246,
                 from pad.c:150:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:4170:
pad.c: In function 'Perl_pad_new':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pad.c:232:9: note: in expansion of macro 'AvREIFY_only'
  232 |         AvREIFY_only(a0);
      |         ^~~~~~~~~~~~
pad.c: In function 'Perl_cv_undef_flags':
sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
In file included from perl.h:4165:
cv.h:213:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
cv.h:213:46: note: in definition of macro 'CvNAMED_off'
  213 | #define CvNAMED_off(cv)         (CvFLAGS(cv) &= ~CVf_NAMED)
      |                                              ^~
cv.h:183:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-17' to '4294967279' [-Wsign-conversion]
  183 | #define CvWEAKOUTSIDE_off(cv)   (CvFLAGS(cv) &= ~CVf_WEAKOUTSIDE)
      |                                              ^~
cv.h:183:46: note: in definition of macro 'CvWEAKOUTSIDE_off'
  183 | #define CvWEAKOUTSIDE_off(cv)   (CvFLAGS(cv) &= ~CVf_WEAKOUTSIDE)
      |                                              ^~
pad.c: In function 'Perl_cv_forget_slab':
cv.h:196:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
cv.h:196:46: note: in definition of macro 'CvSLABBED_off'
  196 | # define CvSLABBED_off(cv)      (CvFLAGS(cv) &= ~CVf_SLABBED)
      |                                              ^~
pad.c: In function 'Perl_pad_add_name_pvn':
pad.c:602:15: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-8' to '4294967288' [-Wsign-conversion]
  602 |     if (flags & ~(padadd_OUR|padadd_STATE|padadd_NO_DUP_CHECK))
      |               ^
pad.c: In function 'Perl_pad_alloc':
pad.c:761:21: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-134217729' to '4160749567' [-Wsign-conversion]
  761 |             tmptype &= ~SVf_READONLY;
      |                     ^~
pad.c: In function 'S_pad_findlex':
pad.c:1117:11: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-9' to '4294967287' [-Wsign-conversion]
 1117 |     flags &= ~ padadd_STALEOK; /* one-shot flag */
      |           ^~
In file included from perl.h:4164:
pad.h:106:41: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  106 | #define PARENT_FAKELEX_FLAGS(pn)        (pn)->xpadn_high
      |                                         ^
pad.c:1177:30: note: in expansion of macro 'PARENT_FAKELEX_FLAGS'
 1177 |                 *out_flags = PARENT_FAKELEX_FLAGS(*out_name);
      |                              ^~~~~~~~~~~~~~~~~~~~
In file included from perl.h:5841:
pad.c:1280:23: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1280 |                 flags | padadd_STALEOK*(new_capturep == &new_capture),
      |                       ^
embed.h:1821:65: note: in definition of macro 'pad_findlex'
 1821 | #define pad_findlex(a,b,c,d,e,f,g,h,i)  S_pad_findlex(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                                 ^
pad.c:156:35: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  156 |   STMT_START { (sv)->xpadn_high = (val); } STMT_END
      |                                   ^
pad.c:159:41: note: in expansion of macro 'COP_SEQ_RANGE_HIGH_set'
  159 | #define PARENT_FAKELEX_FLAGS_set        COP_SEQ_RANGE_HIGH_set
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
pad.c:1313:9: note: in expansion of macro 'PARENT_FAKELEX_FLAGS_set'
 1313 |         PARENT_FAKELEX_FLAGS_set(new_name, *out_flags);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
pad.c:154:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  154 |   STMT_START { (sv)->xpadn_low = (val); } STMT_END
      |                                  ^
pad.c:158:41: note: in expansion of macro 'COP_SEQ_RANGE_LOW_set'
  158 | #define PARENT_PAD_INDEX_set            COP_SEQ_RANGE_LOW_set
      |                                         ^~~~~~~~~~~~~~~~~~~~~
pad.c:1321:13: note: in expansion of macro 'PARENT_PAD_INDEX_set'
 1321 |             PARENT_PAD_INDEX_set(new_name, offset);
      |             ^~~~~~~~~~~~~~~~~~~~
pad.c:154:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  154 |   STMT_START { (sv)->xpadn_low = (val); } STMT_END
      |                                  ^
pad.c:158:41: note: in expansion of macro 'COP_SEQ_RANGE_LOW_set'
  158 | #define PARENT_PAD_INDEX_set            COP_SEQ_RANGE_LOW_set
      |                                         ^~~~~~~~~~~~~~~~~~~~~
pad.c:1328:13: note: in expansion of macro 'PARENT_PAD_INDEX_set'
 1328 |             PARENT_PAD_INDEX_set(new_name, offset);
      |             ^~~~~~~~~~~~~~~~~~~~
pad.h:106:41: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  106 | #define PARENT_FAKELEX_FLAGS(pn)        (pn)->xpadn_high
      |                                         ^
pad.c:1334:22: note: in expansion of macro 'PARENT_FAKELEX_FLAGS'
 1334 |         *out_flags = PARENT_FAKELEX_FLAGS(new_name);
      |                      ^~~~~~~~~~~~~~~~~~~~
pad.c: In function 'Perl_pad_tidy':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pad.c:1705:9: note: in expansion of macro 'AvREIFY_only'
 1705 |         AvREIFY_only(av);
      |         ^~~~~~~~~~~~
pad.c: In function 'Perl_pad_free':
pad.c:1770:21: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-131073' to '4294836223' [-Wsign-conversion]
 1770 |         SvFLAGS(sv) &= ~SVs_PADTMP;
      |                     ^~
pad.c: In function 'S_cv_clone_pad':
cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
pad.c: In function 'S_cv_clone':
pad.c:2206:34: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-3121' to '4294964175' [-Wsign-conversion]
 2206 |     CvFLAGS(cv) = CvFLAGS(proto) & ~(CVf_CLONE|CVf_WEAKOUTSIDE|CVf_CVGV_RC
      |                                  ^
pad.c: In function 'Perl_cv_name':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
sv.h:2172:48: note: in expansion of macro 'HEK_LEN'
 2172 |             sv_catpvn_flags(sv, HEK_KEY(bmxk), HEK_LEN(bmxk),          \
      |                                                ^~~~~~~
pad.c:2313:21: note: in expansion of macro 'sv_cathek'
 2313 |                     sv_cathek(retsv, CvNAME_HEK(cv));
      |                     ^~~~~~~~~
pad.c: In function 'Perl_pad_fixup_inner_anons':
pad.h:105:41: warning: conversion to 'PADOFFSET' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  105 | #define PARENT_PAD_INDEX(pn)            (pn)->xpadn_low
      |                                         ^
pad.c:2362:21: note: in expansion of macro 'PARENT_PAD_INDEX'
 2362 |                 i = PARENT_PAD_INDEX(name);
      |                     ^~~~~~~~~~~~~~~~
In file included from perl.h:3003:
pad.c: In function 'Perl_pad_push':
pad.c:2422:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2422 |         Newxz( AvALLOC(newpad), ix + 1, SV *);
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pad.c:2422:9: note: in expansion of macro 'Newxz'
 2422 |         Newxz( AvALLOC(newpad), ix + 1, SV *);
      |         ^~~~~
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pad.c:2458:9: note: in expansion of macro 'AvREIFY_only'
 2458 |         AvREIFY_only(av);
      |         ^~~~~~~~~~~~
pad.c: In function 'Perl_padlist_dup':
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pad.c:2493:5: note: in expansion of macro 'Newx'
 2493 |     Newx(PadlistARRAY(dstpad), max + 1, PAD *);
      |     ^~~~
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pad.c:2575:17: note: in expansion of macro 'AvREIFY_only'
 2575 |                 AvREIFY_only(args);
      |                 ^~~~~~~~~~~~
pad.c: In function 'Perl_padlist_store':
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pad.c:2600:9: note: in expansion of macro 'Zero'
 2600 |         Zero(PadlistARRAY(padlist)+oldmax+1, PadlistMAX(padlist)-oldmax,
      |         ^~~~
pad.c: In function 'Perl_newPADNAMELIST':
pad.c:2627:23: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2627 |     pnl->xpadnl_max = max;
      |                       ^~~
pad.c: In function 'Perl_padnamelist_store':
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pad.c:2654:9: note: in expansion of macro 'Zero'
 2654 |         Zero(PadnamelistARRAY(pnl)+PadnamelistMAX(pnl)+1,
      |         ^~~~
pad.c: In function 'Perl_padnamelist_dup':
pad.c:2722:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2722 |     dstpad = newPADNAMELIST(max);
      |                             ^~~
pad.c: In function 'Perl_newPADNAMEpvn':
pad.c:2766:22: warning: conversion from 'STRLEN' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 2766 |     PadnameLEN(pn) = len;
      |                      ^~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o globals.o globals.c
In file included from perl.h:7246,
                 from globals.c:25:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o keywords.o keywords.c
In file included from perl.h:7246,
                 from keywords.c:9:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o perlio.o perlio.c
In file included from perl.h:7246,
                 from perlio.c:43:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
perlio.c: In function 'PerlIO_debug':
perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
perlio.c:365:29: note: in expansion of macro 'my_snprintf'
  365 |         const STRLEN len1 = my_snprintf(buffer, sizeof(buffer), "%.40s:%" IVdf " ", s ? s : "(none)", (IV) CopLINE(PL_curcop));
      |                             ^~~~~~~~~~~
perl.h:2046:24: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2046 | #  define my_vsnprintf Perl_my_vsnprintf
      |                        ^~~~~~~~~~~~~~~~~
perlio.c:377:29: note: in expansion of macro 'my_vsnprintf'
  377 |         const STRLEN len2 = my_vsnprintf(buffer + len1, sizeof(buffer) - len1, fmt, ap);
      |                             ^~~~~~~~~~~~
In file included from perl.h:3003:
perlio.c: In function 'PerlIO_list_push':
handy.h:2773:104: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
perlio.c:549:13: note: in expansion of macro 'Renew'
  549 |             Renew(list->array, new_len, PerlIO_pair_t);
      |             ^~~~~
handy.h:2761:99: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
perlio.c:551:13: note: in expansion of macro 'Newx'
  551 |             Newx(list->array, new_len, PerlIO_pair_t);
      |             ^~~~
perlio.c: In function 'PerlIO_parse_layers':
perlio.c:912:24: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  912 |                 llen = e - s;
      |                        ^
perlio.c:920:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  920 |                                 alen = (e - 1) - as;
      |                                        ^
perlio.c: In function 'PerlIOBase_binmode':
perlio.c:1194:34: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
 1194 |             PerlIOBase(f)->flags &= ~PERLIO_F_UTF8;
      |                                  ^~
perlio.c: In function 'Perl_PerlIO_get_bufsiz':
perlio.c:76:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   76 |                         return (*tab->callback) args;           \
      |                                 ^
perlio.c:1766:6: note: in expansion of macro 'Perl_PerlIO_or_fail'
 1766 |      Perl_PerlIO_or_fail(f, Get_bufsiz, -1, (aTHX_ f));
      |      ^~~~~~~~~~~~~~~~~~~
perlio.c: In function 'PerlIOUtf8_pushed':
perlio.c:1809:34: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
 1809 |             PerlIOBase(f)->flags &= ~PERLIO_F_UTF8;
      |                                  ^~
In file included from perlio.c:331:
perlio.c: In function 'PerlIO_modestr':
perliol.h:103:28: warning: conversion to 'IV' {aka 'const long int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  103 | #define PerlIOBase(f)      (*(f))
      |                            ^
perlio.c:1924:26: note: in expansion of macro 'PerlIOBase'
 1924 |         const IV flags = PerlIOBase(f)->flags;
      |                          ^~~~~~~~~~
perlio.c: In function 'PerlIOBase_pushed':
perlio.c:1959:14: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-13825' to '4294953471' [-Wsign-conversion]
 1959 |     l->flags &= ~(PERLIO_F_CANREAD | PERLIO_F_CANWRITE |
      |              ^~
perlio.c:2017:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2017 |                 l->flags &= ~PERLIO_F_CRLF;
      |                          ^~
perlio.c: In function 'PerlIOBase_read':
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
perlio.c:2086:17: note: in expansion of macro 'Copy'
 2086 |                 Copy(ptr, buf, take, STDCHAR);
      |                 ^~~~
perlio.c:2088:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2088 |                 count -= take;
      |                       ^~
perlio.c: In function 'PerlIOBase_close':
perlio.c:2127:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2098689' to '4292868607' [-Wsign-conversion]
 2127 |         PerlIOBase(f)->flags &=
      |                              ^~
perlio.c:2137:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2098689' to '4292868607' [-Wsign-conversion]
 2137 |                 PerlIOBase(n)->flags &=
      |                                      ^~
perlio.c: In function 'PerlIOBase_clearerr':
perlio.c:2174:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2305' to '4294964991' [-Wsign-conversion]
 2174 |         PerlIOBase(f)->flags &= ~(PERLIO_F_ERROR | PERLIO_F_EOF);
      |                              ^~
perlio.c: In function 'S_more_refcounted_fds':
perlio.c:2264:61: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2264 |     new_array = (int*) realloc(PL_perlio_fd_refcnt, new_max * sizeof(int));
      |                                                             ^
handy.h:2792:97: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
perlio.c:2278:5: note: in expansion of macro 'Zero'
 2278 |     Zero(new_array + old_max, new_max - old_max, int);
      |     ^~~~
perlio.c: In function 'PerlIOUnix_seek':
perlio.c:2630:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
 2630 |     PerlIOBase(f)->flags &= ~PERLIO_F_EOF;
      |                          ^~
perlio.c: In function 'PerlIOUnix_close':
perlio.c:2795:34: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
 2795 |             PerlIOBase(f)->flags &= ~PERLIO_F_OPEN;
      |                                  ^~
perlio.c:2813:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
 2813 |         PerlIOBase(f)->flags &= ~PERLIO_F_OPEN;
      |                              ^~
perlio.c: In function 'PerlIOStdio_read':
perlio.c:3341:24: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 3341 |                 *buf = ch;
      |                        ^~
In file included from perl.h:4114:
iperlsys.h:333:41: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  333 | #  define PerlSIO_fread(buf,sz,count,f) fread(buf,sz,count,f)
      |                                         ^~~~~
iperlsys.h:333:41: note: in definition of macro 'PerlSIO_fread'
  333 | #  define PerlSIO_fread(buf,sz,count,f) fread(buf,sz,count,f)
      |                                         ^~~~~
perlio.c: In function 'PerlIOStdio_write':
iperlsys.h:334:49: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  334 | #  define PerlSIO_fwrite(buf,sz,count,f)        fwrite(buf,sz,count,f)
      |                                                 ^~~~~~
iperlsys.h:334:49: note: in definition of macro 'PerlSIO_fwrite'
  334 | #  define PerlSIO_fwrite(buf,sz,count,f)        fwrite(buf,sz,count,f)
      |                                                 ^~~~~~
In file included from perl.h:5841:
perlio.c: In function 'PerlIOBuf_flush':
perlio.c:3935:55: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3935 |             SSize_t count = PerlIO_write(n, p, b->ptr - p);
      |                                                ~~~~~~~^~~
embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
perlio.c:3973:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
 3973 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
perlio.c: In function 'PerlIOBuf_fill':
perlio.c:4032:25: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4032 |                 avail = b->bufsiz;
      |                         ^
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
perlio.c:4033:13: note: in expansion of macro 'Copy'
 4033 |             Copy(ptr, b->buf, avail, STDCHAR);
      |             ^~~~
perlio.c: In function 'PerlIOBuf_unread':
perlio.c:4091:21: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4091 |             avail = b->bufsiz;
      |                     ^
perlio.c:4104:21: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4104 |             avail = count;
      |                     ^~~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
perlio.c:4114:17: note: in expansion of macro 'Copy'
 4114 |                 Copy(buf, b->ptr, avail, STDCHAR);
      |                 ^~~~
perlio.c:4116:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4116 |             count -= avail;
      |                   ^~
perlio.c:4118:34: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
 4118 |             PerlIOBase(f)->flags &= ~PERLIO_F_EOF;
      |                                  ^~
perlio.c: In function 'PerlIOBuf_write':
perlio.c:4149:35: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4149 |         SSize_t avail = b->bufsiz - (b->ptr - b->buf);
      |                                   ^
perlio.c:4149:25: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4149 |         SSize_t avail = b->bufsiz - (b->ptr - b->buf);
      |                         ^
perlio.c:4151:21: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4151 |             avail = count;
      |                     ^~~~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
perlio.c:4156:13: note: in expansion of macro 'Copy'
 4156 |             Copy(buf, b->ptr, avail, STDCHAR);
      |             ^~~~
perlio.c:4157:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4157 |             count -= avail;
      |                   ^~
perlio.c:4159:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4159 |             written += avail;
      |                     ^~
perlio.c:4170:12: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4170 |     return written;
      |            ^~~~~~~
perlio.c: In function 'PerlIOBuf_seek':
perlio.c:4178:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
 4178 |         PerlIOBase(f)->flags &= ~PERLIO_F_EOF;
      |                              ^~
perlio.c: In function 'PerlIOBuf_popped':
perlio.c:4227:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
 4227 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
perlio.c: In function 'PerlIOBuf_close':
perlio.c:4240:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
 4240 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
perlio.c: In function 'PerlIOBuf_bufsiz':
perlio.c:4289:20: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4289 |     return (b->end - b->buf);
      |            ~~~~~~~~^~~~~~~~~
perlio.c: In function 'PerlIOPending_pushed':
perlio.c:4414:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4227073' to '4290740223' [-Wsign-conversion]
 4414 |     l->flags = (l->flags & ~(PERLIO_F_FASTGETS | PERLIO_F_UTF8)) |
      |                          ^
perlio.c: In function 'PerlIOPending_read':
perlio.c:4426:17: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4426 |         avail = count;
      |                 ^~~~~
perlio.c:4428:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4428 |         got = PerlIOBuf_read(aTHX_ f, vbuf, avail);
      |                                             ^~~~~
perlio.c:4431:60: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4431 |             PerlIO_read(f, ((STDCHAR *) vbuf) + got, count - got);
      |                                                            ^
embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
perlio.c: In function 'PerlIOCrlf_unread':
perlio.c:4582:35: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 4582 |                     *--(b->ptr) = ch;
      |                                   ^~
perlio.c: In function 'PerlIOCrlf_binmode':
perlio.c:4788:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 4788 |         PerlIOBase(f)->flags &= ~PERLIO_F_CRLF;
      |                              ^~
perlio.c: In function 'PerlIO_ungetc':
perlio.c:4933:23: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 4933 |         STDCHAR buf = ch;
      |                       ^~
perlio.c: In function 'PerlIO_putc':
perlio.c:4945:19: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 4945 |     STDCHAR buf = ch;
      |                   ^~
perlio.c: In function 'PerlIO_tmpfile_flags':
perlio.c:5040:22: warning: conversion to 'int' from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5040 |      int old_umask = umask(0177);
      |                      ^~~~~
perlio.c:5060:12: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5060 |      umask(old_umask);
      |            ^~~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o numeric.o numeric.c
In file included from perl.h:7246,
                 from numeric.c:27:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
numeric.c: In function 'Perl_grok_bin_oct_hex':
numeric.c:430:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  430 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:435:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  435 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:440:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  440 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:445:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  445 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:450:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  450 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:455:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  455 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:460:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  460 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:465:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  465 |           value = (value << shift) | XDIGIT_VALUE(*s);
      |                                    ^
numeric.c:475:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  475 |     bytes_so_far = s - s0;
      |                    ^
numeric.c:488:42: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  488 |                 value = (value << shift) | XDIGIT_VALUE(*s);
      |                                          ^
In file included from perl.h:3003:
handy.h:2487:25: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2487 | #define XDIGIT_VALUE(c) (__ASSERT_(isXDIGIT(c))                             \
      |                         ^
numeric.c:508:21: note: in expansion of macro 'XDIGIT_VALUE'
  508 |             value = XDIGIT_VALUE(*s);
      |                     ^~~~~~~~~~~~
numeric.c:575:14: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  575 |     *len_p = s - start;
      |              ^
numeric.c: In function 'Perl_grok_infnan':
numeric.c:850:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  850 |                         STRLEN len = t - s;
      |                                      ^
numeric.c:862:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  862 |                         STRLEN len = t - s;
      |                                      ^
In file included from perl.h:5841:
numeric.c:874:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  874 |                             grok_number_flags(s, t - s, &nanval,
      |                                                  ~~^~~
embed.h:205:72: note: in definition of macro 'grok_number_flags'
  205 | #define grok_number_flags(a,b,c,d)      Perl_grok_number_flags(aTHX_ a,b,c,d)
      |                                                                        ^
numeric.c: In function 'Perl_grok_number_flags':
numeric.c:1086:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1086 |         value = value * 10 + digit;
      |                            ^
numeric.c:1092:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1092 |         value = value * 10 + digit;
      |                            ^
numeric.c:1098:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1098 |         value = value * 10 + digit;
      |                            ^
numeric.c:1104:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1104 |         value = value * 10 + digit;
      |                            ^
numeric.c:1110:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1110 |         value = value * 10 + digit;
      |                            ^
numeric.c:1116:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1116 |         value = value * 10 + digit;
      |                            ^
numeric.c:1122:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1122 |         value = value * 10 + digit;
      |                            ^
numeric.c:1128:28: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1128 |         value = value * 10 + digit;
      |                            ^
numeric.c:1162:36: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1162 |                 value = value * 10 + digit;
      |                                    ^
numeric.c: In function 'Perl_my_atof3':
numeric.c:1684:30: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1684 |         if ((len == 0 || len - (s-orig) >= 2) && *s == '0' &&
      |                              ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o mathoms.o mathoms.c
In file included from perl.h:7246,
                 from mathoms.c:69:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
mathoms.c: In function 'Perl_hv_store_flags':
mathoms.c:889:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  889 |     return (SV**) hv_common(hv, NULL, key, klen, flags,
      |                                            ^~~~
embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
mathoms.c: In function 'Perl_hv_store':
mathoms.c:900:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  900 |         klen = -klen_i32;
      |                ^
mathoms.c:903:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  903 |         klen = klen_i32;
      |                ^~~~~~~~
mathoms.c: In function 'Perl_hv_exists':
mathoms.c:919:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  919 |         klen = -klen_i32;
      |                ^
mathoms.c:922:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  922 |         klen = klen_i32;
      |                ^~~~~~~~
mathoms.c: In function 'Perl_hv_fetch':
mathoms.c:937:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  937 |         klen = -klen_i32;
      |                ^
mathoms.c:940:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  940 |         klen = klen_i32;
      |                ^~~~~~~~
mathoms.c: In function 'Perl_hv_delete':
mathoms.c:957:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  957 |         klen = -klen_i32;
      |                ^
mathoms.c:960:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  960 |         klen = klen_i32;
      |                ^~~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o locale.o locale.c
In file included from perl.h:7246,
                 from locale.c:49:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
locale.c: In function 'S_stdize_locale':
locale.c:150:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  150 |                 const STRLEN len = u - s;
      |                                    ^
In file included from perl.h:3003:
locale.c: In function 'S_emulate_setlocale':
locale.c:960:62: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  960 |                 if strnNE(s, category_names[i], category_end - s) {
      |                                                 ~~~~~~~~~~~~~^~~
handy.h:683:40: note: in definition of macro 'strnNE'
  683 | #define strnNE(s1,s2,l) (strncmp(s1,s2,l) != 0)
      |                                        ^
locale.c: In function 'S_new_ctype':
locale.c:1517:46: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1517 |                     PL_fold_locale[i] = (U8) tolower(i);
      |                                              ^~~~~~~
In file included from perl.h:987:
locale.c:1517:54: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1517 |                     PL_fold_locale[i] = (U8) tolower(i);
      |                                                      ^
locale.c:1519:46: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1519 |                     PL_fold_locale[i] = (U8) toupper(i);
      |                                              ^~~~~~~
locale.c:1519:54: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1519 |                     PL_fold_locale[i] = (U8) toupper(i);
      |                                                      ^
locale.c:1541:31: warning: conversion from 'unsigned int' to 'char' may change value [-Wconversion]
 1541 |                     name[0] = i;
      |                               ^
handy.h:1614:50: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
locale.c:1562:21: note: in expansion of macro 'UNLIKELY'
 1562 |                 if (UNLIKELY(cBOOL(isalpha(i)) != cBOOL(isALPHA_A(i))))  {
      |                     ^~~~~~~~
locale.c:1562:51: note: in expansion of macro 'cBOOL'
 1562 |                 if (UNLIKELY(cBOOL(isalpha(i)) != cBOOL(isALPHA_A(i))))  {
      |                                                   ^~~~~
handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
locale.c:1562:57: note: in expansion of macro 'isALPHA_A'
 1562 |                 if (UNLIKELY(cBOOL(isalpha(i)) != cBOOL(isALPHA_A(i))))  {
      |                                                         ^~~~~~~~~
locale.c:1616:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1616 |                 if (UNLIKELY(tolower(i) != (int) toLOWER_A(i))) {
      |                     ^~~~~~~~
locale.c:1616:38: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1616 |                 if (UNLIKELY(tolower(i) != (int) toLOWER_A(i))) {
      |                                      ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
locale.c:1616:21: note: in expansion of macro 'UNLIKELY'
 1616 |                 if (UNLIKELY(tolower(i) != (int) toLOWER_A(i))) {
      |                     ^~~~~~~~
locale.c:1622:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1622 |                 if (UNLIKELY(toupper(i) != (int) toUPPER_A(i))) {
      |                     ^~~~~~~~
locale.c:1622:38: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1622 |                 if (UNLIKELY(toupper(i) != (int) toUPPER_A(i))) {
      |                                      ^
perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
locale.c:1622:21: note: in expansion of macro 'UNLIKELY'
 1622 |                 if (UNLIKELY(toupper(i) != (int) toUPPER_A(i))) {
      |                     ^~~~~~~~
locale.c: In function 'S_new_collate':
locale.c:1961:24: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1961 |                 base = x_len_longer - PL_collxfrm_mult * (sizeof(longer) - 1);
      |                        ^~~~~~~~~~~~
locale.c:1967:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1967 |                 PL_collxfrm_base = base + 1;
      |                                    ^~~~
locale.c: In function 'Perl__mem_collxfrm':
locale.c:3950:54: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 3950 |                         PL_strxfrm_NUL_replacement = j;
      |                                                      ^
locale.c:4106:49: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4106 |                             PL_strxfrm_max_cp = j;
      |                                                 ^
locale.c: In function 'Perl__is_cur_LC_category_utf8':
handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
locale.c:4620:13: note: in expansion of macro 'Move'
 4620 |             Move(utf8ness_cache,
      |             ^~~~
locale.c:4730:19: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4730 |             len = mbrtowc(&wc, STR_WITH_LEN(REPLACEMENT_CHARACTER_UTF8), &ps);
      |                   ^~~~~~~
locale.c:5020:24: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 5020 |                        - (utf8ness_cache - PL_locale_utf8ness);
      |                        ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp_pack.o pp_pack.c
In file included from perl.h:7246,
                 from pp_pack.c:33:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
pp_pack.c: In function 'S_mul128':
pp_pack.c:206:19: warning: conversion to 'U32' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  206 |     const U32 i = ((*t - '0') << 7) + m;
      |                   ^
pp_pack.c: In function 'utf8_to_byte':
pp_pack.c:256:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  256 |     val = utf8n_to_uvchr((U8 *) *s, end-*s, &retlen,
      |                                     ~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:256:11: note: in expansion of macro 'utf8n_to_uvchr'
  256 |     val = utf8n_to_uvchr((U8 *) *s, end-*s, &retlen,
      |           ^~~~~~~~~~~~~~
pp_pack.c: In function 'S_utf8_to_bytes':
pp_pack.c:292:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  292 |         val = utf8n_to_uvchr((U8 *) from, end-from, &retlen, flags);
      |                                           ~~~^~~~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:292:15: note: in expansion of macro 'utf8n_to_uvchr'
  292 |         val = utf8n_to_uvchr((U8 *) from, end-from, &retlen, flags);
      |               ^~~~~~~~~~~~~~
pp_pack.c:314:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  314 |                 utf8n_to_uvchr((U8 *) ptr, end-ptr, &retlen, flags);
      |                                            ~~~^~~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:314:17: note: in expansion of macro 'utf8n_to_uvchr'
  314 |                 utf8n_to_uvchr((U8 *) ptr, end-ptr, &retlen, flags);
      |                 ^~~~~~~~~~~~~~
pp_pack.c: In function 'S_next_symbol':
pp_pack.c:599:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  599 |   symptr->flags &= ~FLAG_SLASH;
      |                 ^~
pp_pack.c:678:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  678 |         else if (TYPE_ENDIANNESS(code | modifier | inherited_modifiers) ==
      |                                                  ^
pp_pack.c:228:35: note: in definition of macro 'TYPE_ENDIANNESS'
  228 | # define TYPE_ENDIANNESS(t)     ((t) & TYPE_ENDIANNESS_MASK)
      |                                   ^
pp_pack.c:695:12: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  695 |       code |= inherited_modifiers;
      |            ^~
pp_pack.c:695:15: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  695 |       code |= inherited_modifiers;
      |               ^~~~~~~~~~~~~~~~~~~
pp_pack.c: In function 'S_need_utf8':
pp_pack.c:785:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  785 |             pat = (const char *) memchr(pat, '\n', patend-pat);
      |                                                    ~~~~~~^~~~
pp_pack.c: In function 'S_first_symbol':
pp_pack.c:802:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  802 |         pat = (const char *) memchr(pat, '\n', patend-pat);
      |                                                ~~~~~~^~~~
pp_pack.c: In function 'Perl_unpackstring':
pp_pack.c:842:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  842 |         STRLEN len = strend - s;
      |                      ^~~~~~
pp_pack.c: In function 'S_unpack_rec':
pp_pack.c:875:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  875 |     symptr->strbeg = s - strbeg;
      |                      ^
pp_pack.c:937:66: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  937 |             const U32 group_modifiers = TYPE_MODIFIERS(datumtype & ~symptr->flags);
      |                                                                  ^
pp_pack.c:225:35: note: in definition of macro 'TYPE_MODIFIERS'
  225 | #define TYPE_MODIFIERS(t)       ((t) & ~0xFF)
      |                                   ^
pp_pack.c:225:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  225 | #define TYPE_MODIFIERS(t)       ((t) & ~0xFF)
      |                                      ^
pp_pack.c:937:41: note: in expansion of macro 'TYPE_MODIFIERS'
  937 |             const U32 group_modifiers = TYPE_MODIFIERS(datumtype & ~symptr->flags);
      |                                         ^~~~~~~~~~~~~~
pp_pack.c:947:41: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33' to '4294967263' [-Wsign-conversion]
  947 |                 else      symptr->flags &= ~FLAG_PARSE_UTF8;
      |                                         ^~
pp_pack.c:1037:67: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1037 |             if (utf8) ai32 = utf8_length((U8 *) strbeg, (U8 *) s) % len;
      |                                                                   ^
In file included from perl.h:5841:
embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
pp_pack.c:1089:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1089 |                 sv = newSVpvn(s, ptr-s);
      |                                  ~~~^~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
pp_pack.c:1113:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1113 |                 sv = newSVpvn(s, ptr-s);
      |                                  ~~~^~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
pp_pack.c:1114:37: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1114 |             } else sv = newSVpvn(s, len);
      |                                     ^~~
embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
pp_pack.c:1158:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1158 |             sv = sv_2mortal(newSV(len ? len : 1));
      |                                   ~~~~~~~~~~^~~
embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
pp_pack.c:1158:29: note: in expansion of macro 'newSV'
 1158 |             sv = sv_2mortal(newSV(len ? len : 1));
      |                             ^~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:1185:13: note: in expansion of macro 'SvCUR_set'
 1185 |             SvCUR_set(sv, str - SvPVX_const(sv));
      |             ^~~~~~~~~
pp_pack.c:1196:49: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1196 |                 sv = sv_2mortal(newSV(len ? len : 1));
      |                                       ~~~~~~~~~~^~~
embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
pp_pack.c:1196:33: note: in expansion of macro 'newSV'
 1196 |                 sv = sv_2mortal(newSV(len ? len : 1));
      |                                 ^~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:1227:17: note: in expansion of macro 'SvCUR_set'
 1227 |                 SvCUR_set(sv, str - SvPVX_const(sv));
      |                 ^~~~~~~~~
pp_pack.c:1246:59: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1246 |                     aint = utf8n_to_uvchr((U8 *) s, strend-s, &retlen,
      |                                                     ~~~~~~^~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:1246:28: note: in expansion of macro 'utf8n_to_uvchr'
 1246 |                     aint = utf8n_to_uvchr((U8 *) s, strend-s, &retlen,
      |                            ^~~~~~~~~~~~~~
embed.h:769:33: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
embed.h:769:33: note: in definition of macro 'utf8n_to_uvchr_msgs'
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
pp_pack.c:1246:28: note: in expansion of macro 'utf8n_to_uvchr'
 1246 |                     aint = utf8n_to_uvchr((U8 *) s, strend-s, &retlen,
      |                            ^~~~~~~~~~~~~~
pp_pack.c:1261:25: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1261 |                     cuv += aint;
      |                         ^~
pp_pack.c:1269:67: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1269 |                     const UV val = utf8n_to_uvchr((U8 *) s, strend-s, &retlen,
      |                                                             ~~~~~~^~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:1269:36: note: in expansion of macro 'utf8n_to_uvchr'
 1269 |                     const UV val = utf8n_to_uvchr((U8 *) s, strend-s, &retlen,
      |                                    ^~~~~~~~~~~~~~
pp_pack.c:1322:63: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1322 |                                       (char *) &result[1], len-1, 'U')) break;
      |                                                            ~~~^~
pp_pack.c:1327:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1327 |                     auv = utf8n_to_uvchr((U8*)s, strend - s, &retlen,
      |                                                  ~~~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:1327:27: note: in expansion of macro 'utf8n_to_uvchr'
 1327 |                     auv = utf8n_to_uvchr((U8*)s, strend - s, &retlen,
      |                           ^~~~~~~~~~~~~~
pp_pack.c:1374:25: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1374 |                     cuv += ai16;
      |                         ^~
pp_pack.c:1433:25: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1433 |                     cuv += ai16;
      |                         ^~
pp_pack.c:1446:25: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1446 |                     cuv += aint;
      |                         ^~
pp_pack.c:1471:25: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1471 |                     cuv += aiv;
      |                         ^~
pp_pack.c:1517:25: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1517 |                     cuv += ai32;
      |                         ^~
pp_pack.c:1576:25: warning: conversion to 'long unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1576 |                     cuv += ai32;
      |                         ^~
In file included from perl.h:5782:
pp_pack.c:1639:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1639 |                 PUSHs(newSVpvn_flags(aptr, len, SVs_TEMP));
      |                                            ^~~
pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
pp_pack.c:1639:23: note: in expansion of macro 'newSVpvn_flags'
 1639 |                 PUSHs(newSVpvn_flags(aptr, len, SVs_TEMP));
      |                       ^~~~~~~~~~~~~~
pp_pack.c:1767:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1767 |                         sv_catpvn(sv, hunk, (len > 3) ? 3 : len);
      |                                             ~~~~~~~~~~~~~~^~~~~
embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
pp_pack.c:1767:25: note: in expansion of macro 'sv_catpvn'
 1767 |                         sv_catpvn(sv, hunk, (len > 3) ? 3 : len);
      |                         ^~~~~~~~~
In file included from perl.h:3003:
handy.h:315:22: warning: conversion from 'long long unsigned int' to 'UV' {aka 'long unsigned int'} may change value [-Wconversion]
  315 | #define nBIT_MASK(n) ((UINTMAX_C(1) << (n)) - 1)
      |                      ^
pp_pack.c:1810:31: note: in expansion of macro 'nBIT_MASK'
 1810 |                     UV mask = nBIT_MASK(checksum);
      |                               ^~~~~~~~~
pp_pack.c: In function 'S_is_an_int':
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:1942:3: note: in expansion of macro 'SvCUR_set'
 1942 |   SvCUR_set(result, out - result_c);
      |   ^~~~~~~~~
pp_pack.c: In function 'S_div128':
pp_pack.c:1965:18: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 1965 |         *(t++) = '0' + r;
      |                  ^~~
pp_pack.c: In function 'marked_upgrade':
pp_pack.c:2018:11: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2018 |     len = (from_end-from_ptr)*UTF8_EXPAND+(from_ptr-from_start)+1;
      |           ^
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_pack.c:2020:5: note: in expansion of macro 'Copy'
 2020 |     Copy(from_start, to_start, from_ptr-from_start, char);
      |     ^~~~
handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
pp_pack.c:2023:5: note: in expansion of macro 'Newx'
 2023 |     Newx(marks, sym_ptr->level+2, const char *);
      |     ^~~~
pp_pack.c:2044:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2044 |         group->strbeg = marks[group->level] - to_start;
      |                         ^~~~~
pp_pack.c:2049:37: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 2049 |             SvLEN_set(sv, SvLEN(sv) + SvIVX(sv));
      |                                     ^
sv.h:1408:50: note: in definition of macro 'SvLEN_set'
 1408 |                 (((XPV*)  SvANY(sv))->xpv_len = (val)); } STMT_END
      |                                                  ^~~
pp_pack.c:2053:21: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33554433' to '4261412863' [-Wsign-conversion]
 2053 |         SvFLAGS(sv) &= ~SVf_OOK;
      |                     ^~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2058:5: note: in expansion of macro 'SvCUR_set'
 2058 |     SvCUR_set(sv, to_ptr - to_start);
      |     ^~~~~~~~~
pp_pack.c: In function 'S_pack_rec':
embed.h:634:33: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  634 | #define sv_len_utf8(a)          Perl_sv_len_utf8(aTHX_ a)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:634:33: note: in definition of macro 'sv_len_utf8'
  634 | #define sv_len_utf8(a)          Perl_sv_len_utf8(aTHX_ a)
      |                                 ^~~~~~~~~~~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2223:25: note: in expansion of macro 'GROWING'
 2223 |                         GROWING(0, cat, start, cur, len);
      |                         ^~~~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pp_pack.c:2224:25: note: in expansion of macro 'Zero'
 2224 |                         Zero(cur, len, char);
      |                         ^~~~
pp_pack.c:2246:60: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2246 |             U32 group_modifiers = TYPE_MODIFIERS(datumtype & ~symptr->flags);
      |                                                            ^
pp_pack.c:225:35: note: in definition of macro 'TYPE_MODIFIERS'
  225 | #define TYPE_MODIFIERS(t)       ((t) & ~0xFF)
      |                                   ^
pp_pack.c:225:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  225 | #define TYPE_MODIFIERS(t)       ((t) & ~0xFF)
      |                                      ^
pp_pack.c:2246:35: note: in expansion of macro 'TYPE_MODIFIERS'
 2246 |             U32 group_modifiers = TYPE_MODIFIERS(datumtype & ~symptr->flags);
      |                                   ^~~~~~~~~~~~~~
pp_pack.c:2254:41: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-33' to '4294967263' [-Wsign-conversion]
 2254 |                 else      symptr->flags &= ~FLAG_PARSE_UTF8;
      |                                         ^~
pp_pack.c:2315:39: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2315 |                 const STRLEN length = cur-start;
      |                                       ^~~
pp_pack.c:2326:68: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2326 |             if (utf8) ai32 = utf8_length((U8 *) start, (U8 *) cur) % len;
      |                                                                    ^
embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
pp_pack.c:2354:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2354 |                     len = fromlen+1;
      |                           ^~~~~~~
pp_pack.c:2358:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2358 |                 fromlen = datumtype == 'Z' ? len-1 : len;
      |                           ^~~~~~~~~
pp_pack.c:2366:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2366 |                     len = fromlen;
      |                           ^~~~~~~
pp_pack.c:2368:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2368 |                     fromlen = s-aptr;
      |                               ^
pp_pack.c:2369:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2369 |                     len += fromlen;
      |                         ^~
pp_pack.c:2369:28: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2369 |                     len += fromlen;
      |                            ^~~~~~~
pp_pack.c:2373:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2373 |                 fromlen = len - fromlen;
      |                               ^
pp_pack.c:2376:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2376 |                     len = fromlen;
      |                           ^~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2379:17: note: in expansion of macro 'GROWING'
 2379 |                 GROWING(0, cat, start, cur, len);
      |                 ^~~~~~~
pp_pack.c:2380:61: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2380 |                 if (!S_utf8_to_bytes(aTHX_ &aptr, end, cur, fromlen,
      |                                                             ^~~~~~~
pp_pack.c:2386:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2386 |                 len -= fromlen;
      |                     ^~
pp_pack.c:2386:24: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2386 |                 len -= fromlen;
      |                        ^~~~~~~
pp_pack.c:2389:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2389 |                     len = fromlen;
      |                           ^~~~~~~
pp_pack.c:2393:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2393 |                     fromlen = len;
      |                               ^~~
pp_pack.c:2399:68: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2399 |                 GROWING(0, cat, start, cur, fromlen*(UTF8_EXPAND-1)+len);
      |                                                                    ^
pp_pack.c:377:20: note: in definition of macro 'GROWING'
  377 |     STRLEN glen = (in_len);                     \
      |                    ^~~~~~
pp_pack.c:2400:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2400 |                 len -= fromlen;
      |                     ^~
pp_pack.c:2400:24: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2400 |                 len -= fromlen;
      |                        ^~~~~~~
pp_pack.c:2409:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2409 |                     len = fromlen;
      |                           ^~~~~~~
pp_pack.c:2413:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2413 |                     fromlen = len;
      |                               ^~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2416:17: note: in expansion of macro 'GROWING'
 2416 |                 GROWING(0, cat, start, cur, len);
      |                 ^~~~~~~
pp_pack.c:2419:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2419 |                 len -= fromlen;
      |                     ^~
pp_pack.c:2419:24: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2419 |                 len -= fromlen;
      |                        ^~~~~~~
pp_pack.c:2421:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2421 |             memset(cur, datumtype == 'A' ? ' ' : '\0', len);
      |                                                        ^~~
pp_pack.c:2444:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2444 |             if (howlen == e_star) len = fromlen;
      |                                         ^~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2446:13: note: in expansion of macro 'GROWING'
 2446 |             GROWING(utf8, cat, start, cur, field_len);
      |             ^~~~~~~
pp_pack.c:2447:47: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2447 |             if (len > (SSize_t)fromlen) len = fromlen;
      |                                               ^~~~~~~
pp_pack.c:415:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |                                         ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:415:11: note: in expansion of macro 'utf8n_to_uvchr'
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |           ^~~~~~~~~~~~~~
pp_pack.c:2454:25: note: in expansion of macro 'NEXT_UNI_VAL'
 2454 |                         NEXT_UNI_VAL(val, cur, str, end, utf8_flags);
      |                         ^~~~~~~~~~~~
pp_pack.c:415:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |                                         ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:415:11: note: in expansion of macro 'utf8n_to_uvchr'
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |           ^~~~~~~~~~~~~~
pp_pack.c:2468:25: note: in expansion of macro 'NEXT_UNI_VAL'
 2468 |                         NEXT_UNI_VAL(val, cur, str, end, utf8_flags);
      |                         ^~~~~~~~~~~~
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pp_pack.c:2491:13: note: in expansion of macro 'Zero'
 2491 |             Zero(cur, field_len, char);
      |             ^~~~
pp_pack.c:2513:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2513 |             if (howlen == e_star) len = fromlen;
      |                                         ^~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2515:13: note: in expansion of macro 'GROWING'
 2515 |             GROWING(utf8, cat, start, cur, field_len);
      |             ^~~~~~~
pp_pack.c:2516:63: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2516 |             if (!utf8_source && len > (SSize_t)fromlen) len = fromlen;
      |                                                               ^~~~~~~
pp_pack.c:415:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |                                         ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:415:11: note: in expansion of macro 'utf8n_to_uvchr'
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |           ^~~~~~~~~~~~~~
pp_pack.c:2523:25: note: in expansion of macro 'NEXT_UNI_VAL'
 2523 |                         NEXT_UNI_VAL(val, cur, str, end, utf8_flags);
      |                         ^~~~~~~~~~~~
handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
handy.h:1821:22: note: in expansion of macro 'isALPHA_A'
 1821 | #define isALPHA(c)   isALPHA_A(c)
      |                      ^~~~~~~~~
pp_pack.c:2524:42: note: in expansion of macro 'isALPHA'
 2524 |                         if (val < 256 && isALPHA(val))
      |                                          ^~~~~~~
pp_pack.c:415:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |                                         ^
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
pp_pack.c:415:11: note: in expansion of macro 'utf8n_to_uvchr'
  415 |     val = utf8n_to_uvchr((U8 *) str, end-str, &retlen, utf8_flags);     \
      |           ^~~~~~~~~~~~~~
pp_pack.c:2542:25: note: in expansion of macro 'NEXT_UNI_VAL'
 2542 |                         NEXT_UNI_VAL(val, cur, str, end, utf8_flags);
      |                         ^~~~~~~~~~~~
handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
handy.h:1821:22: note: in expansion of macro 'isALPHA_A'
 1821 | #define isALPHA(c)   isALPHA_A(c)
      |                      ^~~~~~~~~
pp_pack.c:2543:42: note: in expansion of macro 'isALPHA'
 2543 |                         if (val < 256 && isALPHA(val))
      |                                          ^~~~~~~
pp_pack.c:2548:33: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 2548 |                         bits |= ((*str++ + 9) & 0xf) << 4;
      |                                 ^
handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
pp_pack.c:2566:13: note: in expansion of macro 'Zero'
 2566 |             Zero(cur, field_len, char);
      |             ^~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2611:25: note: in expansion of macro 'SvCUR_set'
 2611 |                         SvCUR_set(cat, cur - start);
      |                         ^~~~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2613:25: note: in expansion of macro 'GROWING'
 2613 |                         GROWING(0, cat, start, cur, len+UTF8_MAXLEN);
      |                         ^~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2621:29: note: in expansion of macro 'SvCUR_set'
 2621 |                             SvCUR_set(cat, cur - start);
      |                             ^~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2637:25: note: in expansion of macro 'SvCUR_set'
 2637 |                         SvCUR_set(cat, cur - start);
      |                         ^~~~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2638:25: note: in expansion of macro 'GROWING'
 2638 |                         GROWING(0, cat, start, cur, len+1);
      |                         ^~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2670:25: note: in expansion of macro 'SvCUR_set'
 2670 |                         SvCUR_set(cat, cur - start);
      |                         ^~~~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2671:25: note: in expansion of macro 'GROWING'
 2671 |                         GROWING(0, cat, start, cur,
      |                         ^~~~~~~
pp_pack.c:2675:56: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2675 |                     cur = my_bytes_to_utf8(buffer, endb-buffer, cur, 0);
      |                                                    ~~~~^~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2679:25: note: in expansion of macro 'SvCUR_set'
 2679 |                         SvCUR_set(cat, cur - start);
      |                         ^~~~~~~~~
pp_pack.c:377:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  377 |     STRLEN glen = (in_len);                     \
      |                   ^
pp_pack.c:2680:25: note: in expansion of macro 'GROWING'
 2680 |                         GROWING(0, cat, start, cur, len+UTF8_MAXLEN);
      |                         ^~~~~~~
In file included from perl.h:1482:
pp_pack.c:2792:39: warning: conversion to '__uint16_t' {aka 'short unsigned int'} from 'I16' {aka 'short int'} may change the sign of the result [-Wsign-conversion]
 2792 |                 ai16 = PerlSock_htons(ai16);
      |                                       ^~~~
pp_pack.c:2792:24: note: in expansion of macro 'PerlSock_htons'
 2792 |                 ai16 = PerlSock_htons(ai16);
      |                        ^~~~~~~~~~~~~~
pp_pack.c:2792:24: warning: conversion to 'I16' {aka 'short int'} from '__uint16_t' {aka 'short unsigned int'} may change the sign of the result [-Wsign-conversion]
perl.h:4297:25: warning: conversion from 'int' to 'I16' {aka 'short int'} changes the value of '65535' [-Wconversion]
 4297 | #  define vtohs(x)      ((x)&0xFFFF)
      |                         ^
perl.h:4299:25: note: in expansion of macro 'vtohs'
 4299 | #  define htovs(x)      vtohs(x)
      |                         ^~~~~
pp_pack.c:2802:24: note: in expansion of macro 'htovs'
 2802 |                 ai16 = htovs(ai16);
      |                        ^~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:2880:21: note: in expansion of macro 'SvCUR_set'
 2880 |                     SvCUR_set(cat, cur - start);
      |                     ^~~~~~~~~
pp_pack.c:390:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  390 |     const STRLEN glen = (in_len);               \
      |                         ^
pp_pack.c:2899:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2899 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:395:9: note: in expansion of macro 'SvCUR_set'
  395 |         SvCUR_set((cat), (cur) - (start));      \
      |         ^~~~~~~~~
pp_pack.c:2899:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2899 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
pp_pack.c:390:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  390 |     const STRLEN glen = (in_len);               \
      |                         ^
pp_pack.c:2932:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2932 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:395:9: note: in expansion of macro 'SvCUR_set'
  395 |         SvCUR_set((cat), (cur) - (start));      \
      |         ^~~~~~~~~
pp_pack.c:2932:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2932 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
embed.h:1884:33: warning: conversion from 'int' to 'char' may change value [-Wconversion]
 1884 | #define div128(a,b)             S_div128(aTHX_ a,b)
      |                                 ^~~~~~~~
embed.h:1884:33: note: in definition of macro 'div128'
 1884 | #define div128(a,b)             S_div128(aTHX_ a,b)
      |                                 ^~~~~~~~
pp_pack.c:390:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  390 |     const STRLEN glen = (in_len);               \
      |                         ^
pp_pack.c:2952:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2952 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:395:9: note: in expansion of macro 'SvCUR_set'
  395 |         SvCUR_set((cat), (cur) - (start));      \
      |         ^~~~~~~~~
pp_pack.c:2952:21: note: in expansion of macro 'PUSH_GROWING_BYTES'
 2952 |                     PUSH_GROWING_BYTES(utf8, cat, start, cur,
      |                     ^~~~~~~~~~~~~~~~~~
pp_pack.c:3095:74: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3095 |             GROWING(utf8, cat, start, cur, (fromlen+2) / 3 * 4 + (fromlen+len-1)/len * 2);
      |                                                                          ^
pp_pack.c:377:20: note: in definition of macro 'GROWING'
  377 |     STRLEN glen = (in_len);                     \
      |                    ^~~~~~
pp_pack.c:3095:81: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3095 |             GROWING(utf8, cat, start, cur, (fromlen+2) / 3 * 4 + (fromlen+len-1)/len * 2);
      |                                                                                 ^
pp_pack.c:377:20: note: in definition of macro 'GROWING'
  377 |     STRLEN glen = (in_len);                     \
      |                    ^~~~~~
pp_pack.c:3104:28: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3104 |                     todo = fromlen;
      |                            ^~~~~~~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:3110:25: note: in expansion of macro 'SvCUR_set'
 3110 |                         SvCUR_set(cat, cur - start);
      |                         ^~~~~~~~~
pp_pack.c:3120:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3120 |                 PUSH_BYTES(utf8, cur, hunk, end-hunk, 0);
      |                                             ~~~^~~~~
pp_pack.c:351:46: note: in definition of macro 'PUSH_BYTES'
  351 |         (cur) = my_bytes_to_utf8((U8 *) buf, len, (cur), needs_swap);       \
      |                                              ^~~
pp_pack.c:3120:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3120 |                 PUSH_BYTES(utf8, cur, hunk, end-hunk, 0);
      |                                             ~~~^~~~~
pp_pack.c:354:48: note: in definition of macro 'PUSH_BYTES'
  354 |             S_reverse_copy((char *)(buf), cur, len);            \
      |                                                ^~~
handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_pack.c:356:13: note: in expansion of macro 'Copy'
  356 |             Copy(buf, cur, len, char);                          \
      |             ^~~~
pp_pack.c:3120:17: note: in expansion of macro 'PUSH_BYTES'
 3120 |                 PUSH_BYTES(utf8, cur, hunk, end-hunk, 0);
      |                 ^~~~~~~~~~
pp_pack.c:3121:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3121 |                 fromlen -= todo;
      |                         ^~
sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
pp_pack.c:3127:9: note: in expansion of macro 'SvCUR_set'
 3127 |         SvCUR_set(cat, cur - start);
      |         ^~~~~~~~~
pp_pack.c: In function 'Perl_pp_pack':
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o pp_sort.o pp_sort.c
In file included from perl.h:7246,
                 from pp_sort.c:31:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from perl.h:5841:
pp_sort.c: In function 'Perl_pp_sort':
hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
embed.h:209:72: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                        ^
gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
pp_sort.c:748:54: note: in expansion of macro 'GvNAMELEN'
  748 |                             GvSTASH(gv), GvNAME(gv), GvNAMELEN(gv),
      |                                                      ^~~~~~~~~
sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from perl.h:4163:
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
gv.h:174:46: note: in definition of macro 'GvINTRO_off'
  174 | #define GvINTRO_off(gv)         (GvFLAGS(gv) &= ~GVf_INTRO)
      |                                              ^~
pp_sort.c:901:44: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  901 |             Perl_sortsv_flags(aTHX_ start, max,
      |                                            ^~~
pp_sort.c:931:68: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  931 |                             sortsv_amagic_i_ncmp_desc(aTHX_ start, max, sort_flags);
      |                                                                    ^~~
pp_sort.c:933:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  933 |                             sortsv_amagic_i_ncmp(aTHX_ start, max, sort_flags);
      |                                                               ^~~
pp_sort.c:936:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  936 |                             sortsv_i_ncmp_desc(aTHX_ start, max, sort_flags);
      |                                                             ^~~
pp_sort.c:938:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  938 |                             sortsv_i_ncmp(aTHX_ start, max, sort_flags);
      |                                                        ^~~
pp_sort.c:943:66: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  943 |                             sortsv_amagic_ncmp_desc(aTHX_ start, max, sort_flags);
      |                                                                  ^~~
pp_sort.c:945:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  945 |                             sortsv_amagic_ncmp(aTHX_ start, max, sort_flags);
      |                                                             ^~~
pp_sort.c:948:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  948 |                             sortsv_ncmp_desc(aTHX_ start, max, sort_flags);
      |                                                           ^~~
pp_sort.c:950:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  950 |                             sortsv_ncmp(aTHX_ start, max, sort_flags);
      |                                                      ^~~
pp_sort.c:957:68: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  957 |                         sortsv_amagic_cmp_locale_desc(aTHX_ start, max, sort_flags);
      |                                                                    ^~~
pp_sort.c:959:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  959 |                         sortsv_amagic_cmp_locale(aTHX_ start, max, sort_flags);
      |                                                               ^~~
pp_sort.c:962:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  962 |                         sortsv_cmp_locale_desc(aTHX_ start, max, sort_flags);
      |                                                             ^~~
pp_sort.c:964:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  964 |                         sortsv_cmp_locale(aTHX_ start, max, sort_flags);
      |                                                        ^~~
pp_sort.c:970:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  970 |                         sortsv_amagic_cmp_desc(aTHX_ start, max, sort_flags);
      |                                                             ^~~
pp_sort.c:972:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  972 |                         sortsv_amagic_cmp(aTHX_ start, max, sort_flags);
      |                                                        ^~~
pp_sort.c:975:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  975 |                         sortsv_cmp_desc(aTHX_ start, max, sort_flags);
      |                                                      ^~~
pp_sort.c:977:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  977 |                         sortsv_cmp(aTHX_ start, max, sort_flags);
      |                                                 ^~~
In file included from perl.h:3003:
handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
pp_sort.c:1027:17: note: in expansion of macro 'Copy'
 1027 |                 Copy(base, AvARRAY(av), max, SV*);
      |                 ^~~~
In file included from perl.h:4170:
pp_sort.c: In function 'S_sortcv_stacked':
av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
pp_sort.c: At top level:
pp_sort.c:334:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  334 | S_sortsv_flags_impl(pTHX_ gptr *base, size_t nmemb, SVCOMPARE_t cmp, U32 flags)
      | ^~~~~~~~~~~~~~~~~~~
pp_sort.c:175:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  175 | dynprep(pTHX_ gptr *list1, gptr *list2, size_t nmemb, const SVCOMPARE_t cmp)
      | ^~~~~~~
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o caretx.o caretx.c
In file included from perl.h:7246,
                 from caretx.c:32:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
caretx.c: In function 'Perl_set_caret_X':
caretx.c:126:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  126 |     if (len > 0 && memchr(buf, '/', len)) {
      |                                     ^~~
In file included from perl.h:5841:
caretx.c:127:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  127 |         sv_setpvn(caret_x, buf, len);
      |                                 ^~~
embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o dquote.o dquote.c
In file included from perl.h:7246,
                 from dquote.c:10:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
dquote.c: In function 'Perl_grok_bslash_o':
dquote.c:295:44: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  295 |     rbrace = (char *) memchr(*s, '}', send - *s);
      |                                       ~~~~~^~~~
In file included from perl.h:3003:
handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
handy.h:2409:29: note: in expansion of macro 'isOCTAL_A'
 2409 | #define isOCTAL(c)          isOCTAL_A(c)
      |                             ^~~~~~~~~
dquote.c:304:29: note: in expansion of macro 'isOCTAL'
  304 |         while (*s < send && isOCTAL(**s)) {
      |                             ^~~~~~~
dquote.c:324:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  324 |     numbers_len = e - *s;
      |                   ^
dquote.c: In function 'Perl_grok_bslash_x':
dquote.c:481:44: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  481 |     rbrace = (char *) memchr(*s, '}', send - *s);
      |                                       ~~~~~^~~~
dquote.c:509:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  509 |     numbers_len = e - *s;
      |                   ^
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o time64.o time64.c
In file included from perl.h:7246,
                 from time64.c:44:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -DPERL_CORE  -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fwrapv -fno-strict-aliasing -fPIC -Wno-unused-function -c -o builtin.o builtin.c
In file included from perl.h:7246,
                 from builtin.c:15:
inline.h: In function 'Perl_av_count':
inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
inline.h: In function 'S_strip_spaces':
inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from perl.h:4159:
inline.h: In function 'Perl_SvAMAGIC_off':
sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
inline.h: In function 'Perl_SvPADSTALE_off':
inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
inline.h: In function 'S_sv_or_pv_pos_u2b':
inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
inline.h: In function 'Perl_is_utf8_non_invariant_string':
inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
inline.h: In function 'Perl_is_utf8_string_flags':
inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h: In function 'Perl_is_utf8_string_loclen':
inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_isUTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
inline.h: In function 'Perl_is_strict_utf8_string_loclen':
inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_is_utf8_string_loclen_flags':
inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from regexp.h:21,
                 from perl.h:4160:
inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from perl.h:7247:
sv_inline.h: In function 'Perl_newSV_type':
sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
builtin.c: In function 'XS_builtin_trim':
builtin.c:182:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  182 |         len -= (end - cur_end);
      |             ^~
sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
builtin.c: In function 'ck_builtin_func1':
builtin.c:301:21: warning: conversion from 'IV' {aka 'long int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
  301 |     OPCODE opcode = builtin->ckval;
      |                     ^~~~~~~
sv_inline.h: At top level:
sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
ln -sf libperl.so.5.36.0 libperl.so.5
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now -Wl,-E -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now -Wl,-soname -Wl,libperl.so.5 -o libperl.so.5.36.0 op.o perl.o av.o scope.o doop.o doio.o dump.o gv.o hv.o mg.o reentr.o mro_core.o perly.o pp.o pp_hot.o pp_ctl.o pp_sys.o regcomp.o regexec.o utf8.o sv.o taint.o toke.o util.o deb.o run.o universal.o pad.o globals.o keywords.o perlio.o numeric.o mathoms.o locale.o pp_pack.o pp_sort.o caretx.o dquote.o time64.o builtin.o DynaLoader.o -lm -lcrypt -lpthread -ldl
./miniperl_top statars  > static.list
./miniperl_top extlibs  > ext.libs
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now -Wl,-E -o perl perlmain.o libperl.so.5.36.0  -lm -lcrypt -lpthread -ldl 
./miniperl_top make_ext_Makefile.pl cpan/Archive-Tar/Makefile.PL
Creating cpan/Archive-Tar/Makefile.PL for Archive::Tar
cd cpan/Archive-Tar/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Archive::Tar
make -C cpan/Archive-Tar/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Archive-Tar'
cp lib/Archive/Tar.pm ../../lib/Archive/Tar.pm
cp lib/Archive/Tar/Constant.pm ../../lib/Archive/Tar/Constant.pm
cp lib/Archive/Tar/File.pm ../../lib/Archive/Tar/File.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Archive-Tar'
./miniperl_top make_ext_Makefile.pl cpan/autodie/Makefile.PL
Creating cpan/autodie/Makefile.PL for autodie
cd cpan/autodie/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for autodie
make -C cpan/autodie/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/autodie'
cp lib/autodie/exception/system.pm ../../lib/autodie/exception/system.pm
cp lib/autodie/exception.pm ../../lib/autodie/exception.pm
cp lib/autodie.pm ../../lib/autodie.pm
cp lib/autodie/Scope/GuardStack.pm ../../lib/autodie/Scope/GuardStack.pm
cp lib/autodie/hints.pm ../../lib/autodie/hints.pm
cp lib/autodie/Util.pm ../../lib/autodie/Util.pm
cp lib/autodie/Scope/Guard.pm ../../lib/autodie/Scope/Guard.pm
cp lib/Fatal.pm ../../lib/Fatal.pm
cp lib/autodie/skip.pm ../../lib/autodie/skip.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/autodie'
./miniperl_top make_ext_Makefile.pl cpan/AutoLoader/Makefile.PL
Creating cpan/AutoLoader/Makefile.PL for AutoLoader
cd cpan/AutoLoader/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for AutoLoader
make -C cpan/AutoLoader/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/AutoLoader'
cp lib/AutoSplit.pm ../../lib/AutoSplit.pm
cp lib/AutoLoader.pm ../../lib/AutoLoader.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/AutoLoader'
./miniperl_top make_ext_Makefile.pl cpan/bignum/Makefile.PL
Creating cpan/bignum/Makefile.PL for bignum
cd cpan/bignum/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for bignum
make -C cpan/bignum/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/bignum'
cp lib/bigrat.pm ../../lib/bigrat.pm
cp lib/Math/BigInt/Trace.pm ../../lib/Math/BigInt/Trace.pm
cp lib/Math/BigRat/Trace.pm ../../lib/Math/BigRat/Trace.pm
cp lib/bigfloat.pm ../../lib/bigfloat.pm
cp lib/Math/BigFloat/Trace.pm ../../lib/Math/BigFloat/Trace.pm
cp lib/bignum.pm ../../lib/bignum.pm
cp lib/bigint.pm ../../lib/bigint.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/bignum'
./miniperl_top make_ext_Makefile.pl cpan/Config-Perl-V/Makefile.PL
Creating cpan/Config-Perl-V/Makefile.PL for Config::Perl::V
cd cpan/Config-Perl-V/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Config::Perl::V
make -C cpan/Config-Perl-V/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Config-Perl-V'
cp V.pm ../../lib/Config/Perl/V.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Config-Perl-V'
./miniperl_top make_ext_Makefile.pl cpan/CPAN/Makefile.PL
Creating cpan/CPAN/Makefile.PL for CPAN
cd cpan/CPAN/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for CPAN
make -C cpan/CPAN/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN'
cp lib/CPAN/Index.pm ../../lib/CPAN/Index.pm
cp lib/CPAN/Author.pm ../../lib/CPAN/Author.pm
cp lib/CPAN/API/HOWTO.pod ../../lib/CPAN/API/HOWTO.pod
cp lib/CPAN/Prompt.pm ../../lib/CPAN/Prompt.pm
cp lib/CPAN/InfoObj.pm ../../lib/CPAN/InfoObj.pm
cp lib/CPAN/Shell.pm ../../lib/CPAN/Shell.pm
cp lib/CPAN/Exception/yaml_not_installed.pm ../../lib/CPAN/Exception/yaml_not_installed.pm
cp lib/CPAN/Distribution.pm ../../lib/CPAN/Distribution.pm
cp lib/CPAN/Kwalify/distroprefs.dd ../../lib/CPAN/Kwalify/distroprefs.dd
cp lib/CPAN.pm ../../lib/CPAN.pm
cp lib/CPAN/Debug.pm ../../lib/CPAN/Debug.pm
cp lib/CPAN/Exception/yaml_process_error.pm ../../lib/CPAN/Exception/yaml_process_error.pm
cp lib/CPAN/Module.pm ../../lib/CPAN/Module.pm
cp lib/CPAN/Distroprefs.pm ../../lib/CPAN/Distroprefs.pm
cp lib/CPAN/Nox.pm ../../lib/CPAN/Nox.pm
cp lib/CPAN/Version.pm ../../lib/CPAN/Version.pm
cp lib/CPAN/Exception/blocked_urllist.pm ../../lib/CPAN/Exception/blocked_urllist.pm
cp lib/CPAN/Exception/RecursiveDependency.pm ../../lib/CPAN/Exception/RecursiveDependency.pm
cp lib/CPAN/DeferredCode.pm ../../lib/CPAN/DeferredCode.pm
cp lib/CPAN/FirstTime.pm ../../lib/CPAN/FirstTime.pm
cp lib/App/Cpan.pm ../../lib/App/Cpan.pm
cp lib/CPAN/Complete.pm ../../lib/CPAN/Complete.pm
cp lib/CPAN/Bundle.pm ../../lib/CPAN/Bundle.pm
cp lib/CPAN/Tarzip.pm ../../lib/CPAN/Tarzip.pm
cp lib/CPAN/Distrostatus.pm ../../lib/CPAN/Distrostatus.pm
cp lib/CPAN/HandleConfig.pm ../../lib/CPAN/HandleConfig.pm
cp lib/CPAN/URL.pm ../../lib/CPAN/URL.pm
cp lib/CPAN/CacheMgr.pm ../../lib/CPAN/CacheMgr.pm
cp lib/CPAN/Kwalify.pm ../../lib/CPAN/Kwalify.pm
cp lib/CPAN/Queue.pm ../../lib/CPAN/Queue.pm
cp lib/CPAN/Mirrors.pm ../../lib/CPAN/Mirrors.pm
cp lib/CPAN/HTTP/Credentials.pm ../../lib/CPAN/HTTP/Credentials.pm
cp lib/CPAN/FTP/netrc.pm ../../lib/CPAN/FTP/netrc.pm
cp lib/CPAN/Plugin/Specfile.pm ../../lib/CPAN/Plugin/Specfile.pm
cp lib/CPAN/Plugin.pm ../../lib/CPAN/Plugin.pm
cp lib/CPAN/LWP/UserAgent.pm ../../lib/CPAN/LWP/UserAgent.pm
cp lib/CPAN/HTTP/Client.pm ../../lib/CPAN/HTTP/Client.pm
cp lib/CPAN/Kwalify/distroprefs.yml ../../lib/CPAN/Kwalify/distroprefs.yml
cp lib/CPAN/FTP.pm ../../lib/CPAN/FTP.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN'
./miniperl_top make_ext_Makefile.pl cpan/CPAN-Meta/Makefile.PL
Creating cpan/CPAN-Meta/Makefile.PL for CPAN::Meta
cd cpan/CPAN-Meta/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for CPAN::Meta
make -C cpan/CPAN-Meta/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta'
cp lib/CPAN/Meta/History/Meta_1_0.pod ../../lib/CPAN/Meta/History/Meta_1_0.pod
cp lib/CPAN/Meta/History.pm ../../lib/CPAN/Meta/History.pm
cp lib/CPAN/Meta/History/Meta_1_1.pod ../../lib/CPAN/Meta/History/Meta_1_1.pod
cp lib/CPAN/Meta/History/Meta_1_3.pod ../../lib/CPAN/Meta/History/Meta_1_3.pod
cp lib/CPAN/Meta/History/Meta_1_4.pod ../../lib/CPAN/Meta/History/Meta_1_4.pod
cp lib/Parse/CPAN/Meta.pm ../../lib/Parse/CPAN/Meta.pm
cp lib/CPAN/Meta/Validator.pm ../../lib/CPAN/Meta/Validator.pm
cp lib/CPAN/Meta.pm ../../lib/CPAN/Meta.pm
cp lib/CPAN/Meta/History/Meta_1_2.pod ../../lib/CPAN/Meta/History/Meta_1_2.pod
cp lib/CPAN/Meta/Prereqs.pm ../../lib/CPAN/Meta/Prereqs.pm
cp lib/CPAN/Meta/Merge.pm ../../lib/CPAN/Meta/Merge.pm
cp lib/CPAN/Meta/Converter.pm ../../lib/CPAN/Meta/Converter.pm
cp lib/CPAN/Meta/Feature.pm ../../lib/CPAN/Meta/Feature.pm
cp lib/CPAN/Meta/Spec.pm ../../lib/CPAN/Meta/Spec.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta'
./miniperl_top make_ext_Makefile.pl cpan/CPAN-Meta-Requirements/Makefile.PL
Creating cpan/CPAN-Meta-Requirements/Makefile.PL for CPAN::Meta::Requirements
cd cpan/CPAN-Meta-Requirements/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for CPAN::Meta::Requirements
make -C cpan/CPAN-Meta-Requirements/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta-Requirements'
cp lib/CPAN/Meta/Requirements.pm ../../lib/CPAN/Meta/Requirements.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta-Requirements'
./miniperl_top make_ext_Makefile.pl cpan/CPAN-Meta-YAML/Makefile.PL
Creating cpan/CPAN-Meta-YAML/Makefile.PL for CPAN::Meta::YAML
cd cpan/CPAN-Meta-YAML/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for CPAN::Meta::YAML
make -C cpan/CPAN-Meta-YAML/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta-YAML'
cp lib/CPAN/Meta/YAML.pm ../../lib/CPAN/Meta/YAML.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/CPAN-Meta-YAML'
./miniperl_top make_ext_Makefile.pl cpan/Digest/Makefile.PL
Creating cpan/Digest/Makefile.PL for Digest
cd cpan/Digest/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Digest
make -C cpan/Digest/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest'
cp lib/Digest/file.pm ../../lib/Digest/file.pm
cp lib/Digest/base.pm ../../lib/Digest/base.pm
cp lib/Digest.pm ../../lib/Digest.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest'
./miniperl_top make_ext_Makefile.pl cpan/experimental/Makefile.PL
Creating cpan/experimental/Makefile.PL for experimental
cd cpan/experimental/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for experimental
make -C cpan/experimental/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/experimental'
cp lib/experimental.pm ../../lib/experimental.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/experimental'
./miniperl_top make_ext_Makefile.pl cpan/ExtUtils-Constant/Makefile.PL
Creating cpan/ExtUtils-Constant/Makefile.PL for ExtUtils::Constant
cd cpan/ExtUtils-Constant/ && ../../miniperl_top Makefile.PL PERL_CORE=1 PERL=../../miniperl_top
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::Constant
make -C cpan/ExtUtils-Constant/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Constant'
cp lib/ExtUtils/Constant/Utils.pm ../../lib/ExtUtils/Constant/Utils.pm
cp lib/ExtUtils/Constant/Base.pm ../../lib/ExtUtils/Constant/Base.pm
cp lib/ExtUtils/Constant/ProxySubs.pm ../../lib/ExtUtils/Constant/ProxySubs.pm
cp lib/ExtUtils/Constant.pm ../../lib/ExtUtils/Constant.pm
cp lib/ExtUtils/Constant/XS.pm ../../lib/ExtUtils/Constant/XS.pm
Manifying 4 pod documents
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Constant'
./miniperl_top make_ext_Makefile.pl cpan/ExtUtils-Install/Makefile.PL
Creating cpan/ExtUtils-Install/Makefile.PL for ExtUtils::Install
cd cpan/ExtUtils-Install/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::Install
make -C cpan/ExtUtils-Install/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Install'
cp lib/ExtUtils/Packlist.pm ../../lib/ExtUtils/Packlist.pm
cp lib/ExtUtils/Install.pm ../../lib/ExtUtils/Install.pm
cp lib/ExtUtils/Installed.pm ../../lib/ExtUtils/Installed.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Install'
./miniperl_top make_ext_Makefile.pl cpan/ExtUtils-MakeMaker/Makefile.PL
Creating cpan/ExtUtils-MakeMaker/Makefile.PL for ExtUtils::MakeMaker
cd cpan/ExtUtils-MakeMaker/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::MakeMaker
make -C cpan/ExtUtils-MakeMaker/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker'
cp lib/ExtUtils/MM_AIX.pm ../../lib/ExtUtils/MM_AIX.pm
cp lib/ExtUtils/MM_NW5.pm ../../lib/ExtUtils/MM_NW5.pm
cp lib/ExtUtils/MM_DOS.pm ../../lib/ExtUtils/MM_DOS.pm
cp lib/ExtUtils/MM_BeOS.pm ../../lib/ExtUtils/MM_BeOS.pm
cp lib/ExtUtils/MakeMaker/version/regex.pm ../../lib/ExtUtils/MakeMaker/version/regex.pm
cp lib/ExtUtils/MM_Win95.pm ../../lib/ExtUtils/MM_Win95.pm
cp lib/ExtUtils/MM_Darwin.pm ../../lib/ExtUtils/MM_Darwin.pm
cp lib/ExtUtils/Command.pm ../../lib/ExtUtils/Command.pm
cp lib/ExtUtils/MM_Any.pm ../../lib/ExtUtils/MM_Any.pm
cp lib/ExtUtils/MM_Unix.pm ../../lib/ExtUtils/MM_Unix.pm
cp lib/ExtUtils/MM_VOS.pm ../../lib/ExtUtils/MM_VOS.pm
cp lib/ExtUtils/MM_UWIN.pm ../../lib/ExtUtils/MM_UWIN.pm
cp lib/ExtUtils/MakeMaker/FAQ.pod ../../lib/ExtUtils/MakeMaker/FAQ.pod
cp lib/ExtUtils/MM_VMS.pm ../../lib/ExtUtils/MM_VMS.pm
cp lib/ExtUtils/MY.pm ../../lib/ExtUtils/MY.pm
cp lib/ExtUtils/MM_MacOS.pm ../../lib/ExtUtils/MM_MacOS.pm
cp lib/ExtUtils/MM_Cygwin.pm ../../lib/ExtUtils/MM_Cygwin.pm
cp lib/ExtUtils/MakeMaker/Tutorial.pod ../../lib/ExtUtils/MakeMaker/Tutorial.pod
cp lib/ExtUtils/Command/MM.pm ../../lib/ExtUtils/Command/MM.pm
cp lib/ExtUtils/MM_OS2.pm ../../lib/ExtUtils/MM_OS2.pm
cp lib/ExtUtils/Mksymlists.pm ../../lib/ExtUtils/Mksymlists.pm
cp lib/ExtUtils/MakeMaker.pm ../../lib/ExtUtils/MakeMaker.pm
cp lib/ExtUtils/testlib.pm ../../lib/ExtUtils/testlib.pm
cp lib/ExtUtils/MM_Win32.pm ../../lib/ExtUtils/MM_Win32.pm
cp lib/ExtUtils/MM_QNX.pm ../../lib/ExtUtils/MM_QNX.pm
cp lib/ExtUtils/MakeMaker/version.pm ../../lib/ExtUtils/MakeMaker/version.pm
cp lib/ExtUtils/Mkbootstrap.pm ../../lib/ExtUtils/Mkbootstrap.pm
cp lib/ExtUtils/MM.pm ../../lib/ExtUtils/MM.pm
cp lib/ExtUtils/Liblist/Kid.pm ../../lib/ExtUtils/Liblist/Kid.pm
cp lib/ExtUtils/MakeMaker/Config.pm ../../lib/ExtUtils/MakeMaker/Config.pm
cp lib/ExtUtils/MM_OS390.pm ../../lib/ExtUtils/MM_OS390.pm
cp lib/ExtUtils/MakeMaker/Locale.pm ../../lib/ExtUtils/MakeMaker/Locale.pm
cp lib/ExtUtils/Liblist.pm ../../lib/ExtUtils/Liblist.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker'
./miniperl_top make_ext_Makefile.pl cpan/ExtUtils-Manifest/Makefile.PL
Creating cpan/ExtUtils-Manifest/Makefile.PL for ExtUtils::Manifest
cd cpan/ExtUtils-Manifest/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::Manifest
make -C cpan/ExtUtils-Manifest/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Manifest'
cp lib/ExtUtils/MANIFEST.SKIP ../../lib/ExtUtils/MANIFEST.SKIP
cp lib/ExtUtils/Manifest.pm ../../lib/ExtUtils/Manifest.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-Manifest'
./miniperl_top make_ext_Makefile.pl cpan/ExtUtils-PL2Bat/Makefile.PL
Creating cpan/ExtUtils-PL2Bat/Makefile.PL for ExtUtils::PL2Bat
cd cpan/ExtUtils-PL2Bat/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::PL2Bat
make -C cpan/ExtUtils-PL2Bat/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-PL2Bat'
cp lib/ExtUtils/PL2Bat.pm ../../lib/ExtUtils/PL2Bat.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-PL2Bat'
./miniperl_top make_ext_Makefile.pl cpan/File-Fetch/Makefile.PL
Creating cpan/File-Fetch/Makefile.PL for File::Fetch
cd cpan/File-Fetch/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::Fetch
make -C cpan/File-Fetch/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Fetch'
cp lib/File/Fetch.pm ../../lib/File/Fetch.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Fetch'
./miniperl_top make_ext_Makefile.pl cpan/File-Path/Makefile.PL
Creating cpan/File-Path/Makefile.PL for File::Path
cd cpan/File-Path/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::Path
make -C cpan/File-Path/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Path'
cp lib/File/Path.pm ../../lib/File/Path.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Path'
./miniperl_top make_ext_Makefile.pl cpan/File-Temp/Makefile.PL
Creating cpan/File-Temp/Makefile.PL for File::Temp
cd cpan/File-Temp/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::Temp
make -C cpan/File-Temp/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Temp'
cp lib/File/Temp.pm ../../lib/File/Temp.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/File-Temp'
./miniperl_top make_ext_Makefile.pl cpan/Getopt-Long/Makefile.PL
Creating cpan/Getopt-Long/Makefile.PL for Getopt::Long
cd cpan/Getopt-Long/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Getopt::Long
make -C cpan/Getopt-Long/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Getopt-Long'
cp lib/Getopt/Long.pm ../../lib/Getopt/Long.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Getopt-Long'
./miniperl_top make_ext_Makefile.pl cpan/HTTP-Tiny/Makefile.PL
Creating cpan/HTTP-Tiny/Makefile.PL for HTTP::Tiny
cd cpan/HTTP-Tiny/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for HTTP::Tiny
make -C cpan/HTTP-Tiny/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/HTTP-Tiny'
cp lib/HTTP/Tiny.pm ../../lib/HTTP/Tiny.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/HTTP-Tiny'
cd cpan/IO-Compress/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for IO::Compress
make -C cpan/IO-Compress/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Compress'
cp lib/IO/Uncompress/Inflate.pm ../../lib/IO/Uncompress/Inflate.pm
cp lib/IO/Compress/Base/Common.pm ../../lib/IO/Compress/Base/Common.pm
cp lib/IO/Uncompress/Gunzip.pm ../../lib/IO/Uncompress/Gunzip.pm
cp lib/IO/Compress/Adapter/Deflate.pm ../../lib/IO/Compress/Adapter/Deflate.pm
cp lib/IO/Compress/Zip.pm ../../lib/IO/Compress/Zip.pm
cp lib/IO/Compress/RawDeflate.pm ../../lib/IO/Compress/RawDeflate.pm
cp lib/IO/Compress/Adapter/Identity.pm ../../lib/IO/Compress/Adapter/Identity.pm
cp lib/IO/Uncompress/Bunzip2.pm ../../lib/IO/Uncompress/Bunzip2.pm
cp lib/IO/Compress/Zlib/Constants.pm ../../lib/IO/Compress/Zlib/Constants.pm
cp lib/IO/Compress/FAQ.pod ../../lib/IO/Compress/FAQ.pod
cp lib/IO/Compress/Gzip.pm ../../lib/IO/Compress/Gzip.pm
cp lib/IO/Compress/Bzip2.pm ../../lib/IO/Compress/Bzip2.pm
cp lib/IO/Uncompress/Base.pm ../../lib/IO/Uncompress/Base.pm
cp lib/File/GlobMapper.pm ../../lib/File/GlobMapper.pm
cp lib/IO/Compress/Adapter/Bzip2.pm ../../lib/IO/Compress/Adapter/Bzip2.pm
cp lib/IO/Uncompress/AnyInflate.pm ../../lib/IO/Uncompress/AnyInflate.pm
cp lib/IO/Uncompress/RawInflate.pm ../../lib/IO/Uncompress/RawInflate.pm
cp lib/IO/Compress/Base.pm ../../lib/IO/Compress/Base.pm
cp lib/IO/Uncompress/AnyUncompress.pm ../../lib/IO/Uncompress/AnyUncompress.pm
cp lib/IO/Compress/Deflate.pm ../../lib/IO/Compress/Deflate.pm
cp lib/IO/Uncompress/Unzip.pm ../../lib/IO/Uncompress/Unzip.pm
cp lib/IO/Compress/Zip/Constants.pm ../../lib/IO/Compress/Zip/Constants.pm
cp lib/Compress/Zlib.pm ../../lib/Compress/Zlib.pm
cp lib/IO/Uncompress/Adapter/Bunzip2.pm ../../lib/IO/Uncompress/Adapter/Bunzip2.pm
cp lib/IO/Compress/Gzip/Constants.pm ../../lib/IO/Compress/Gzip/Constants.pm
cp lib/IO/Compress/Zlib/Extra.pm ../../lib/IO/Compress/Zlib/Extra.pm
cp lib/IO/Uncompress/Adapter/Identity.pm ../../lib/IO/Uncompress/Adapter/Identity.pm
cp lib/IO/Uncompress/Adapter/Inflate.pm ../../lib/IO/Uncompress/Adapter/Inflate.pm
cp bin/streamzip blib/script/streamzip
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Compress/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/streamzip
cp bin/zipdetails blib/script/zipdetails
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Compress/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/zipdetails
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Compress'
./miniperl_top make_ext_Makefile.pl cpan/IO-Socket-IP/Makefile.PL
Creating cpan/IO-Socket-IP/Makefile.PL for IO::Socket::IP
cd cpan/IO-Socket-IP/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/IO/Socket/IP.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for IO::Socket::IP
make -C cpan/IO-Socket-IP/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Socket-IP'
cp lib/IO/Socket/IP.pm ../../lib/IO/Socket/IP.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Socket-IP'
./miniperl_top make_ext_Makefile.pl cpan/IO-Zlib/Makefile.PL
Creating cpan/IO-Zlib/Makefile.PL for IO::Zlib
cd cpan/IO-Zlib/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for IO::Zlib
make -C cpan/IO-Zlib/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Zlib'
cp Zlib.pm ../../lib/IO/Zlib.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IO-Zlib'
./miniperl_top make_ext_Makefile.pl cpan/IPC-Cmd/Makefile.PL
Creating cpan/IPC-Cmd/Makefile.PL for IPC::Cmd
cd cpan/IPC-Cmd/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for IPC::Cmd
make -C cpan/IPC-Cmd/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-Cmd'
cp lib/IPC/Cmd.pm ../../lib/IPC/Cmd.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-Cmd'
./miniperl_top make_ext_Makefile.pl cpan/JSON-PP/Makefile.PL
Creating cpan/JSON-PP/Makefile.PL for JSON::PP
cd cpan/JSON-PP/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for JSON::PP
make -C cpan/JSON-PP/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/JSON-PP'
cp lib/JSON/PP.pm ../../lib/JSON/PP.pm
cp lib/JSON/PP/Boolean.pm ../../lib/JSON/PP/Boolean.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/JSON-PP'
cd cpan/libnet/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Net
make -C cpan/libnet/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/libnet'
cp lib/Net/Time.pm ../../lib/Net/Time.pm
cp lib/Net/Domain.pm ../../lib/Net/Domain.pm
cp lib/Net/Config.pm ../../lib/Net/Config.pm
cp lib/Net/Netrc.pm ../../lib/Net/Netrc.pm
cp lib/Net/FTP/A.pm ../../lib/Net/FTP/A.pm
cp lib/Net/SMTP.pm ../../lib/Net/SMTP.pm
cp lib/Net/FTP/dataconn.pm ../../lib/Net/FTP/dataconn.pm
cp lib/Net/Cmd.pm ../../lib/Net/Cmd.pm
cp lib/Net/FTP/I.pm ../../lib/Net/FTP/I.pm
cp lib/Net/FTP/E.pm ../../lib/Net/FTP/E.pm
cp lib/Net/FTP.pm ../../lib/Net/FTP.pm
cp lib/Net/libnetFAQ.pod ../../lib/Net/libnetFAQ.pod
cp lib/Net/POP3.pm ../../lib/Net/POP3.pm
cp lib/Net/NNTP.pm ../../lib/Net/NNTP.pm
cp lib/Net/FTP/L.pm ../../lib/Net/FTP/L.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/libnet'
./miniperl_top make_ext_Makefile.pl cpan/Locale-Maketext-Simple/Makefile.PL
Creating cpan/Locale-Maketext-Simple/Makefile.PL for Locale::Maketext::Simple
cd cpan/Locale-Maketext-Simple/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Locale::Maketext::Simple
make -C cpan/Locale-Maketext-Simple/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Locale-Maketext-Simple'
cp lib/Locale/Maketext/Simple.pm ../../lib/Locale/Maketext/Simple.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Locale-Maketext-Simple'
./miniperl_top make_ext_Makefile.pl cpan/Math-BigInt/Makefile.PL
Creating cpan/Math-BigInt/Makefile.PL for Math::BigInt
cd cpan/Math-BigInt/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Math::BigInt
make -C cpan/Math-BigInt/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt'
cp lib/Math/BigInt.pm ../../lib/Math/BigInt.pm
cp lib/Math/BigFloat.pm ../../lib/Math/BigFloat.pm
cp lib/Math/BigInt/Lib.pm ../../lib/Math/BigInt/Lib.pm
cp lib/Math/BigInt/Calc.pm ../../lib/Math/BigInt/Calc.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt'
./miniperl_top make_ext_Makefile.pl cpan/Math-BigRat/Makefile.PL
Creating cpan/Math-BigRat/Makefile.PL for Math::BigRat
cd cpan/Math-BigRat/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Math::BigRat
make -C cpan/Math-BigRat/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigRat'
cp lib/Math/BigRat.pm ../../lib/Math/BigRat.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigRat'
./miniperl_top make_ext_Makefile.pl cpan/Math-Complex/Makefile.PL
Creating cpan/Math-Complex/Makefile.PL for Math::Complex
cd cpan/Math-Complex/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Math::Complex
make -C cpan/Math-Complex/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-Complex'
cp lib/Math/Trig.pm ../../lib/Math/Trig.pm
cp lib/Math/Complex.pm ../../lib/Math/Complex.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-Complex'
./miniperl_top make_ext_Makefile.pl cpan/Memoize/Makefile.PL
Creating cpan/Memoize/Makefile.PL for Memoize
cd cpan/Memoize/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Memoize
make -C cpan/Memoize/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Memoize'
cp Memoize/NDBM_File.pm ../../lib/Memoize/NDBM_File.pm
cp Memoize/ExpireFile.pm ../../lib/Memoize/ExpireFile.pm
cp Memoize/Storable.pm ../../lib/Memoize/Storable.pm
cp Memoize/Expire.pm ../../lib/Memoize/Expire.pm
cp Memoize/SDBM_File.pm ../../lib/Memoize/SDBM_File.pm
cp Memoize.pm ../../lib/Memoize.pm
cp Memoize/ExpireTest.pm ../../lib/Memoize/ExpireTest.pm
cp Memoize/AnyDBM_File.pm ../../lib/Memoize/AnyDBM_File.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Memoize'
./miniperl_top make_ext_Makefile.pl cpan/Module-Load/Makefile.PL
Creating cpan/Module-Load/Makefile.PL for Module::Load
cd cpan/Module-Load/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Module::Load
make -C cpan/Module-Load/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Load'
cp lib/Module/Load.pm ../../lib/Module/Load.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Load'
./miniperl_top make_ext_Makefile.pl cpan/Module-Load-Conditional/Makefile.PL
Creating cpan/Module-Load-Conditional/Makefile.PL for Module::Load::Conditional
cd cpan/Module-Load-Conditional/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Module::Load::Conditional
make -C cpan/Module-Load-Conditional/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Load-Conditional'
cp lib/Module/Load/Conditional.pm ../../lib/Module/Load/Conditional.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Load-Conditional'
./miniperl_top make_ext_Makefile.pl cpan/Module-Loaded/Makefile.PL
Creating cpan/Module-Loaded/Makefile.PL for Module::Loaded
cd cpan/Module-Loaded/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Module::Loaded
make -C cpan/Module-Loaded/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Loaded'
cp lib/Module/Loaded.pm ../../lib/Module/Loaded.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Loaded'
./miniperl_top make_ext_Makefile.pl cpan/Module-Metadata/Makefile.PL
Creating cpan/Module-Metadata/Makefile.PL for Module::Metadata
cd cpan/Module-Metadata/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Module::Metadata
make -C cpan/Module-Metadata/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Metadata'
cp lib/Module/Metadata.pm ../../lib/Module/Metadata.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Module-Metadata'
./miniperl_top make_ext_Makefile.pl cpan/NEXT/Makefile.PL
Creating cpan/NEXT/Makefile.PL for NEXT
cd cpan/NEXT/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for NEXT
make -C cpan/NEXT/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/NEXT'
cp lib/NEXT.pm ../../lib/NEXT.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/NEXT'
./miniperl_top make_ext_Makefile.pl cpan/Params-Check/Makefile.PL
Creating cpan/Params-Check/Makefile.PL for Params::Check
cd cpan/Params-Check/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Params::Check
make -C cpan/Params-Check/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Params-Check'
cp lib/Params/Check.pm ../../lib/Params/Check.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Params-Check'
./miniperl_top make_ext_Makefile.pl cpan/parent/Makefile.PL
Creating cpan/parent/Makefile.PL for parent
cd cpan/parent/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for parent
make -C cpan/parent/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/parent'
cp lib/parent.pm ../../lib/parent.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/parent'
./miniperl_top make_ext_Makefile.pl cpan/perlfaq/Makefile.PL
Creating cpan/perlfaq/Makefile.PL for perlfaq
cd cpan/perlfaq/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/perlfaq.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for perlfaq
make -C cpan/perlfaq/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/perlfaq'
cp lib/perlfaq6.pod ../../lib/perlfaq6.pod
cp lib/perlfaq4.pod ../../lib/perlfaq4.pod
cp lib/perlfaq5.pod ../../lib/perlfaq5.pod
cp lib/perlfaq2.pod ../../lib/perlfaq2.pod
cp lib/perlfaq1.pod ../../lib/perlfaq1.pod
cp lib/perlfaq.pm ../../lib/perlfaq.pm
cp lib/perlfaq9.pod ../../lib/perlfaq9.pod
cp lib/perlfaq3.pod ../../lib/perlfaq3.pod
cp lib/perlfaq8.pod ../../lib/perlfaq8.pod
cp lib/perlglossary.pod ../../lib/perlglossary.pod
cp lib/perlfaq7.pod ../../lib/perlfaq7.pod
cp lib/perlfaq.pod ../../lib/perlfaq.pod
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/perlfaq'
./miniperl_top make_ext_Makefile.pl cpan/PerlIO-via-QuotedPrint/Makefile.PL
Creating cpan/PerlIO-via-QuotedPrint/Makefile.PL for PerlIO::via::QuotedPrint
cd cpan/PerlIO-via-QuotedPrint/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for PerlIO::via::QuotedPrint
make -C cpan/PerlIO-via-QuotedPrint/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/PerlIO-via-QuotedPrint'
cp lib/PerlIO/via/QuotedPrint.pm ../../lib/PerlIO/via/QuotedPrint.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/PerlIO-via-QuotedPrint'
./miniperl_top make_ext_Makefile.pl cpan/Perl-OSType/Makefile.PL
Creating cpan/Perl-OSType/Makefile.PL for Perl::OSType
cd cpan/Perl-OSType/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Perl::OSType
make -C cpan/Perl-OSType/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Perl-OSType'
cp lib/Perl/OSType.pm ../../lib/Perl/OSType.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Perl-OSType'
./miniperl_top make_ext_Makefile.pl cpan/Pod-Checker/Makefile.PL
Creating cpan/Pod-Checker/Makefile.PL for Pod::Checker
cd cpan/Pod-Checker/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Checker
make -C cpan/Pod-Checker/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Checker'
cp lib/Pod/Checker.pm ../../lib/Pod/Checker.pm
"../../miniperl_top" "-I../../lib" "-I../../lib" podchecker.PL podchecker 
Extracting podchecker (with variable substitutions)
cp podchecker blib/script/podchecker
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Checker/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/podchecker
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Checker'
./miniperl_top make_ext_Makefile.pl cpan/Pod-Escapes/Makefile.PL
Creating cpan/Pod-Escapes/Makefile.PL for Pod::Escapes
cd cpan/Pod-Escapes/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Escapes
make -C cpan/Pod-Escapes/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Escapes'
cp lib/Pod/Escapes.pm ../../lib/Pod/Escapes.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Escapes'
cd cpan/podlators/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod
make -C cpan/podlators/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/podlators'
cp lib/Pod/Text.pm ../../lib/Pod/Text.pm
cp lib/Pod/Text/Color.pm ../../lib/Pod/Text/Color.pm
cp lib/Pod/Text/Overstrike.pm ../../lib/Pod/Text/Overstrike.pm
cp lib/Pod/ParseLink.pm ../../lib/Pod/ParseLink.pm
cp lib/Pod/Man.pm ../../lib/Pod/Man.pm
cp lib/Pod/Text/Termcap.pm ../../lib/Pod/Text/Termcap.pm
"../../miniperl_top" "-I../../lib" "-I../../lib" scripts/pod2man.PL scripts/pod2man 
Extracting pod2man (with variable substitutions)
"../../miniperl_top" "-I../../lib" "-I../../lib" scripts/pod2text.PL scripts/pod2text 
Extracting pod2text (with variable substitutions)
cp scripts/pod2man blib/script/pod2man
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/podlators/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/pod2man
cp scripts/pod2text blib/script/pod2text
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/podlators/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/pod2text
Manifying 2 pod documents
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/podlators'
cd cpan/Pod-Perldoc/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Perldoc
make -C cpan/Pod-Perldoc/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Perldoc'
cp lib/Pod/Perldoc/ToNroff.pm ../../lib/Pod/Perldoc/ToNroff.pm
cp lib/Pod/Perldoc/ToANSI.pm ../../lib/Pod/Perldoc/ToANSI.pm
cp lib/Pod/Perldoc/ToChecker.pm ../../lib/Pod/Perldoc/ToChecker.pm
cp lib/Pod/Perldoc/ToXml.pm ../../lib/Pod/Perldoc/ToXml.pm
cp lib/Pod/Perldoc/ToRtf.pm ../../lib/Pod/Perldoc/ToRtf.pm
cp lib/Pod/Perldoc/GetOptsOO.pm ../../lib/Pod/Perldoc/GetOptsOO.pm
cp lib/Pod/Perldoc.pm ../../lib/Pod/Perldoc.pm
cp perldoc.pod ../../lib/perldoc.pod
cp lib/Pod/Perldoc/ToPod.pm ../../lib/Pod/Perldoc/ToPod.pm
cp lib/Pod/Perldoc/ToText.pm ../../lib/Pod/Perldoc/ToText.pm
cp lib/Pod/Perldoc/ToMan.pm ../../lib/Pod/Perldoc/ToMan.pm
cp lib/Pod/Perldoc/ToTerm.pm ../../lib/Pod/Perldoc/ToTerm.pm
cp lib/Pod/Perldoc/ToTk.pm ../../lib/Pod/Perldoc/ToTk.pm
cp lib/Pod/Perldoc/BaseTo.pm ../../lib/Pod/Perldoc/BaseTo.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Perldoc'
./miniperl_top make_ext_Makefile.pl cpan/Pod-Simple/Makefile.PL
Creating cpan/Pod-Simple/Makefile.PL for Pod::Simple
cd cpan/Pod-Simple/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/Pod/Simple.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for Pod::Simple
make -C cpan/Pod-Simple/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Simple'
cp lib/Pod/Simple/HTML.pm ../../lib/Pod/Simple/HTML.pm
cp lib/Pod/Simple/Methody.pm ../../lib/Pod/Simple/Methody.pm
cp lib/Pod/Simple/Debug.pm ../../lib/Pod/Simple/Debug.pm
cp lib/Pod/Simple/TiedOutFH.pm ../../lib/Pod/Simple/TiedOutFH.pm
cp lib/Pod/Simple/Text.pm ../../lib/Pod/Simple/Text.pm
cp lib/Pod/Simple/DumpAsText.pm ../../lib/Pod/Simple/DumpAsText.pm
cp lib/Pod/Simple/Progress.pm ../../lib/Pod/Simple/Progress.pm
cp lib/Pod/Simple/TextContent.pm ../../lib/Pod/Simple/TextContent.pm
cp lib/Pod/Simple/JustPod.pm ../../lib/Pod/Simple/JustPod.pm
cp lib/Pod/Simple/Checker.pm ../../lib/Pod/Simple/Checker.pm
cp lib/Pod/Simple/Transcode.pm ../../lib/Pod/Simple/Transcode.pm
cp lib/Pod/Simple/RTF.pm ../../lib/Pod/Simple/RTF.pm
cp lib/Pod/Simple/SimpleTree.pm ../../lib/Pod/Simple/SimpleTree.pm
cp lib/Pod/Simple/DumpAsXML.pm ../../lib/Pod/Simple/DumpAsXML.pm
cp lib/Pod/Simple/HTMLLegacy.pm ../../lib/Pod/Simple/HTMLLegacy.pm
cp lib/Pod/Simple/Subclassing.pod ../../lib/Pod/Simple/Subclassing.pod
cp lib/Pod/Simple.pm ../../lib/Pod/Simple.pm
cp lib/Pod/Simple/PullParserStartToken.pm ../../lib/Pod/Simple/PullParserStartToken.pm
cp lib/Pod/Simple/BlackBox.pm ../../lib/Pod/Simple/BlackBox.pm
cp lib/Pod/Simple/PullParserEndToken.pm ../../lib/Pod/Simple/PullParserEndToken.pm
cp lib/Pod/Simple/PullParserToken.pm ../../lib/Pod/Simple/PullParserToken.pm
cp lib/Pod/Simple/XHTML.pm ../../lib/Pod/Simple/XHTML.pm
cp lib/Pod/Simple/Search.pm ../../lib/Pod/Simple/Search.pm
cp lib/Pod/Simple/PullParserTextToken.pm ../../lib/Pod/Simple/PullParserTextToken.pm
cp lib/Pod/Simple.pod ../../lib/Pod/Simple.pod
cp lib/Pod/Simple/LinkSection.pm ../../lib/Pod/Simple/LinkSection.pm
cp lib/Pod/Simple/HTMLBatch.pm ../../lib/Pod/Simple/HTMLBatch.pm
cp lib/Pod/Simple/XMLOutStream.pm ../../lib/Pod/Simple/XMLOutStream.pm
cp lib/Pod/Simple/TranscodeDumb.pm ../../lib/Pod/Simple/TranscodeDumb.pm
cp lib/Pod/Simple/PullParser.pm ../../lib/Pod/Simple/PullParser.pm
cp lib/Pod/Simple/TranscodeSmart.pm ../../lib/Pod/Simple/TranscodeSmart.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Simple'
./miniperl_top make_ext_Makefile.pl cpan/Pod-Usage/Makefile.PL
Creating cpan/Pod-Usage/Makefile.PL for Pod::Usage
cd cpan/Pod-Usage/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Usage
make -C cpan/Pod-Usage/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Usage'
cp lib/Pod/Usage.pm ../../lib/Pod/Usage.pm
"../../miniperl_top" "-I../../lib" "-I../../lib" pod2usage.PL pod2usage 
Extracting pod2usage (with variable substitutions)
cp pod2usage blib/script/pod2usage
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Usage/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/pod2usage
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Pod-Usage'
./miniperl_top make_ext_Makefile.pl cpan/Term-ANSIColor/Makefile.PL
Creating cpan/Term-ANSIColor/Makefile.PL for Term::ANSIColor
cd cpan/Term-ANSIColor/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Term::ANSIColor
make -C cpan/Term-ANSIColor/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Term-ANSIColor'
cp lib/Term/ANSIColor.pm ../../lib/Term/ANSIColor.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Term-ANSIColor'
./miniperl_top make_ext_Makefile.pl cpan/Term-Cap/Makefile.PL
Creating cpan/Term-Cap/Makefile.PL for Term::Cap
cd cpan/Term-Cap/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Term::Cap
make -C cpan/Term-Cap/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Term-Cap'
cp Cap.pm ../../lib/Term/Cap.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Term-Cap'
./miniperl_top make_ext_Makefile.pl cpan/Test-Harness/Makefile.PL
Creating cpan/Test-Harness/Makefile.PL for Test::Harness
cd cpan/Test-Harness/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Test::Harness
make -C cpan/Test-Harness/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Test-Harness'
cp lib/TAP/Formatter/Base.pm ../../lib/TAP/Formatter/Base.pm
cp lib/TAP/Parser/Iterator.pm ../../lib/TAP/Parser/Iterator.pm
cp lib/TAP/Parser/Result/YAML.pm ../../lib/TAP/Parser/Result/YAML.pm
cp lib/TAP/Formatter/Console.pm ../../lib/TAP/Formatter/Console.pm
cp lib/TAP/Parser/Scheduler/Job.pm ../../lib/TAP/Parser/Scheduler/Job.pm
cp lib/TAP/Parser/IteratorFactory.pm ../../lib/TAP/Parser/IteratorFactory.pm
cp lib/TAP/Parser/Result/Comment.pm ../../lib/TAP/Parser/Result/Comment.pm
cp lib/TAP/Parser/Grammar.pm ../../lib/TAP/Parser/Grammar.pm
cp lib/TAP/Parser/Result/Test.pm ../../lib/TAP/Parser/Result/Test.pm
cp lib/TAP/Parser/Result/Version.pm ../../lib/TAP/Parser/Result/Version.pm
cp lib/TAP/Parser/Iterator/Stream.pm ../../lib/TAP/Parser/Iterator/Stream.pm
cp lib/App/Prove/State/Result.pm ../../lib/App/Prove/State/Result.pm
cp lib/TAP/Parser/Iterator/Array.pm ../../lib/TAP/Parser/Iterator/Array.pm
cp lib/TAP/Formatter/Console/ParallelSession.pm ../../lib/TAP/Formatter/Console/ParallelSession.pm
cp lib/TAP/Harness/Beyond.pod ../../lib/TAP/Harness/Beyond.pod
cp lib/TAP/Formatter/File/Session.pm ../../lib/TAP/Formatter/File/Session.pm
cp lib/TAP/Object.pm ../../lib/TAP/Object.pm
cp lib/TAP/Parser/Result/Bailout.pm ../../lib/TAP/Parser/Result/Bailout.pm
cp lib/TAP/Parser/Result/Pragma.pm ../../lib/TAP/Parser/Result/Pragma.pm
cp lib/App/Prove.pm ../../lib/App/Prove.pm
cp lib/App/Prove/State/Result/Test.pm ../../lib/App/Prove/State/Result/Test.pm
cp lib/TAP/Parser/Multiplexer.pm ../../lib/TAP/Parser/Multiplexer.pm
cp lib/TAP/Formatter/Color.pm ../../lib/TAP/Formatter/Color.pm
cp lib/App/Prove/State.pm ../../lib/App/Prove/State.pm
cp lib/TAP/Formatter/Session.pm ../../lib/TAP/Formatter/Session.pm
cp lib/TAP/Harness.pm ../../lib/TAP/Harness.pm
cp lib/TAP/Parser/Result.pm ../../lib/TAP/Parser/Result.pm
cp lib/TAP/Parser.pm ../../lib/TAP/Parser.pm
cp lib/TAP/Parser/Scheduler.pm ../../lib/TAP/Parser/Scheduler.pm
cp lib/TAP/Parser/Iterator/Process.pm ../../lib/TAP/Parser/Iterator/Process.pm
cp lib/TAP/Parser/ResultFactory.pm ../../lib/TAP/Parser/ResultFactory.pm
cp lib/TAP/Formatter/File.pm ../../lib/TAP/Formatter/File.pm
cp lib/TAP/Formatter/Console/Session.pm ../../lib/TAP/Formatter/Console/Session.pm
cp lib/TAP/Parser/Aggregator.pm ../../lib/TAP/Parser/Aggregator.pm
cp lib/TAP/Base.pm ../../lib/TAP/Base.pm
cp lib/TAP/Harness/Env.pm ../../lib/TAP/Harness/Env.pm
cp lib/TAP/Parser/Result/Unknown.pm ../../lib/TAP/Parser/Result/Unknown.pm
cp lib/TAP/Parser/Result/Plan.pm ../../lib/TAP/Parser/Result/Plan.pm
cp lib/TAP/Parser/SourceHandler/Handle.pm ../../lib/TAP/Parser/SourceHandler/Handle.pm
cp lib/TAP/Parser/SourceHandler/RawTAP.pm ../../lib/TAP/Parser/SourceHandler/RawTAP.pm
cp lib/TAP/Parser/YAMLish/Reader.pm ../../lib/TAP/Parser/YAMLish/Reader.pm
cp lib/TAP/Parser/SourceHandler/Executable.pm ../../lib/TAP/Parser/SourceHandler/Executable.pm
cp lib/TAP/Parser/SourceHandler/Perl.pm ../../lib/TAP/Parser/SourceHandler/Perl.pm
cp lib/TAP/Parser/Scheduler/Spinner.pm ../../lib/TAP/Parser/Scheduler/Spinner.pm
cp lib/Test/Harness.pm ../../lib/Test/Harness.pm
cp lib/TAP/Parser/SourceHandler.pm ../../lib/TAP/Parser/SourceHandler.pm
cp lib/TAP/Parser/Source.pm ../../lib/TAP/Parser/Source.pm
cp lib/TAP/Parser/YAMLish/Writer.pm ../../lib/TAP/Parser/YAMLish/Writer.pm
cp lib/TAP/Parser/SourceHandler/File.pm ../../lib/TAP/Parser/SourceHandler/File.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Test-Harness'
./miniperl_top make_ext_Makefile.pl cpan/Test-Simple/Makefile.PL
Creating cpan/Test-Simple/Makefile.PL for Test::Simple
cd cpan/Test-Simple/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Test::Simple
make -C cpan/Test-Simple/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Test-Simple'
cp lib/Test2.pm ../../lib/Test2.pm
cp lib/Test2/Event/Subtest.pm ../../lib/Test2/Event/Subtest.pm
cp lib/Test/Builder/Module.pm ../../lib/Test/Builder/Module.pm
cp lib/Test/Builder.pm ../../lib/Test/Builder.pm
cp lib/Test2/API/Breakage.pm ../../lib/Test2/API/Breakage.pm
cp lib/Test2/Event/Note.pm ../../lib/Test2/Event/Note.pm
cp lib/Test2/Event/Exception.pm ../../lib/Test2/Event/Exception.pm
cp lib/Test2/Event/Encoding.pm ../../lib/Test2/Event/Encoding.pm
cp lib/Test2/Event.pm ../../lib/Test2/Event.pm
cp lib/Test2/Event/Ok.pm ../../lib/Test2/Event/Ok.pm
cp lib/Test/More.pm ../../lib/Test/More.pm
cp lib/Test2/API/InterceptResult/Hub.pm ../../lib/Test2/API/InterceptResult/Hub.pm
cp lib/Test2/Event/TAP/Version.pm ../../lib/Test2/Event/TAP/Version.pm
cp lib/Test/Builder/Tester.pm ../../lib/Test/Builder/Tester.pm
cp lib/Test2/Event/Skip.pm ../../lib/Test2/Event/Skip.pm
cp lib/Test2/API/InterceptResult.pm ../../lib/Test2/API/InterceptResult.pm
cp lib/Test/use/ok.pm ../../lib/Test/use/ok.pm
cp lib/Test2/API/InterceptResult/Event.pm ../../lib/Test2/API/InterceptResult/Event.pm
cp lib/Test/Tester/Capture.pm ../../lib/Test/Tester/Capture.pm
cp lib/Test2/API/InterceptResult/Facet.pm ../../lib/Test2/API/InterceptResult/Facet.pm
cp lib/Test2/Event/Diag.pm ../../lib/Test2/Event/Diag.pm
cp lib/Test2/Event/Pass.pm ../../lib/Test2/Event/Pass.pm
cp lib/Test2/Event/Generic.pm ../../lib/Test2/Event/Generic.pm
cp lib/Test2/API/Stack.pm ../../lib/Test2/API/Stack.pm
cp lib/Test2/API/Context.pm ../../lib/Test2/API/Context.pm
cp lib/Test2/Event/Bail.pm ../../lib/Test2/Event/Bail.pm
cp lib/Test/Simple.pm ../../lib/Test/Simple.pm
cp lib/Test2/Event/Fail.pm ../../lib/Test2/Event/Fail.pm
cp lib/Test2/API/InterceptResult/Squasher.pm ../../lib/Test2/API/InterceptResult/Squasher.pm
cp lib/Test2/API.pm ../../lib/Test2/API.pm
cp lib/Test/Builder/Formatter.pm ../../lib/Test/Builder/Formatter.pm
cp lib/Test2/Event/V2.pm ../../lib/Test2/Event/V2.pm
cp lib/Test2/API/Instance.pm ../../lib/Test2/API/Instance.pm
cp lib/Test/Builder/TodoDiag.pm ../../lib/Test/Builder/TodoDiag.pm
cp lib/Test/Tester/CaptureRunner.pm ../../lib/Test/Tester/CaptureRunner.pm
cp lib/Test/Tester.pm ../../lib/Test/Tester.pm
cp lib/Test/Tutorial.pod ../../lib/Test/Tutorial.pod
cp lib/Test/Builder/IO/Scalar.pm ../../lib/Test/Builder/IO/Scalar.pm
cp lib/Test/Builder/Tester/Color.pm ../../lib/Test/Builder/Tester/Color.pm
cp lib/Test2/Event/Plan.pm ../../lib/Test2/Event/Plan.pm
cp lib/Test/Tester/Delegate.pm ../../lib/Test/Tester/Delegate.pm
cp lib/Test2/EventFacet/Hub.pm ../../lib/Test2/EventFacet/Hub.pm
cp lib/Test2/IPC/Driver/Files.pm ../../lib/Test2/IPC/Driver/Files.pm
cp lib/ok.pm ../../lib/ok.pm
cp lib/Test2/Util.pm ../../lib/Test2/Util.pm
cp lib/Test2/EventFacet/Render.pm ../../lib/Test2/EventFacet/Render.pm
cp lib/Test2/EventFacet.pm ../../lib/Test2/EventFacet.pm
cp lib/Test2/Hub/Interceptor.pm ../../lib/Test2/Hub/Interceptor.pm
cp lib/Test2/EventFacet/Info/Table.pm ../../lib/Test2/EventFacet/Info/Table.pm
cp lib/Test2/Event/Waiting.pm ../../lib/Test2/Event/Waiting.pm
cp lib/Test2/Util/HashBase.pm ../../lib/Test2/Util/HashBase.pm
cp lib/Test2/Transition.pod ../../lib/Test2/Transition.pod
cp lib/Test2/EventFacet/Control.pm ../../lib/Test2/EventFacet/Control.pm
cp lib/Test2/Hub/Subtest.pm ../../lib/Test2/Hub/Subtest.pm
cp lib/Test2/EventFacet/About.pm ../../lib/Test2/EventFacet/About.pm
cp lib/Test2/Tools/Tiny.pm ../../lib/Test2/Tools/Tiny.pm
cp lib/Test2/EventFacet/Info.pm ../../lib/Test2/EventFacet/Info.pm
cp lib/Test2/EventFacet/Error.pm ../../lib/Test2/EventFacet/Error.pm
cp lib/Test2/Util/ExternalMeta.pm ../../lib/Test2/Util/ExternalMeta.pm
cp lib/Test2/EventFacet/Meta.pm ../../lib/Test2/EventFacet/Meta.pm
cp lib/Test2/Formatter/TAP.pm ../../lib/Test2/Formatter/TAP.pm
cp lib/Test2/Hub/Interceptor/Terminator.pm ../../lib/Test2/Hub/Interceptor/Terminator.pm
cp lib/Test2/Util/Trace.pm ../../lib/Test2/Util/Trace.pm
cp lib/Test2/EventFacet/Parent.pm ../../lib/Test2/EventFacet/Parent.pm
cp lib/Test2/EventFacet/Trace.pm ../../lib/Test2/EventFacet/Trace.pm
cp lib/Test2/Hub.pm ../../lib/Test2/Hub.pm
cp lib/Test2/EventFacet/Plan.pm ../../lib/Test2/EventFacet/Plan.pm
cp lib/Test2/IPC.pm ../../lib/Test2/IPC.pm
cp lib/Test2/Util/Facets2Legacy.pm ../../lib/Test2/Util/Facets2Legacy.pm
cp lib/Test2/IPC/Driver.pm ../../lib/Test2/IPC/Driver.pm
cp lib/Test2/Formatter.pm ../../lib/Test2/Formatter.pm
cp lib/Test2/EventFacet/Assert.pm ../../lib/Test2/EventFacet/Assert.pm
cp lib/Test2/EventFacet/Amnesty.pm ../../lib/Test2/EventFacet/Amnesty.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Test-Simple'
./miniperl_top make_ext_Makefile.pl cpan/Text-Balanced/Makefile.PL
Creating cpan/Text-Balanced/Makefile.PL for Text::Balanced
cd cpan/Text-Balanced/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Text::Balanced
make -C cpan/Text-Balanced/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-Balanced'
cp lib/Text/Balanced.pm ../../lib/Text/Balanced.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-Balanced'
./miniperl_top make_ext_Makefile.pl cpan/Text-ParseWords/Makefile.PL
Creating cpan/Text-ParseWords/Makefile.PL for Text::ParseWords
cd cpan/Text-ParseWords/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Text::ParseWords
make -C cpan/Text-ParseWords/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-ParseWords'
cp lib/Text/ParseWords.pm ../../lib/Text/ParseWords.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-ParseWords'
./miniperl_top make_ext_Makefile.pl cpan/Text-Tabs/Makefile.PL
Creating cpan/Text-Tabs/Makefile.PL for Text::Tabs
cd cpan/Text-Tabs/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Text::Tabs
make -C cpan/Text-Tabs/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-Tabs'
cp lib/Text/Wrap.pm ../../lib/Text/Wrap.pm
cp lib/Text/Tabs.pm ../../lib/Text/Tabs.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Text-Tabs'
./miniperl_top make_ext_Makefile.pl cpan/Tie-RefHash/Makefile.PL
Creating cpan/Tie-RefHash/Makefile.PL for Tie::RefHash
cd cpan/Tie-RefHash/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Tie::RefHash
make -C cpan/Tie-RefHash/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Tie-RefHash'
cp lib/Tie/RefHash.pm ../../lib/Tie/RefHash.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Tie-RefHash'
./miniperl_top make_ext_Makefile.pl cpan/Time-Local/Makefile.PL
Creating cpan/Time-Local/Makefile.PL for Time::Local
cd cpan/Time-Local/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Time::Local
make -C cpan/Time-Local/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Local'
cp lib/Time/Local.pm ../../lib/Time/Local.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Local'
./miniperl_top make_ext_Makefile.pl cpan/version/Makefile.PL
Creating cpan/version/Makefile.PL for version
cd cpan/version/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/version.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for version
make -C cpan/version/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/version'
cp lib/version/regex.pm ../../lib/version/regex.pm
cp lib/version.pod ../../lib/version.pod
cp lib/version.pm ../../lib/version.pm
cp lib/version/Internals.pod ../../lib/version/Internals.pod
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/version'
./miniperl_top make_ext_Makefile.pl dist/Attribute-Handlers/Makefile.PL
Creating dist/Attribute-Handlers/Makefile.PL for Attribute::Handlers
cd dist/Attribute-Handlers/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Attribute::Handlers
make -C dist/Attribute-Handlers/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Attribute-Handlers'
cp lib/Attribute/Handlers.pm ../../lib/Attribute/Handlers.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Attribute-Handlers'
./miniperl_top make_ext_Makefile.pl dist/autouse/Makefile.PL
Creating dist/autouse/Makefile.PL for autouse
cd dist/autouse/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for autouse
make -C dist/autouse/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/autouse'
cp lib/autouse.pm ../../lib/autouse.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/autouse'
cd dist/base/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for base
make -C dist/base/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/base'
cp lib/fields.pm ../../lib/fields.pm
cp lib/base.pm ../../lib/base.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/base'
cd dist/Carp/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Carp
make -C dist/Carp/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Carp'
cp lib/Carp.pm ../../lib/Carp.pm
cp lib/Carp/Heavy.pm ../../lib/Carp/Heavy.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Carp'
./miniperl_top make_ext_Makefile.pl dist/constant/Makefile.PL
Creating dist/constant/Makefile.PL for constant
cd dist/constant/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for constant
make -C dist/constant/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/constant'
cp lib/constant.pm ../../lib/constant.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/constant'
./miniperl_top make_ext_Makefile.pl dist/Devel-SelfStubber/Makefile.PL
Creating dist/Devel-SelfStubber/Makefile.PL for Devel::SelfStubber
cd dist/Devel-SelfStubber/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Devel::SelfStubber
make -C dist/Devel-SelfStubber/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-SelfStubber'
cp lib/Devel/SelfStubber.pm ../../lib/Devel/SelfStubber.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-SelfStubber'
./miniperl_top make_ext_Makefile.pl dist/Dumpvalue/Makefile.PL
Creating dist/Dumpvalue/Makefile.PL for Dumpvalue
cd dist/Dumpvalue/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Dumpvalue
make -C dist/Dumpvalue/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Dumpvalue'
cp lib/Dumpvalue.pm ../../lib/Dumpvalue.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Dumpvalue'
./miniperl_top make_ext_Makefile.pl dist/encoding-warnings/Makefile.PL
Creating dist/encoding-warnings/Makefile.PL for encoding::warnings
cd dist/encoding-warnings/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for encoding::warnings
make -C dist/encoding-warnings/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/encoding-warnings'
cp lib/encoding/warnings.pm ../../lib/encoding/warnings.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/encoding-warnings'
./miniperl_top make_ext_Makefile.pl dist/Env/Makefile.PL
Creating dist/Env/Makefile.PL for Env
cd dist/Env/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Env
make -C dist/Env/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Env'
cp lib/Env.pm ../../lib/Env.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Env'
./miniperl_top make_ext_Makefile.pl dist/Exporter/Makefile.PL
Creating dist/Exporter/Makefile.PL for Exporter
cd dist/Exporter/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Exporter
make -C dist/Exporter/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Exporter'
cp lib/Exporter/Heavy.pm ../../lib/Exporter/Heavy.pm
cp lib/Exporter.pm ../../lib/Exporter.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Exporter'
cd dist/ExtUtils-CBuilder/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::CBuilder
make -C dist/ExtUtils-CBuilder/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/ExtUtils-CBuilder'
cp lib/ExtUtils/CBuilder/Platform/cygwin.pm ../../lib/ExtUtils/CBuilder/Platform/cygwin.pm
cp lib/ExtUtils/CBuilder/Platform/os2.pm ../../lib/ExtUtils/CBuilder/Platform/os2.pm
cp lib/ExtUtils/CBuilder/Platform/Windows/GCC.pm ../../lib/ExtUtils/CBuilder/Platform/Windows/GCC.pm
cp lib/ExtUtils/CBuilder/Platform/Unix.pm ../../lib/ExtUtils/CBuilder/Platform/Unix.pm
cp lib/ExtUtils/CBuilder/Platform/Windows/BCC.pm ../../lib/ExtUtils/CBuilder/Platform/Windows/BCC.pm
cp lib/ExtUtils/CBuilder/Platform/darwin.pm ../../lib/ExtUtils/CBuilder/Platform/darwin.pm
cp lib/ExtUtils/CBuilder/Base.pm ../../lib/ExtUtils/CBuilder/Base.pm
cp lib/ExtUtils/CBuilder/Platform/aix.pm ../../lib/ExtUtils/CBuilder/Platform/aix.pm
cp lib/ExtUtils/CBuilder/Platform/Windows/MSVC.pm ../../lib/ExtUtils/CBuilder/Platform/Windows/MSVC.pm
cp lib/ExtUtils/CBuilder/Platform/dec_osf.pm ../../lib/ExtUtils/CBuilder/Platform/dec_osf.pm
cp lib/ExtUtils/CBuilder.pm ../../lib/ExtUtils/CBuilder.pm
cp lib/ExtUtils/CBuilder/Platform/VMS.pm ../../lib/ExtUtils/CBuilder/Platform/VMS.pm
cp lib/ExtUtils/CBuilder/Platform/android.pm ../../lib/ExtUtils/CBuilder/Platform/android.pm
cp lib/ExtUtils/CBuilder/Platform/Windows.pm ../../lib/ExtUtils/CBuilder/Platform/Windows.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/ExtUtils-CBuilder'
./miniperl_top make_ext_Makefile.pl dist/ExtUtils-ParseXS/Makefile.PL
Creating dist/ExtUtils-ParseXS/Makefile.PL for ExtUtils::ParseXS
cd dist/ExtUtils-ParseXS/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/ExtUtils/ParseXS.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for ExtUtils::ParseXS
cd dist/Devel-PPPort/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Setting license tag...
Adding META_MERGE...
Generating a Unix-style Makefile
Writing Makefile for Devel::PPPort
make -C dist/Devel-PPPort/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-PPPort'
"../../miniperl_top" "-I../../lib" PPPort_pm.PL PPPort.pm 
including ppphdoc
including inctools
including ppphbin
including version
including threads
including limits
including variables
including subparse
including newCONSTSUB
including magic_defs
including misc
including sv_xpvf
including SvPV
including warn
including format
including uv
including memory
including mess
including mPUSH
including call
including newRV
including MY_CXT
including SvREFCNT
including newSV_type
including newSVpv
including Sv_set
including shared_pv
including HvNAME
including gv
including pvs
including magic
including cop
including grok
including snprintf
including sprintf
including exception
including strlfuncs
including utf8
including pv_tools
including locale
cp PPPort.pm ../../lib/Devel/PPPort.pm
Running Mkbootstrap for PPPort ()
chmod 644 "PPPort.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-PPPort/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- PPPort.bs ../../lib/auto/Devel/PPPort/PPPort.bs 644
"../../miniperl_top" "-I../../lib" "-I../../lib" ppport_h.PL ppport.h 
"../../miniperl_top" "-I../../lib" "-I../../lib" RealPPPort_xs.PL RealPPPort.xs 
adding XS code from parts/inc/HvNAME
adding XS code from parts/inc/MY_CXT
adding XS code from parts/inc/SvPV
adding XS code from parts/inc/SvREFCNT
adding XS code from parts/inc/Sv_set
adding XS code from parts/inc/call
adding XS code from parts/inc/cop
adding XS code from parts/inc/exception
adding XS code from parts/inc/format
adding XS code from parts/inc/grok
adding XS code from parts/inc/gv
adding XS code from parts/inc/limits
adding XS code from parts/inc/locale
adding XS code from parts/inc/mPUSH
adding XS code from parts/inc/magic
adding XS code from parts/inc/memory
adding XS code from parts/inc/mess
adding XS code from parts/inc/misc
adding XS code from parts/inc/newCONSTSUB
adding XS code from parts/inc/newRV
adding XS code from parts/inc/newSV_type
adding XS code from parts/inc/newSVpv
adding XS code from parts/inc/pv_tools
adding XS code from parts/inc/pvs
adding XS code from parts/inc/shared_pv
adding XS code from parts/inc/snprintf
adding XS code from parts/inc/sprintf
adding XS code from parts/inc/strlfuncs
adding XS code from parts/inc/sv_xpvf
adding XS code from parts/inc/threads
adding XS code from parts/inc/utf8
adding XS code from parts/inc/uv
adding XS code from parts/inc/variables
adding XS code from parts/inc/warn
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-PPPort/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-PPPort/typemap'  RealPPPort.xs > RealPPPort.xsc
mv RealPPPort.xsc RealPPPort.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.68\" -DXS_VERSION=\"3.68\" -fPIC -Wno-unused-function "-I../.."  -W -Wall RealPPPort.c
In file included from ../../perl.h:7246,
                 from RealPPPort.xs:31:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_const':
RealPPPort.xs:422:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  422 |                 RETVAL = len + (strEQ(str, "mhx") ? 40 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_mutable':
RealPPPort.xs:434:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  434 |                 RETVAL = len + (strEQ(str, "mhx") ? 41 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_flags':
RealPPPort.xs:446:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  446 |                 RETVAL = len + (strEQ(str, "mhx") ? 42 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_flags_const':
RealPPPort.xs:458:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  458 |                 RETVAL = len + (strEQ(str, "mhx") ? 43 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_flags_mutable':
RealPPPort.xs:481:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  481 |                 RETVAL = len + (strEQ(str, "mhx") ? 45 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_force':
RealPPPort.xs:493:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  493 |                 RETVAL = len + (strEQ(str, "mhx") ? 46 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_force_mutable':
RealPPPort.xs:516:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  516 |                 RETVAL = len + (strEQ(str, "mhx") ? 48 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_force_nomg':
RealPPPort.xs:528:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  528 |                 RETVAL = len + (strEQ(str, "mhx") ? 49 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_force_flags':
RealPPPort.xs:551:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  551 |                 RETVAL = len + (strEQ(str, "mhx") ? 51 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_force_flags_mutable':
RealPPPort.xs:574:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  574 |                 RETVAL = len + (strEQ(str, "mhx") ? 53 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_nomg':
RealPPPort.xs:597:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  597 |                 RETVAL = len + (strEQ(str, "mhx") ? 55 : 0);
      |                          ^~~
RealPPPort.xs: In function 'XS_Devel__PPPort_SvPV_nomg_const':
RealPPPort.xs:609:26: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  609 |                 RETVAL = len + (strEQ(str, "mhx") ? 56 : 0);
      |                          ^~~
In file included from ../../perl.h:5782:
RealPPPort.c: In function 'XS_Devel__PPPort_grok_number':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:1925:9: note: in expansion of macro 'PUSHu'
 1925 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_grok_bin':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:1952:9: note: in expansion of macro 'PUSHu'
 1952 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_grok_hex':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:1979:9: note: in expansion of macro 'PUSHu'
 1979 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_grok_oct':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:2006:9: note: in expansion of macro 'PUSHu'
 2006 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_Perl_grok_number':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:2033:9: note: in expansion of macro 'PUSHu'
 2033 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_Perl_grok_bin':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:2060:9: note: in expansion of macro 'PUSHu'
 2060 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_Perl_grok_hex':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:2087:9: note: in expansion of macro 'PUSHu'
 2087 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_Perl_grok_oct':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:2114:9: note: in expansion of macro 'PUSHu'
 2114 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:5841:
RealPPPort.xs: In function 'XS_Devel__PPPort_gv_init_type':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
RealPPPort.xs:1198:25: note: in expansion of macro 'hv_fetch'
 1198 |         GV *gv = *(GV**)hv_fetch(defstash, name, len, TRUE);
      |                         ^~~~~~~~
RealPPPort.xs:1203:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1203 |         gv_init_pvn(gv, defstash, name, len, flags);
      |                                              ^~~~~
../../embed.h:239:64: note: in definition of macro 'gv_init_pvn'
  239 | #define gv_init_pvn(a,b,c,d,e)  Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
      |                                                                ^
RealPPPort.xs: In function 'XS_Devel__PPPort_new_with_other_mg':
RealPPPort.xs:1357:53: warning: conversion to 'I32' {aka 'const int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1357 |     sv_magic((SV*)self, NULL, PERL_MAGIC_ext, data, strlen(data));
      |                                                     ^~~~~~~~~~~~
../../embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
RealPPPort.xs: In function 'XS_Devel__PPPort_new_with_mg':
RealPPPort.xs:1383:53: warning: conversion to 'I32' {aka 'const int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1383 |     sv_magic((SV*)self, NULL, PERL_MAGIC_ext, data, strlen(data));
      |                                                     ^~~~~~~~~~~~
../../embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
RealPPPort.c: In function 'XS_Devel__PPPort_above_IV_MAX':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:3022:9: note: in expansion of macro 'PUSHu'
 3022 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_SVf_IVisUV':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:3046:9: note: in expansion of macro 'PUSHu'
 3046 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_magic_SvUV_nomg':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:3096:9: note: in expansion of macro 'PUSHu'
 3096 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_check_HeUTF8':
RealPPPort.xs:1997:44: warning: unsigned conversion from 'int' to 'STRLEN' {aka 'unsigned int'} changes value from '-1' to '4294967295' [-Wsign-conversion]
 1997 |                 if (SvUTF8(utf8_key)) klen *= -1;
      |                                            ^~
../../hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
RealPPPort.xs:1998:17: note: in expansion of macro 'hv_store'
 1998 |                 hv_store(hash, key, klen, newSVpvs("string"), 0);
      |                 ^~~~~~~~
In file included from RealPPPort.xs:146:
RealPPPort.xs: In function 'XS_Devel__PPPort_isBLANK':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1621:26: note: in expansion of macro '_generic_isCC_A'
 1621 | #   define isBLANK_A(c)  _generic_isCC_A(c, _CC_BLANK)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1824:22: note: in expansion of macro 'isBLANK_A'
 1824 | #define isBLANK(c)   isBLANK_A(c)
      |                      ^~~~~~~~~
RealPPPort.xs:2020:18: note: in expansion of macro 'isBLANK'
 2020 |         RETVAL = isBLANK(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isBLANK_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1621:26: note: in expansion of macro '_generic_isCC_A'
 1621 | #   define isBLANK_A(c)  _generic_isCC_A(c, _CC_BLANK)
      |                          ^~~~~~~~~~~~~~~
RealPPPort.xs:2028:18: note: in expansion of macro 'isBLANK_A'
 2028 |         RETVAL = isBLANK_A(ord);
      |                  ^~~~~~~~~
In file included from ../../perl.h:3003:
RealPPPort.xs: In function 'XS_Devel__PPPort_isBLANK_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1632:27: note: in expansion of macro '_generic_isCC'
 1632 | #   define isBLANK_L1(c)  _generic_isCC(c, _CC_BLANK)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2036:18: note: in expansion of macro 'isBLANK_L1'
 2036 |         RETVAL = isBLANK_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isUPPER_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1644:27: note: in expansion of macro '_generic_isCC'
 1644 | #   define isUPPER_L1(c)  _generic_isCC(c, _CC_UPPER)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2060:18: note: in expansion of macro 'isUPPER_L1'
 2060 |         RETVAL = isUPPER_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isLOWER_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1639:27: note: in expansion of macro '_generic_isCC'
 1639 | #   define isLOWER_L1(c)  _generic_isCC(c, _CC_LOWER)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2084:18: note: in expansion of macro 'isLOWER_L1'
 2084 |         RETVAL = isLOWER_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHA':
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:1821:22: note: in expansion of macro 'isALPHA_A'
 1821 | #define isALPHA(c)   isALPHA_A(c)
      |                      ^~~~~~~~~
RealPPPort.xs:2092:18: note: in expansion of macro 'isALPHA'
 2092 |         RETVAL = isALPHA(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHA_A':
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
RealPPPort.xs:2100:18: note: in expansion of macro 'isALPHA_A'
 2100 |         RETVAL = isALPHA_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHA_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1630:27: note: in expansion of macro '_generic_isCC'
 1630 | #   define isALPHA_L1(c)  _generic_isCC(c, _CC_ALPHA)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2108:18: note: in expansion of macro 'isALPHA_L1'
 2108 |         RETVAL = isALPHA_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isWORDCHAR':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
../../handy.h:1837:23: note: in expansion of macro 'isWORDCHAR_A'
 1837 | #define isWORDCHAR(c) isWORDCHAR_A(c)
      |                       ^~~~~~~~~~~~
RealPPPort.xs:2116:18: note: in expansion of macro 'isWORDCHAR'
 2116 |         RETVAL = isWORDCHAR(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isWORDCHAR_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
RealPPPort.xs:2124:18: note: in expansion of macro 'isWORDCHAR_A'
 2124 |         RETVAL = isWORDCHAR_A(ord);
      |                  ^~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isWORDCHAR_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1645:29: note: in expansion of macro '_generic_isCC'
 1645 | #   define isWORDCHAR_L1(c) _generic_isCC(c, _CC_WORDCHAR)
      |                             ^~~~~~~~~~~~~
RealPPPort.xs:2132:18: note: in expansion of macro 'isWORDCHAR_L1'
 2132 |         RETVAL = isWORDCHAR_L1(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHANUMERIC':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1620:32: note: in expansion of macro '_generic_isCC_A'
 1620 | #   define isALPHANUMERIC_A(c) _generic_isCC_A(c, _CC_ALPHANUMERIC)
      |                                ^~~~~~~~~~~~~~~
../../handy.h:1820:28: note: in expansion of macro 'isALPHANUMERIC_A'
 1820 | #define isALPHANUMERIC(c)  isALPHANUMERIC_A(c)
      |                            ^~~~~~~~~~~~~~~~
RealPPPort.xs:2140:18: note: in expansion of macro 'isALPHANUMERIC'
 2140 |         RETVAL = isALPHANUMERIC(ord);
      |                  ^~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHANUMERIC_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1620:32: note: in expansion of macro '_generic_isCC_A'
 1620 | #   define isALPHANUMERIC_A(c) _generic_isCC_A(c, _CC_ALPHANUMERIC)
      |                                ^~~~~~~~~~~~~~~
RealPPPort.xs:2148:18: note: in expansion of macro 'isALPHANUMERIC_A'
 2148 |         RETVAL = isALPHANUMERIC_A(ord);
      |                  ^~~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALNUM':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
../../handy.h:1837:23: note: in expansion of macro 'isWORDCHAR_A'
 1837 | #define isWORDCHAR(c) isWORDCHAR_A(c)
      |                       ^~~~~~~~~~~~
../../handy.h:2412:29: note: in expansion of macro 'isWORDCHAR'
 2412 | #define isALNUM(c)          isWORDCHAR(c)
      |                             ^~~~~~~~~~
RealPPPort.xs:2156:18: note: in expansion of macro 'isALNUM'
 2156 |         RETVAL = isALNUM(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALNUM_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
../../handy.h:1837:23: note: in expansion of macro 'isWORDCHAR_A'
 1837 | #define isWORDCHAR(c) isWORDCHAR_A(c)
      |                       ^~~~~~~~~~~~
../../handy.h:2412:29: note: in expansion of macro 'isWORDCHAR'
 2412 | #define isALNUM(c)          isWORDCHAR(c)
      |                             ^~~~~~~~~~
../../handy.h:2413:29: note: in expansion of macro 'isALNUM'
 2413 | #define isALNUM_A(c)        isALNUM(c)
      |                             ^~~~~~~
RealPPPort.xs:2164:18: note: in expansion of macro 'isALNUM_A'
 2164 |         RETVAL = isALNUM_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isOCTAL':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
../../handy.h:2409:29: note: in expansion of macro 'isOCTAL_A'
 2409 | #define isOCTAL(c)          isOCTAL_A(c)
      |                             ^~~~~~~~~
RealPPPort.xs:2188:18: note: in expansion of macro 'isOCTAL'
 2188 |         RETVAL = isOCTAL(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isOCTAL_A':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
RealPPPort.xs:2196:18: note: in expansion of macro 'isOCTAL_A'
 2196 |         RETVAL = isOCTAL_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDFIRST':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1629:27: note: in expansion of macro '_generic_isCC_A'
 1629 | #   define isIDFIRST_A(c) _generic_isCC_A(c, _CC_IDFIRST)
      |                           ^~~~~~~~~~~~~~~
../../handy.h:1828:22: note: in expansion of macro 'isIDFIRST_A'
 1828 | #define isIDFIRST(c) isIDFIRST_A(c)
      |                      ^~~~~~~~~~~
RealPPPort.xs:2204:18: note: in expansion of macro 'isIDFIRST'
 2204 |         RETVAL = isIDFIRST(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDFIRST_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1629:27: note: in expansion of macro '_generic_isCC_A'
 1629 | #   define isIDFIRST_A(c) _generic_isCC_A(c, _CC_IDFIRST)
      |                           ^~~~~~~~~~~~~~~
RealPPPort.xs:2212:18: note: in expansion of macro 'isIDFIRST_A'
 2212 |         RETVAL = isIDFIRST_A(ord);
      |                  ^~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDCONT':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
../../handy.h:1837:23: note: in expansion of macro 'isWORDCHAR_A'
 1837 | #define isWORDCHAR(c) isWORDCHAR_A(c)
      |                       ^~~~~~~~~~~~
../../handy.h:2053:33: note: in expansion of macro 'isWORDCHAR'
 2053 | #define isIDCONT(c)             isWORDCHAR(c)
      |                                 ^~~~~~~~~~
RealPPPort.xs:2220:18: note: in expansion of macro 'isIDCONT'
 2220 |         RETVAL = isIDCONT(ord);
      |                  ^~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDCONT_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1626:28: note: in expansion of macro '_generic_isCC_A'
 1626 | #   define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
      |                            ^~~~~~~~~~~~~~~
../../handy.h:2054:33: note: in expansion of macro 'isWORDCHAR_A'
 2054 | #define isIDCONT_A(c)           isWORDCHAR_A(c)
      |                                 ^~~~~~~~~~~~
RealPPPort.xs:2228:18: note: in expansion of macro 'isIDCONT_A'
 2228 |         RETVAL = isIDCONT_A(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isSPACE':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1625:26: note: in expansion of macro '_generic_isCC_A'
 1625 | #   define isSPACE_A(c)  _generic_isCC_A(c, _CC_SPACE)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1835:22: note: in expansion of macro 'isSPACE_A'
 1835 | #define isSPACE(c)   isSPACE_A(c)
      |                      ^~~~~~~~~
RealPPPort.xs:2236:18: note: in expansion of macro 'isSPACE'
 2236 |         RETVAL = isSPACE(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isSPACE_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1625:26: note: in expansion of macro '_generic_isCC_A'
 1625 | #   define isSPACE_A(c)  _generic_isCC_A(c, _CC_SPACE)
      |                          ^~~~~~~~~~~~~~~
RealPPPort.xs:2244:18: note: in expansion of macro 'isSPACE_A'
 2244 |         RETVAL = isSPACE_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isCNTRL':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1622:26: note: in expansion of macro '_generic_isCC_A'
 1622 | #   define isCNTRL_A(c)  _generic_isCC_A(c, _CC_CNTRL)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1825:22: note: in expansion of macro 'isCNTRL_A'
 1825 | #define isCNTRL(c)   isCNTRL_A(c)
      |                      ^~~~~~~~~
RealPPPort.xs:2268:18: note: in expansion of macro 'isCNTRL'
 2268 |         RETVAL = isCNTRL(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isCNTRL_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1622:26: note: in expansion of macro '_generic_isCC_A'
 1622 | #   define isCNTRL_A(c)  _generic_isCC_A(c, _CC_CNTRL)
      |                          ^~~~~~~~~~~~~~~
RealPPPort.xs:2276:18: note: in expansion of macro 'isCNTRL_A'
 2276 |         RETVAL = isCNTRL_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPUNCT':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1624:26: note: in expansion of macro '_generic_isCC_A'
 1624 | #   define isPUNCT_A(c)  _generic_isCC_A(c, _CC_PUNCT)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1834:22: note: in expansion of macro 'isPUNCT_A'
 1834 | #define isPUNCT(c)   isPUNCT_A(c)
      |                      ^~~~~~~~~
RealPPPort.xs:2316:18: note: in expansion of macro 'isPUNCT'
 2316 |         RETVAL = isPUNCT(ord);
      |                  ^~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPUNCT_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1624:26: note: in expansion of macro '_generic_isCC_A'
 1624 | #   define isPUNCT_A(c)  _generic_isCC_A(c, _CC_PUNCT)
      |                          ^~~~~~~~~~~~~~~
RealPPPort.xs:2324:18: note: in expansion of macro 'isPUNCT_A'
 2324 |         RETVAL = isPUNCT_A(ord);
      |                  ^~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isXDIGIT':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1627:27: note: in expansion of macro '_generic_isCC'
 1627 | #   define isXDIGIT_A(c)  _generic_isCC(c, _CC_XDIGIT) /* No non-ASCII xdigits
      |                           ^~~~~~~~~~~~~
../../handy.h:1838:22: note: in expansion of macro 'isXDIGIT_A'
 1838 | #define isXDIGIT(c)  isXDIGIT_A(c)
      |                      ^~~~~~~~~~
RealPPPort.xs:2332:18: note: in expansion of macro 'isXDIGIT'
 2332 |         RETVAL = isXDIGIT(ord);
      |                  ^~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isXDIGIT_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1627:27: note: in expansion of macro '_generic_isCC'
 1627 | #   define isXDIGIT_A(c)  _generic_isCC(c, _CC_XDIGIT) /* No non-ASCII xdigits
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2340:18: note: in expansion of macro 'isXDIGIT_A'
 2340 |         RETVAL = isXDIGIT_A(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPSXSPC':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1625:26: note: in expansion of macro '_generic_isCC_A'
 1625 | #   define isSPACE_A(c)  _generic_isCC_A(c, _CC_SPACE)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1835:22: note: in expansion of macro 'isSPACE_A'
 1835 | #define isSPACE(c)   isSPACE_A(c)
      |                      ^~~~~~~~~
ppport.h:13367:42: note: in expansion of macro 'isSPACE'
13367 | #  define isPSXSPC(c)                    isSPACE(c)
      |                                          ^~~~~~~
RealPPPort.xs:2348:18: note: in expansion of macro 'isPSXSPC'
 2348 |         RETVAL = isPSXSPC(ord);
      |                  ^~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPSXSPC_A':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:1600:42: note: in expansion of macro 'FITS_IN_8_BITS'
 1600 | #   define _generic_isCC_A(c, classnum) (FITS_IN_8_BITS(c)      \
      |                                          ^~~~~~~~~~~~~~
../../handy.h:1625:26: note: in expansion of macro '_generic_isCC_A'
 1625 | #   define isSPACE_A(c)  _generic_isCC_A(c, _CC_SPACE)
      |                          ^~~~~~~~~~~~~~~
../../handy.h:1835:22: note: in expansion of macro 'isSPACE_A'
 1835 | #define isSPACE(c)   isSPACE_A(c)
      |                      ^~~~~~~~~
ppport.h:13367:42: note: in expansion of macro 'isSPACE'
13367 | #  define isPSXSPC(c)                    isSPACE(c)
      |                                          ^~~~~~~
ppport.h:13502:42: note: in expansion of macro 'isPSXSPC'
13502 | #  define isPSXSPC_A(c)                  isPSXSPC(c)
      |                                          ^~~~~~~~
RealPPPort.xs:2356:18: note: in expansion of macro 'isPSXSPC_A'
 2356 |         RETVAL = isPSXSPC_A(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHANUMERIC_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1631:33: note: in expansion of macro '_generic_isCC'
 1631 | #   define isALPHANUMERIC_L1(c) _generic_isCC(c, _CC_ALPHANUMERIC)
      |                                 ^~~~~~~~~~~~~
RealPPPort.xs:2364:18: note: in expansion of macro 'isALPHANUMERIC_L1'
 2364 |         RETVAL = isALPHANUMERIC_L1(ord);
      |                  ^~~~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALNUMC_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1631:33: note: in expansion of macro '_generic_isCC'
 1631 | #   define isALPHANUMERIC_L1(c) _generic_isCC(c, _CC_ALPHANUMERIC)
      |                                 ^~~~~~~~~~~~~
../../handy.h:2423:29: note: in expansion of macro 'isALPHANUMERIC_L1'
 2423 | #define isALNUMC_L1(c)      isALPHANUMERIC_L1(c)
      |                             ^~~~~~~~~~~~~~~~~
RealPPPort.xs:2372:18: note: in expansion of macro 'isALNUMC_L1'
 2372 |         RETVAL = isALNUMC_L1(ord);
      |                  ^~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isOCTAL_L1':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
../../handy.h:2410:29: note: in expansion of macro 'isOCTAL_A'
 2410 | #define isOCTAL_L1(c)       isOCTAL_A(c)
      |                             ^~~~~~~~~
RealPPPort.xs:2388:18: note: in expansion of macro 'isOCTAL_L1'
 2388 |         RETVAL = isOCTAL_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDFIRST_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1646:28: note: in expansion of macro '_generic_isCC'
 1646 | #   define isIDFIRST_L1(c) _generic_isCC(c, _CC_IDFIRST)
      |                            ^~~~~~~~~~~~~
RealPPPort.xs:2396:18: note: in expansion of macro 'isIDFIRST_L1'
 2396 |         RETVAL = isIDFIRST_L1(ord);
      |                  ^~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDCONT_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1645:29: note: in expansion of macro '_generic_isCC'
 1645 | #   define isWORDCHAR_L1(c) _generic_isCC(c, _CC_WORDCHAR)
      |                             ^~~~~~~~~~~~~
../../handy.h:2055:33: note: in expansion of macro 'isWORDCHAR_L1'
 2055 | #define isIDCONT_L1(c)          isWORDCHAR_L1(c)
      |                                 ^~~~~~~~~~~~~
RealPPPort.xs:2404:18: note: in expansion of macro 'isIDCONT_L1'
 2404 |         RETVAL = isIDCONT_L1(ord);
      |                  ^~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isSPACE_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1643:27: note: in expansion of macro '_generic_isCC'
 1643 | #   define isSPACE_L1(c)  _generic_isCC(c, _CC_SPACE)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2412:18: note: in expansion of macro 'isSPACE_L1'
 2412 |         RETVAL = isSPACE_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isCNTRL_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1637:27: note: in expansion of macro '_generic_isCC'
 1637 | #   define isCNTRL_L1(c)  _generic_isCC(c, _CC_CNTRL)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2428:18: note: in expansion of macro 'isCNTRL_L1'
 2428 |         RETVAL = isCNTRL_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPRINT_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1640:27: note: in expansion of macro '_generic_isCC'
 1640 | #   define isPRINT_L1(c)  _generic_isCC(c, _CC_PRINT)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2436:18: note: in expansion of macro 'isPRINT_L1'
 2436 |         RETVAL = isPRINT_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isGRAPH_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1638:27: note: in expansion of macro '_generic_isCC'
 1638 | #   define isGRAPH_L1(c)  _generic_isCC(c, _CC_GRAPH)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2444:18: note: in expansion of macro 'isGRAPH_L1'
 2444 |         RETVAL = isGRAPH_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPUNCT_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1642:27: note: in expansion of macro '_generic_isCC'
 1642 | #   define isPUNCT_L1(c)  _generic_isCC(c, _CC_PUNCT)
      |                           ^~~~~~~~~~~~~
RealPPPort.xs:2452:18: note: in expansion of macro 'isPUNCT_L1'
 2452 |         RETVAL = isPUNCT_L1(ord);
      |                  ^~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isXDIGIT_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1627:27: note: in expansion of macro '_generic_isCC'
 1627 | #   define isXDIGIT_A(c)  _generic_isCC(c, _CC_XDIGIT) /* No non-ASCII xdigits
      |                           ^~~~~~~~~~~~~
../../handy.h:2411:29: note: in expansion of macro 'isXDIGIT_A'
 2411 | #define isXDIGIT_L1(c)      isXDIGIT_A(c)
      |                             ^~~~~~~~~~
RealPPPort.xs:2460:18: note: in expansion of macro 'isXDIGIT_L1'
 2460 |         RETVAL = isXDIGIT_L1(ord);
      |                  ^~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPSXSPC_L1':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1643:27: note: in expansion of macro '_generic_isCC'
 1643 | #   define isSPACE_L1(c)  _generic_isCC(c, _CC_SPACE)
      |                           ^~~~~~~~~~~~~
ppport.h:13371:42: note: in expansion of macro 'isSPACE_L1'
13371 | #  define isPSXSPC_L1(c)                 isSPACE_L1(c)
      |                                          ^~~~~~~~~~
RealPPPort.xs:2468:18: note: in expansion of macro 'isPSXSPC_L1'
 2468 |         RETVAL = isPSXSPC_L1(ord);
      |                  ^~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isBLANK_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2082:31: note: in expansion of macro '_generic_uvchr'
 2082 | #define isBLANK_uvchr(c)      _generic_uvchr(_CC_BLANK, is_HORIZWS_cp_high, c)
      |                               ^~~~~~~~~~~~~~
RealPPPort.xs:2496:18: note: in expansion of macro 'isBLANK_uvchr'
 2496 |         RETVAL = isBLANK_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHA_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2079:31: note: in expansion of macro '_generic_invlist_uvchr'
 2079 | #define isALPHA_uvchr(c)      _generic_invlist_uvchr(_CC_ALPHA, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2504:18: note: in expansion of macro 'isALPHA_uvchr'
 2504 |         RETVAL = isALPHA_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isALPHANUMERIC_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2080:33: note: in expansion of macro '_generic_invlist_uvchr'
 2080 | #define isALPHANUMERIC_uvchr(c) _generic_invlist_uvchr(_CC_ALPHANUMERIC, c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2512:18: note: in expansion of macro 'isALPHANUMERIC_uvchr'
 2512 |         RETVAL = isALPHANUMERIC_uvchr(ord);
      |                  ^~~~~~~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isCNTRL_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:1637:27: note: in expansion of macro '_generic_isCC'
 1637 | #   define isCNTRL_L1(c)  _generic_isCC(c, _CC_CNTRL)
      |                           ^~~~~~~~~~~~~
../../handy.h:2083:31: note: in expansion of macro 'isCNTRL_L1'
 2083 | #define isCNTRL_uvchr(c)      isCNTRL_L1(c) /* All controls are in Latin1 */
      |                               ^~~~~~~~~~
RealPPPort.xs:2520:18: note: in expansion of macro 'isCNTRL_uvchr'
 2520 |         RETVAL = isCNTRL_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isDIGIT_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2084:31: note: in expansion of macro '_generic_invlist_uvchr'
 2084 | #define isDIGIT_uvchr(c)      _generic_invlist_uvchr(_CC_DIGIT, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2528:18: note: in expansion of macro 'isDIGIT_uvchr'
 2528 |         RETVAL = isDIGIT_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDFIRST_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2089:21: note: in expansion of macro '_generic_uvchr'
 2089 |                     _generic_uvchr(_CC_IDFIRST, _is_uni_perl_idstart, c)
      |                     ^~~~~~~~~~~~~~
RealPPPort.xs:2536:18: note: in expansion of macro 'isIDFIRST_uvchr'
 2536 |         RETVAL = isIDFIRST_uvchr(ord);
      |                  ^~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isIDCONT_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2087:21: note: in expansion of macro '_generic_uvchr'
 2087 |                     _generic_uvchr(_CC_WORDCHAR, _is_uni_perl_idcont, c)
      |                     ^~~~~~~~~~~~~~
RealPPPort.xs:2544:18: note: in expansion of macro 'isIDCONT_uvchr'
 2544 |         RETVAL = isIDCONT_uvchr(ord);
      |                  ^~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isGRAPH_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2085:31: note: in expansion of macro '_generic_invlist_uvchr'
 2085 | #define isGRAPH_uvchr(c)      _generic_invlist_uvchr(_CC_GRAPH, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2552:18: note: in expansion of macro 'isGRAPH_uvchr'
 2552 |         RETVAL = isGRAPH_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isLOWER_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2090:31: note: in expansion of macro '_generic_invlist_uvchr'
 2090 | #define isLOWER_uvchr(c)      _generic_invlist_uvchr(_CC_LOWER, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2560:18: note: in expansion of macro 'isLOWER_uvchr'
 2560 |         RETVAL = isLOWER_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPRINT_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2091:31: note: in expansion of macro '_generic_invlist_uvchr'
 2091 | #define isPRINT_uvchr(c)      _generic_invlist_uvchr(_CC_PRINT, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2568:18: note: in expansion of macro 'isPRINT_uvchr'
 2568 |         RETVAL = isPRINT_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPSXSPC_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2094:31: note: in expansion of macro '_generic_uvchr'
 2094 | #define isSPACE_uvchr(c)      _generic_uvchr(_CC_SPACE, is_XPERLSPACE_cp_high, c)
      |                               ^~~~~~~~~~~~~~
../../handy.h:2095:31: note: in expansion of macro 'isSPACE_uvchr'
 2095 | #define isPSXSPC_uvchr(c)     isSPACE_uvchr(c)
      |                               ^~~~~~~~~~~~~
RealPPPort.xs:2576:18: note: in expansion of macro 'isPSXSPC_uvchr'
 2576 |         RETVAL = isPSXSPC_uvchr(ord);
      |                  ^~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isPUNCT_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2093:31: note: in expansion of macro '_generic_invlist_uvchr'
 2093 | #define isPUNCT_uvchr(c)      _generic_invlist_uvchr(_CC_PUNCT, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2584:18: note: in expansion of macro 'isPUNCT_uvchr'
 2584 |         RETVAL = isPUNCT_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isSPACE_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2094:31: note: in expansion of macro '_generic_uvchr'
 2094 | #define isSPACE_uvchr(c)      _generic_uvchr(_CC_SPACE, is_XPERLSPACE_cp_high, c)
      |                               ^~~~~~~~~~~~~~
RealPPPort.xs:2592:18: note: in expansion of macro 'isSPACE_uvchr'
 2592 |         RETVAL = isSPACE_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isUPPER_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2097:31: note: in expansion of macro '_generic_invlist_uvchr'
 2097 | #define isUPPER_uvchr(c)      _generic_invlist_uvchr(_CC_UPPER, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2600:18: note: in expansion of macro 'isUPPER_uvchr'
 2600 |         RETVAL = isUPPER_uvchr(ord);
      |                  ^~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isWORDCHAR_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2077:48: note: in expansion of macro '_generic_isCC'
 2077 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2099:31: note: in expansion of macro '_generic_invlist_uvchr'
 2099 | #define isWORDCHAR_uvchr(c)   _generic_invlist_uvchr(_CC_WORDCHAR, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:2608:18: note: in expansion of macro 'isWORDCHAR_uvchr'
 2608 |         RETVAL = isWORDCHAR_uvchr(ord);
      |                  ^~~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_isXDIGIT_uvchr':
ppport.h:12620:68: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-256' to '18446744073709551360' [-Wsign-conversion]
12620 |                                     || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
      |                                                                    ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:45: note: in expansion of macro 'FITS_IN_8_BITS'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                             ^~~~~~~~~~~~~~
../../handy.h:2074:48: note: in expansion of macro '_generic_isCC'
 2074 |                                              ? _generic_isCC(c, classnum)   \
      |                                                ^~~~~~~~~~~~~
../../handy.h:2100:31: note: in expansion of macro '_generic_uvchr'
 2100 | #define isXDIGIT_uvchr(c)     _generic_uvchr(_CC_XDIGIT, is_XDIGIT_cp_high, c)
      |                               ^~~~~~~~~~~~~~
RealPPPort.xs:2616:18: note: in expansion of macro 'isXDIGIT_uvchr'
 2616 |         RETVAL = isXDIGIT_uvchr(ord);
      |                  ^~~~~~~~~~~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_LATIN1_TO_NATIVE':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6416:9: note: in expansion of macro 'PUSHu'
 6416 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_NATIVE_TO_LATIN1':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6437:9: note: in expansion of macro 'PUSHu'
 6437 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4170:
RealPPPort.xs: In function 'XS_Devel__PPPort_av_tindex':
../../av.h:96:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   96 | #define AvFILL(av)      ((SvRMAGICAL((const SV *) (av))) \
      |                         ^
../../av.h:98:26: note: in expansion of macro 'AvFILL'
   98 | #define av_top_index(av) AvFILL(av)
      |                          ^~~~~~
../../av.h:99:26: note: in expansion of macro 'av_top_index'
   99 | #define av_tindex(av)    av_top_index(av)
      |                          ^~~~~~~~~~~~
RealPPPort.xs:3129:26: note: in expansion of macro 'av_tindex'
 3129 |                 RETVAL = av_tindex((AV*)SvRV(av));
      |                          ^~~~~~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6458:9: note: in expansion of macro 'PUSHu'
 6458 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_av_top_index':
../../av.h:96:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   96 | #define AvFILL(av)      ((SvRMAGICAL((const SV *) (av))) \
      |                         ^
../../av.h:98:26: note: in expansion of macro 'AvFILL'
   98 | #define av_top_index(av) AvFILL(av)
      |                          ^~~~~~
RealPPPort.xs:3137:26: note: in expansion of macro 'av_top_index'
 3137 |                 RETVAL = av_top_index((AV*)SvRV(av));
      |                          ^~~~~~~~~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6479:9: note: in expansion of macro 'PUSHu'
 6479 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_av_count':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6500:9: note: in expansion of macro 'PUSHu'
 6500 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_newRV_inc_REFCNT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6568:9: note: in expansion of macro 'PUSHu'
 6568 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_newRV_noinc_REFCNT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:6593:9: note: in expansion of macro 'PUSHu'
 6593 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_newSVpvn_share':
RealPPPort.xs:3418:40: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3418 |                 sv = newSVpvn_share(s, len, 0);
      |                                        ^~~
../../embed.h:402:61: note: in definition of macro 'newSVpvn_share'
  402 | #define newSVpvn_share(a,b,c)   Perl_newSVpvn_share(aTHX_ a,b,c)
      |                                                             ^
RealPPPort.xs: In function 'XS_Devel__PPPort_my_strlfunc':
../../embed.h:817:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:817:33: note: in definition of macro 'my_strlcpy'
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: note: in definition of macro 'my_strlcat'
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: note: in definition of macro 'my_strlcat'
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:817:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:817:33: note: in definition of macro 'my_strlcpy'
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:817:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:817:33: note: in definition of macro 'my_strlcpy'
  817 | #define my_strlcpy              Perl_my_strlcpy
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
../../embed.h:814:33: note: in definition of macro 'my_strlcat'
  814 | #define my_strlcat              Perl_my_strlcat
      |                                 ^~~~~~~~~~~~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_uvchr_to_utf8':
../../utf8.h:455:5: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  455 |     ((OFFUNI_IS_INVARIANT(uv))                                              \
      |     ^
../../utf8.h:482:25: note: in expansion of macro 'OFFUNISKIP'
  482 | #define UVCHR_SKIP(uv)  OFFUNISKIP(NATIVE_TO_UNI(uv))
      |                         ^~~~~~~~~~
RealPPPort.xs:3637:15: note: in expansion of macro 'UVCHR_SKIP'
 3637 |         len = UVCHR_SKIP(native);
      |               ^~~~~~~~~~
RealPPPort.xs:3644:25: warning: conversion from 'UV' {aka 'long unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 3644 |             string[0] = native;
      |                         ^~~~~~
RealPPPort.xs:3656:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3656 |         RETVAL = newSVpvn((char *) string, len);
      |                                            ^~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
RealPPPort.xs: In function 'XS_Devel__PPPort_UTF8_SAFE_SKIP':
ppport.h:17623:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17623 | #  define UTF8_SAFE_SKIP(s, e)           (                                          \
      |                                          ^
RealPPPort.xs:3673:22: note: in expansion of macro 'UTF8_SAFE_SKIP'
 3673 |             RETVAL = UTF8_SAFE_SKIP(const_s, s + UTF8SKIP(s) + adjustment);
      |                      ^~~~~~~~~~~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7488:9: note: in expansion of macro 'PUSHu'
 7488 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_isUTF8_CHAR':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7522:9: note: in expansion of macro 'PUSHu'
 7522 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_foldEQ_utf8':
../../embed.h:183:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~
../../embed.h:183:49: note: in definition of macro 'foldEQ_utf8_flags'
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~
RealPPPort.xs:3715:22: note: in expansion of macro 'foldEQ_utf8'
 3715 |             RETVAL = foldEQ_utf8(const_s1, NULL, l1, u1, const_s2, NULL, l2, u2);
      |                      ^~~~~~~~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7563:9: note: in expansion of macro 'PUSHu'
 7563 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_sv_len_utf8':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7676:9: note: in expansion of macro 'PUSHu'
 7676 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_sv_len_utf8_nomg':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7701:9: note: in expansion of macro 'PUSHu'
 7701 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_UVCHR_SKIP':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7753:9: note: in expansion of macro 'PUSHu'
 7753 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_sv_2uv':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7816:9: note: in expansion of macro 'PUSHu'
 7816 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_SvUVx':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7838:9: note: in expansion of macro 'PUSHu'
 7838 |         PUSHu((UV)RETVAL);
      |         ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_PUSHu':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.xs:3874:17: note: in expansion of macro 'PUSHu'
 3874 |                 PUSHu(42);
      |                 ^~~~~
RealPPPort.xs: In function 'XS_Devel__PPPort_XPUSHu':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.xs:3883:17: note: in expansion of macro 'XPUSHu'
 3883 |                 XPUSHu(43);
      |                 ^~~~~~
RealPPPort.c: In function 'XS_Devel__PPPort_my_strnlen':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
RealPPPort.c:7926:9: note: in expansion of macro 'PUSHu'
 7926 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:5810:
RealPPPort.xs: In function 'XS_Devel__PPPort_PL_na':
../../embedvar.h:201:33: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  201 | #define PL_na                   (vTHX->Ina)
      |                                 ^
RealPPPort.xs:3935:26: note: in expansion of macro 'PL_na'
 3935 |                 RETVAL = PL_na;
      |                          ^~~~~
In file included from ../../perl.h:4161:
RealPPPort.c: In function 'boot_Devel__PPPort':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RealPPPort.c:8383:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 8383 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RealPPPort.c:8383:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 8383 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.68\" -DXS_VERSION=\"3.68\" -fPIC -Wno-unused-function "-I../.."  -W -Wall module2.c
In file included from ../../perl.h:7246,
                 from module2.c:17:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.68\" -DXS_VERSION=\"3.68\" -fPIC -Wno-unused-function "-I../.."  -W -Wall module3.c
In file included from ../../perl.h:7246,
                 from module3.c:17:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
module3.c: In function 'dummy_parser_warning':
module3.c:70:21: warning: the comparison will always evaluate as 'true' for the address of 'bufptr' will never be NULL [-Waddress]
   70 |   return &PL_bufptr != NULL;
      |                     ^~
In file included from ../../perl.h:4185:
../../parser.h:83:18: note: 'bufptr' declared here
   83 |     char        *bufptr;        /* carries the cursor (current parsing
      |                  ^~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Devel/PPPort/PPPort.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  RealPPPort.o module2.o module3.o  -o ../../lib/auto/Devel/PPPort/PPPort.so  \
      \
  
chmod 755 ../../lib/auto/Devel/PPPort/PPPort.so
"../../miniperl_top" "-I../../lib" "-I../../lib" mktests.PL t/01_test.t 
generating t/01_test.t
generating t/HvNAME.t
generating t/MY_CXT.t
generating t/SvPV.t
generating t/SvREFCNT.t
generating t/Sv_set.t
generating t/call.t
generating t/cop.t
generating t/exception.t
generating t/format.t
generating t/grok.t
generating t/gv.t
generating t/limits.t
generating t/locale.t
generating t/mPUSH.t
generating t/magic.t
generating t/memory.t
generating t/mess.t
generating t/misc.t
generating t/newCONSTSUB.t
generating t/newRV.t
generating t/newSV_type.t
generating t/newSVpv.t
generating t/podtest.t
generating t/ppphtest.t
generating t/pv_tools.t
generating t/pvs.t
generating t/shared_pv.t
generating t/snprintf.t
generating t/sprintf.t
generating t/strlfuncs.t
generating t/sv_xpvf.t
generating t/threads.t
generating t/utf8.t
generating t/uv.t
generating t/variables.t
generating t/warn.t
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Devel-PPPort'
cd dist/Devel-PPPort && ../../miniperl -I../../lib ppport_h.PL
cp -f dist/Devel-PPPort/ppport.h dist/ExtUtils-ParseXS/ppport.h
make -C dist/ExtUtils-ParseXS/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/ExtUtils-ParseXS'
cp lib/ExtUtils/Typemaps.pm ../../lib/ExtUtils/Typemaps.pm
cp lib/ExtUtils/Typemaps/InputMap.pm ../../lib/ExtUtils/Typemaps/InputMap.pm
cp lib/perlxstypemap.pod ../../lib/perlxstypemap.pod
cp lib/ExtUtils/Typemaps/Type.pm ../../lib/ExtUtils/Typemaps/Type.pm
cp lib/ExtUtils/ParseXS.pod ../../lib/ExtUtils/ParseXS.pod
cp lib/perlxs.pod ../../lib/perlxs.pod
cp lib/ExtUtils/Typemaps/Cmd.pm ../../lib/ExtUtils/Typemaps/Cmd.pm
cp lib/ExtUtils/ParseXS/CountLines.pm ../../lib/ExtUtils/ParseXS/CountLines.pm
cp lib/perlxstut.pod ../../lib/perlxstut.pod
Skip ../../lib/ExtUtils/xsubpp (unchanged)
cp lib/ExtUtils/ParseXS/Eval.pm ../../lib/ExtUtils/ParseXS/Eval.pm
cp lib/ExtUtils/ParseXS.pm ../../lib/ExtUtils/ParseXS.pm
cp lib/ExtUtils/Typemaps/OutputMap.pm ../../lib/ExtUtils/Typemaps/OutputMap.pm
cp lib/ExtUtils/ParseXS/Utilities.pm ../../lib/ExtUtils/ParseXS/Utilities.pm
cp lib/ExtUtils/ParseXS/Constants.pm ../../lib/ExtUtils/ParseXS/Constants.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/ExtUtils-ParseXS'
./miniperl_top make_ext_Makefile.pl dist/Filter-Simple/Makefile.PL
Creating dist/Filter-Simple/Makefile.PL for Filter::Simple
cd dist/Filter-Simple/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Filter::Simple
make -C dist/Filter-Simple/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Filter-Simple'
cp lib/Filter/Simple.pm ../../lib/Filter/Simple.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Filter-Simple'
./miniperl_top make_ext_Makefile.pl dist/FindBin/Makefile.PL
Creating dist/FindBin/Makefile.PL for FindBin
cd dist/FindBin/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for FindBin
make -C dist/FindBin/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/FindBin'
cp lib/FindBin.pm ../../lib/FindBin.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/FindBin'
./miniperl_top make_ext_Makefile.pl dist/I18N-Collate/Makefile.PL
Creating dist/I18N-Collate/Makefile.PL for I18N::Collate
cd dist/I18N-Collate/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for I18N::Collate
make -C dist/I18N-Collate/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/I18N-Collate'
cp lib/I18N/Collate.pm ../../lib/I18N/Collate.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/I18N-Collate'
./miniperl_top make_ext_Makefile.pl dist/I18N-LangTags/Makefile.PL
Creating dist/I18N-LangTags/Makefile.PL for I18N::LangTags
cd dist/I18N-LangTags/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for I18N::LangTags
make -C dist/I18N-LangTags/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/I18N-LangTags'
cp lib/I18N/LangTags.pm ../../lib/I18N/LangTags.pm
cp lib/I18N/LangTags/List.pm ../../lib/I18N/LangTags/List.pm
cp lib/I18N/LangTags/Detect.pm ../../lib/I18N/LangTags/Detect.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/I18N-LangTags'
./miniperl_top make_ext_Makefile.pl dist/if/Makefile.PL
Creating dist/if/Makefile.PL for if
cd dist/if/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for if
make -C dist/if/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/if'
cp if.pm ../../lib/if.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/if'
./miniperl_top make_ext_Makefile.pl dist/Locale-Maketext/Makefile.PL
Creating dist/Locale-Maketext/Makefile.PL for Locale::Maketext
cd dist/Locale-Maketext/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
WARNING: Setting ABSTRACT via file 'lib/Locale/Maketext.pm' failed
 at /home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/ExtUtils-MakeMaker/lib/ExtUtils/MakeMaker.pm line 753.
Generating a Unix-style Makefile
Writing Makefile for Locale::Maketext
make -C dist/Locale-Maketext/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Locale-Maketext'
cp lib/Locale/Maketext.pm ../../lib/Locale/Maketext.pm
cp lib/Locale/Maketext/Guts.pm ../../lib/Locale/Maketext/Guts.pm
cp lib/Locale/Maketext/Cookbook.pod ../../lib/Locale/Maketext/Cookbook.pod
cp lib/Locale/Maketext.pod ../../lib/Locale/Maketext.pod
cp lib/Locale/Maketext/GutsLoader.pm ../../lib/Locale/Maketext/GutsLoader.pm
cp lib/Locale/Maketext/TPJ13.pod ../../lib/Locale/Maketext/TPJ13.pod
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Locale-Maketext'
cd dist/Module-CoreList/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Module::CoreList
make -C dist/Module-CoreList/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Module-CoreList'
cp lib/Module/CoreList.pod ../../lib/Module/CoreList.pod
cp lib/Module/CoreList.pm ../../lib/Module/CoreList.pm
cp lib/Module/CoreList/Utils.pm ../../lib/Module/CoreList/Utils.pm
cp corelist blib/script/corelist
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Module-CoreList/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/corelist
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Module-CoreList'
./miniperl_top make_ext_Makefile.pl dist/Net-Ping/Makefile.PL
Creating dist/Net-Ping/Makefile.PL for Net::Ping
cd dist/Net-Ping/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Net::Ping
make -C dist/Net-Ping/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Net-Ping'
cp lib/Net/Ping.pm ../../lib/Net/Ping.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Net-Ping'
cd dist/Safe/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Safe
make -C dist/Safe/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Safe'
cp Safe.pm ../../lib/Safe.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Safe'
cd dist/Search-Dict/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Search::Dict
make -C dist/Search-Dict/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Search-Dict'
cp lib/Search/Dict.pm ../../lib/Search/Dict.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Search-Dict'
./miniperl_top make_ext_Makefile.pl dist/SelfLoader/Makefile.PL
Creating dist/SelfLoader/Makefile.PL for SelfLoader
cd dist/SelfLoader/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for SelfLoader
make -C dist/SelfLoader/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/SelfLoader'
cp lib/SelfLoader.pm ../../lib/SelfLoader.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/SelfLoader'
./miniperl_top make_ext_Makefile.pl dist/Term-Complete/Makefile.PL
Creating dist/Term-Complete/Makefile.PL for Term::Complete
cd dist/Term-Complete/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Term::Complete
make -C dist/Term-Complete/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Term-Complete'
cp lib/Term/Complete.pm ../../lib/Term/Complete.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Term-Complete'
./miniperl_top make_ext_Makefile.pl dist/Term-ReadLine/Makefile.PL
Creating dist/Term-ReadLine/Makefile.PL for Term::ReadLine
cd dist/Term-ReadLine/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Term::ReadLine
make -C dist/Term-ReadLine/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Term-ReadLine'
cp lib/Term/ReadLine.pm ../../lib/Term/ReadLine.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Term-ReadLine'
./miniperl_top make_ext_Makefile.pl dist/Test/Makefile.PL
Creating dist/Test/Makefile.PL for Test
cd dist/Test/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Test
make -C dist/Test/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Test'
cp lib/Test.pm ../../lib/Test.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Test'
./miniperl_top make_ext_Makefile.pl dist/Text-Abbrev/Makefile.PL
Creating dist/Text-Abbrev/Makefile.PL for Text::Abbrev
cd dist/Text-Abbrev/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Text::Abbrev
make -C dist/Text-Abbrev/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Text-Abbrev'
cp lib/Text/Abbrev.pm ../../lib/Text/Abbrev.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Text-Abbrev'
./miniperl_top make_ext_Makefile.pl dist/Thread-Queue/Makefile.PL
Creating dist/Thread-Queue/Makefile.PL for Thread::Queue
cd dist/Thread-Queue/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Thread::Queue
make -C dist/Thread-Queue/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Thread-Queue'
cp lib/Thread/Queue.pm ../../lib/Thread/Queue.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Thread-Queue'
./miniperl_top make_ext_Makefile.pl dist/Thread-Semaphore/Makefile.PL
Creating dist/Thread-Semaphore/Makefile.PL for Thread::Semaphore
cd dist/Thread-Semaphore/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Thread::Semaphore
make -C dist/Thread-Semaphore/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Thread-Semaphore'
cp lib/Thread/Semaphore.pm ../../lib/Thread/Semaphore.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Thread-Semaphore'
./miniperl_top make_ext_Makefile.pl dist/Tie-File/Makefile.PL
Creating dist/Tie-File/Makefile.PL for Tie::File
cd dist/Tie-File/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Tie::File
make -C dist/Tie-File/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Tie-File'
cp lib/Tie/File.pm ../../lib/Tie/File.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Tie-File'
cd dist/XSLoader/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for XSLoader
make -C dist/XSLoader/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/XSLoader'
"../../miniperl_top" "-I../../lib" XSLoader_pm.PL XSLoader.pm 
cp XSLoader.pm ../../lib/XSLoader.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/XSLoader'
cd ext/Errno/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Errno
make -C ext/Errno/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Errno'
"../../miniperl_top" "-I../../lib" Errno_pm.PL Errno.pm 
cp Errno.pm ../../lib/Errno.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Errno'
./miniperl_top make_ext_Makefile.pl ext/FileCache/Makefile.PL
Creating ext/FileCache/Makefile.PL for FileCache
cd ext/FileCache/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for FileCache
make -C ext/FileCache/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/FileCache'
cp lib/FileCache.pm ../../lib/FileCache.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/FileCache'
./miniperl_top make_ext_Makefile.pl ext/File-Find/Makefile.PL
Creating ext/File-Find/Makefile.PL for File::Find
cd ext/File-Find/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::Find
make -C ext/File-Find/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Find'
cp lib/File/Find.pm ../../lib/File/Find.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Find'
./miniperl_top make_ext_Makefile.pl ext/IPC-Open3/Makefile.PL
Creating ext/IPC-Open3/Makefile.PL for IPC::Open3
cd ext/IPC-Open3/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for IPC::Open3
make -C ext/IPC-Open3/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/IPC-Open3'
cp lib/IPC/Open2.pm ../../lib/IPC/Open2.pm
cp lib/IPC/Open3.pm ../../lib/IPC/Open3.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/IPC-Open3'
cd ext/Pod-Functions/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Functions
make -C ext/Pod-Functions/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Pod-Functions'
"../../miniperl_top" "-I../../lib" Functions_pm.PL ../../pod/perlfunc.pod
cp Functions.pm ../../lib/Pod/Functions.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Pod-Functions'
./miniperl_top make_ext_Makefile.pl ext/Pod-Html/Makefile.PL
Creating ext/Pod-Html/Makefile.PL for Pod::Html
cd ext/Pod-Html/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Pod::Html
make -C ext/Pod-Html/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Pod-Html'
cp lib/Pod/Html/Util.pm ../../lib/Pod/Html/Util.pm
cp lib/Pod/Html.pm ../../lib/Pod/Html.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Pod-Html'
./miniperl_top make_ext_Makefile.pl ext/Tie-Hash-NamedCapture/Makefile.PL
Creating ext/Tie-Hash-NamedCapture/Makefile.PL for Tie::Hash::NamedCapture
cd ext/Tie-Hash-NamedCapture/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Tie::Hash::NamedCapture
make -C ext/Tie-Hash-NamedCapture/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Tie-Hash-NamedCapture'
cp NamedCapture.pm ../../lib/Tie/Hash/NamedCapture.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Tie-Hash-NamedCapture'
./miniperl_top make_ext_Makefile.pl ext/Tie-Memoize/Makefile.PL
Creating ext/Tie-Memoize/Makefile.PL for Tie::Memoize
cd ext/Tie-Memoize/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Tie::Memoize
make -C ext/Tie-Memoize/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Tie-Memoize'
cp lib/Tie/Memoize.pm ../../lib/Tie/Memoize.pm
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Tie-Memoize'
make -C utils all
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/utils'
../miniperl_top corelist.PL
Extracting corelist (with variable substitutions)
../miniperl_top cpan.PL
Extracting cpan (with variable substitutions)
../miniperl_top enc2xs.PL
Extracting enc2xs (with variable substitutions)
../miniperl_top encguess.PL
Extracting encguess (with variable substitutions)
../miniperl_top h2ph.PL
Extracting h2ph (with variable substitutions)
../miniperl_top h2xs.PL
Extracting h2xs (with variable substitutions)
../miniperl_top instmodsh.PL
Extracting instmodsh (with variable substitutions)
../miniperl_top json_pp.PL
Extracting json_pp (with variable substitutions)
../miniperl_top libnetcfg.PL
Extracting libnetcfg (with variable substitutions)
../miniperl_top perlbug.PL
Extracting perlbug (with variable substitutions)
../miniperl_top perldoc.PL
Extracting "perldoc" (with variable substitutions)
../miniperl_top perlivp.PL
Extracting perlivp (with variable substitutions)
../miniperl_top piconv.PL
Extracting piconv (with variable substitutions)
../miniperl_top pl2pm.PL
Extracting pl2pm (with variable substitutions)
../miniperl_top pod2html.PL
Extracting pod2html (with variable substitutions)
../miniperl_top prove.PL
Extracting prove (with variable substitutions)
../miniperl_top ptardiff.PL
Extracting ptardiff (with variable substitutions)
../miniperl_top ptargrep.PL
Extracting ptargrep (with variable substitutions)
../miniperl_top ptar.PL
Extracting ptar (with variable substitutions)
../miniperl_top shasum.PL
Extracting shasum (with variable substitutions)
../miniperl_top splain.PL
Extracting splain (with variable substitutions)
../miniperl_top streamzip.PL
Extracting streamzip (with variable substitutions)
../miniperl_top xsubpp.PL
Extracting xsubpp (with variable substitutions)
../miniperl_top zipdetails.PL
Extracting zipdetails (with variable substitutions)
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/utils'
cd cpan/Compress-Raw-Bzip2/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Compress::Raw::Bzip2
make -C cpan/Compress-Raw-Bzip2/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Bzip2'
cp lib/Compress/Raw/Bzip2.pm ../../lib/Compress/Raw/Bzip2.pm
Running Mkbootstrap for Bzip2 ()
chmod 644 "Bzip2.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Bzip2/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Bzip2.bs ../../lib/auto/Compress/Raw/Bzip2/Bzip2.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Bzip2/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Bzip2/typemap'  Bzip2.xs > Bzip2.xsc
mv Bzip2.xsc Bzip2.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  Bzip2.c
In file included from ../../perl.h:7246,
                 from Bzip2.xs:14:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5782:
Bzip2.c: In function 'XS_Compress__Raw__Bzip2_total_in_lo32':
Bzip2.c:1201:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1201 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1201:9: note: in expansion of macro 'PUSHu'
 1201 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1201:9: note: in expansion of macro 'PUSHu'
 1201 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bzip2_total_out_lo32':
Bzip2.c:1235:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1235 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1235:9: note: in expansion of macro 'PUSHu'
 1235 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1235:9: note: in expansion of macro 'PUSHu'
 1235 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bzip2_compressedBytes':
Bzip2.c:1269:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1269 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1269:9: note: in expansion of macro 'PUSHu'
 1269 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1269:9: note: in expansion of macro 'PUSHu'
 1269 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bzip2_uncompressedBytes':
Bzip2.c:1303:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1303 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1303:9: note: in expansion of macro 'PUSHu'
 1303 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1303:9: note: in expansion of macro 'PUSHu'
 1303 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bunzip2_inflateCount':
Bzip2.c:1545:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1545 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1545:9: note: in expansion of macro 'PUSHu'
 1545 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1545:9: note: in expansion of macro 'PUSHu'
 1545 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.xs: In function 'XS_Compress__Raw__Bunzip2_status':
Bzip2.xs:866:18: warning: conversion to 'uLong' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  866 |         RETVAL = s->last_error ;
      |                  ^
Bzip2.c:1606:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1606 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1606:9: note: in expansion of macro 'PUSHu'
 1606 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1606:9: note: in expansion of macro 'PUSHu'
 1606 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bunzip2_total_in_lo32':
Bzip2.c:1640:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1640 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1640:9: note: in expansion of macro 'PUSHu'
 1640 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1640:9: note: in expansion of macro 'PUSHu'
 1640 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bunzip2_total_out_lo32':
Bzip2.c:1674:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1674 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1674:9: note: in expansion of macro 'PUSHu'
 1674 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1674:9: note: in expansion of macro 'PUSHu'
 1674 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bunzip2_compressedBytes':
Bzip2.c:1708:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1708 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1708:9: note: in expansion of macro 'PUSHu'
 1708 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1708:9: note: in expansion of macro 'PUSHu'
 1708 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Bzip2.c: In function 'XS_Compress__Raw__Bunzip2_uncompressedBytes':
Bzip2.c:1742:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1742 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Bzip2.c:1742:9: note: in expansion of macro 'PUSHu'
 1742 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Bzip2.c:1742:9: note: in expansion of macro 'PUSHu'
 1742 |         PUSHu((IV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
Bzip2.c: In function 'boot_Compress__Raw__Bzip2':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bzip2.c:1756:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1756 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bzip2.c:1756:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1756 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  blocksort.c
blocksort.c: In function 'fallbackSimpleSort':
blocksort.c:44:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   44 |          tmp = fmap[i];
      |                ^~~~
blocksort.c:48:22: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   48 |          fmap[j-4] = tmp;
      |                      ^~~
blocksort.c:53:13: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   53 |       tmp = fmap[i];
      |             ^~~~
blocksort.c:57:19: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   57 |       fmap[j-1] = tmp;
      |                   ^~~
blocksort.c: In function 'fallbackQSort3':
blocksort.c:140:22: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |                fswap(fmap[unLo], fmap[ltLo]);
      |                      ^~~~
blocksort.c:64:20: note: in definition of macro 'fswap'
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:64:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:140:16: note: in expansion of macro 'fswap'
  140 |                fswap(fmap[unLo], fmap[ltLo]);
      |                ^~~~~
blocksort.c:151:22: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  151 |                fswap(fmap[unHi], fmap[gtHi]);
      |                      ^~~~
blocksort.c:64:20: note: in definition of macro 'fswap'
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:64:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:151:16: note: in expansion of macro 'fswap'
  151 |                fswap(fmap[unHi], fmap[gtHi]);
      |                ^~~~~
blocksort.c:159:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  159 |          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
      |                ^~~~
blocksort.c:64:20: note: in definition of macro 'fswap'
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:64:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:159:10: note: in expansion of macro 'fswap'
  159 |          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
      |          ^~~~~
blocksort.c:72:13: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   72 |       fswap(fmap[yyp1], fmap[yyp2]);  \
      |             ^~~~
blocksort.c:64:20: note: in definition of macro 'fswap'
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:166:37: note: in expansion of macro 'fvswap'
  166 |       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
      |                                     ^~~~~~
blocksort.c:64:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:72:7: note: in expansion of macro 'fswap'
   72 |       fswap(fmap[yyp1], fmap[yyp2]);  \
      |       ^~~~~
blocksort.c:166:37: note: in expansion of macro 'fvswap'
  166 |       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
      |                                     ^~~~~~
blocksort.c:72:13: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   72 |       fswap(fmap[yyp1], fmap[yyp2]);  \
      |             ^~~~
blocksort.c:64:20: note: in definition of macro 'fswap'
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:167:37: note: in expansion of macro 'fvswap'
  167 |       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
      |                                     ^~~~~~
blocksort.c:64:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   64 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:72:7: note: in expansion of macro 'fswap'
   72 |       fswap(fmap[yyp1], fmap[yyp2]);  \
      |       ^~~~~
blocksort.c:167:37: note: in expansion of macro 'fvswap'
  167 |       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
      |                                     ^~~~~~
blocksort.c: In function 'fallbackSort':
blocksort.c:240:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  240 |       fmap[k] = i;
      |                 ^
blocksort.c:269:22: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  269 |          k = fmap[i] - H; if (k < 0) k += nblock;
      |                      ^
blocksort.c:269:14: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  269 |          k = fmap[i] - H; if (k < 0) k += nblock;
      |              ^~~~
blocksort.c:270:22: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  270 |          eclass[k] = j;
      |                      ^
blocksort.c:302:22: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  302 |                cc1 = eclass[fmap[i]];
      |                      ^~~~~~
blocksort.c: In function 'mainGtU':
blocksort.c:408:8: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  408 |    k = nblock + 8;
      |        ^~~~~~
blocksort.c: In function 'mainSimpleSort':
blocksort.c:515:29: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  515 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                             ^
blocksort.c:515:34: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  515 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                  ^
blocksort.c:515:55: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  515 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                                       ^~~~~~
blocksort.c:529:29: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  529 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                             ^
blocksort.c:529:34: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  529 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                  ^
blocksort.c:529:55: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  529 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                                       ^~~~~~
blocksort.c:543:29: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  543 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                             ^
blocksort.c:543:34: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  543 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                  ^
blocksort.c:543:55: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  543 |                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget
      |                                                       ^~~~~~
blocksort.c: In function 'mainQSort3':
blocksort.c:657:44: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  657 |             mmed3 ( block[ptr[ lo         ]+d],
      |                                            ^
blocksort.c:658:44: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  658 |                     block[ptr[ hi         ]+d],
      |                                            ^
blocksort.c:659:44: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  659 |                     block[ptr[ (lo+hi)>>1 ]+d] );
      |                                            ^
blocksort.c:667:40: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  667 |             n = ((Int32)block[ptr[unLo]+d]) - med;
      |                                        ^
blocksort.c:669:22: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  669 |                mswap(ptr[unLo], ptr[ltLo]);
      |                      ^~~
blocksort.c:568:20: note: in definition of macro 'mswap'
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:568:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:669:16: note: in expansion of macro 'mswap'
  669 |                mswap(ptr[unLo], ptr[ltLo]);
      |                ^~~~~
blocksort.c:677:40: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  677 |             n = ((Int32)block[ptr[unHi]+d]) - med;
      |                                        ^
blocksort.c:679:22: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  679 |                mswap(ptr[unHi], ptr[gtHi]);
      |                      ^~~
blocksort.c:568:20: note: in definition of macro 'mswap'
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:568:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:679:16: note: in expansion of macro 'mswap'
  679 |                mswap(ptr[unHi], ptr[gtHi]);
      |                ^~~~~
blocksort.c:686:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  686 |          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
      |                ^~~
blocksort.c:568:20: note: in definition of macro 'mswap'
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:568:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:686:10: note: in expansion of macro 'mswap'
  686 |          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
      |          ^~~~~
blocksort.c:576:13: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  576 |       mswap(ptr[yyp1], ptr[yyp2]);    \
      |             ^~~
blocksort.c:568:20: note: in definition of macro 'mswap'
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:696:37: note: in expansion of macro 'mvswap'
  696 |       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
      |                                     ^~~~~~
blocksort.c:568:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:576:7: note: in expansion of macro 'mswap'
  576 |       mswap(ptr[yyp1], ptr[yyp2]);    \
      |       ^~~~~
blocksort.c:696:37: note: in expansion of macro 'mvswap'
  696 |       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
      |                                     ^~~~~~
blocksort.c:576:13: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  576 |       mswap(ptr[yyp1], ptr[yyp2]);    \
      |             ^~~
blocksort.c:568:20: note: in definition of macro 'mswap'
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                    ^~~
blocksort.c:697:37: note: in expansion of macro 'mvswap'
  697 |       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
      |                                     ^~~~~~
blocksort.c:568:42: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  568 |    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
      |                                          ^~~~~
blocksort.c:576:7: note: in expansion of macro 'mswap'
  576 |       mswap(ptr[yyp1], ptr[yyp2]);    \
      |       ^~~~~
blocksort.c:697:37: note: in expansion of macro 'mvswap'
  697 |       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
      |                                     ^~~~~~
blocksort.c: In function 'mainSort':
blocksort.c:809:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  809 |       j = ftab[s] -1;
      |           ^~~~
blocksort.c:810:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  810 |       ftab[s] = j;
      |                 ^
blocksort.c:811:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  811 |       ptr[j] = i;
      |                ^
blocksort.c:813:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  813 |       j = ftab[s] -1;
      |           ^~~~
blocksort.c:814:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  814 |       ftab[s] = j;
      |                 ^
blocksort.c:815:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  815 |       ptr[j] = i-1;
      |                ^
blocksort.c:817:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  817 |       j = ftab[s] -1;
      |           ^~~~
blocksort.c:818:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  818 |       ftab[s] = j;
      |                 ^
blocksort.c:819:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  819 |       ptr[j] = i-2;
      |                ^
blocksort.c:821:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  821 |       j = ftab[s] -1;
      |           ^~~~
blocksort.c:822:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  822 |       ftab[s] = j;
      |                 ^
blocksort.c:823:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  823 |       ptr[j] = i-3;
      |                ^
blocksort.c:827:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  827 |       j = ftab[s] -1;
      |           ^~~~
blocksort.c:828:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  828 |       ftab[s] = j;
      |                 ^
blocksort.c:829:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  829 |       ptr[j] = i;
      |                ^
blocksort.c:890:38: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  890 |                Int32 lo = ftab[sb]   & CLEARMASK;
      |                                      ^
blocksort.c:890:27: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  890 |                Int32 lo = ftab[sb]   & CLEARMASK;
      |                           ^~~~
blocksort.c:891:39: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  891 |                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
      |                                       ^
blocksort.c:891:27: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  891 |                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
      |                           ^
blocksort.c:920:53: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  920 |             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
      |                                                     ^
blocksort.c:920:29: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  920 |             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
      |                             ^~~~
blocksort.c:921:53: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  921 |             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
      |                                                     ^
blocksort.c:921:28: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  921 |             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
      |                            ^
blocksort.c:923:33: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  923 |          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
      |                                 ^
blocksort.c:923:19: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  923 |          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
      |                   ^~~~
blocksort.c:924:17: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  924 |             k = ptr[j]-1; if (k < 0) k += nblock;
      |                 ^~~
blocksort.c:927:41: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  927 |                ptr[ copyStart[c1]++ ] = k;
      |                                         ^
blocksort.c:929:38: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  929 |          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
      |                                      ^
blocksort.c:929:19: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  929 |          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
      |                   ^
blocksort.c:930:17: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  930 |             k = ptr[j]-1; if (k < 0) k += nblock;
      |                 ^~~
blocksort.c:933:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  933 |                ptr[ copyEnd[c1]-- ] = k;
      |                                       ^
blocksort.c:990:41: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  990 |          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
      |                                         ^
blocksort.c:990:27: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  990 |          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
      |                           ^~~~
blocksort.c:991:46: warning: unsigned conversion from 'int' to 'UInt32' {aka 'unsigned int'} changes value from '-2097153' to '4292870143' [-Wsign-conversion]
  991 |          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
      |                                              ^
blocksort.c:991:59: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  991 |          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
      |                                                           ^
blocksort.c:991:27: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  991 |          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
      |                           ^
blocksort.c:997:34: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  997 |             Int32 a2update     = ptr[bbStart + j];
      |                                  ^~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  bzlib.c
bzlib.c: In function 'default_bzalloc':
bzlib.c:104:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  104 |    void* v = malloc ( items * size );
      |                       ~~~~~~^~~~~~
In file included from bzlib.c:31:
bzlib.c: In function 'BZ2_bzCompressInit':
bzlib.c:181:52: warning: conversion to 'unsigned int' from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  181 |    s->arr1 = (UInt32*) BZALLOC( n                  * sizeof(UInt32) );
      |                                                    ^
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
bzlib.c:181:52: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  181 |    s->arr1 = (UInt32*) BZALLOC( n                  * sizeof(UInt32) );
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
bzlib.c:182:52: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  182 |    s->arr2 = (UInt32*) BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
      |                                                    ^
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
bzlib.c:182:52: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  182 |    s->arr2 = (UInt32*) BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
bzlib.c: In function 'unRLE_obuf_to_output_FAST':
bzlib.c:568:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  568 |          s->state_out_ch = s->k0;
      |                            ^
bzlib.c:644:27: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  644 |          c_state_out_ch = c_k0;
      |                           ^~~~
bzlib.c: In function 'unRLE_obuf_to_output_SMALL':
bzlib.c:741:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  741 |          s->state_out_ch = s->k0;
      |                            ^
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:742:10: note: in expansion of macro 'BZ_GET_SMALL'
  742 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:742:10: note: in expansion of macro 'BZ_GET_SMALL'
  742 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:748:10: note: in expansion of macro 'BZ_GET_SMALL'
  748 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:748:10: note: in expansion of macro 'BZ_GET_SMALL'
  748 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:754:10: note: in expansion of macro 'BZ_GET_SMALL'
  754 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:754:10: note: in expansion of macro 'BZ_GET_SMALL'
  754 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:759:10: note: in expansion of macro 'BZ_GET_SMALL'
  759 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:759:10: note: in expansion of macro 'BZ_GET_SMALL'
  759 |          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:762:10: note: in expansion of macro 'BZ_GET_SMALL'
  762 |          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK;
      |          ^~~~~~~~~~~~
bzlib.c:790:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  790 |          s->state_out_ch = s->k0;
      |                            ^
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:791:10: note: in expansion of macro 'BZ_GET_SMALL'
  791 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:791:10: note: in expansion of macro 'BZ_GET_SMALL'
  791 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:796:10: note: in expansion of macro 'BZ_GET_SMALL'
  796 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:796:10: note: in expansion of macro 'BZ_GET_SMALL'
  796 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:801:10: note: in expansion of macro 'BZ_GET_SMALL'
  801 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:801:10: note: in expansion of macro 'BZ_GET_SMALL'
  801 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:805:10: note: in expansion of macro 'BZ_GET_SMALL'
  805 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:12: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |            ^~~~~~~~~~~~~~
bzlib.c:805:10: note: in expansion of macro 'BZ_GET_SMALL'
  805 |          BZ_GET_SMALL(k1); s->nblock_used++;
      |          ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
bzlib.c:807:10: note: in expansion of macro 'BZ_GET_SMALL'
  807 |          BZ_GET_SMALL(s->k0); s->nblock_used++;
      |          ^~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  compress.c
compress.c: In function 'makeMaps_e':
compress.c:112:29: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  112 |          s->unseqToSeq[i] = s->nInUse;
      |                             ^
compress.c: In function 'generateMTFValues':
compress.c:166:11: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  166 |       j = ptr[i]-1; if (j < 0) j += s->nblock;
      |           ^~~
compress.c:206:24: warning: conversion from 'int' to 'UInt16' {aka 'short unsigned int'} may change value [-Wconversion]
  206 |             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
      |                        ^
compress.c:228:15: warning: conversion from 'Int32' {aka 'int'} to 'UInt16' {aka 'short unsigned int'} may change value [-Wconversion]
  228 |    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
      |               ^~~
compress.c: In function 'sendMTFValues':
compress.c:384:50: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UInt16' {aka 'short unsigned int'} may change value [-Wconversion]
  384 |             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
      |                                                  ^~~~~~
compress.c:385:50: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UInt16' {aka 'short unsigned int'} may change value [-Wconversion]
  385 |             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
      |                                                  ^~~~~~
compress.c:386:50: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UInt16' {aka 'short unsigned int'} may change value [-Wconversion]
  386 |             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
      |                                                  ^~~~~~
compress.c:405:36: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  405 |          s->selector[nSelectors] = bt;
      |                                    ^~
compress.c:465:46: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  465 |       for (i = 0; i < nGroups; i++) pos[i] = i;
      |                                              ^
compress.c:477:30: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  477 |          s->selectorMtf[i] = j;
      |                              ^
compress.c:520:16: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  520 |    bsW ( s, 3, nGroups );
      |                ^~~~~~~
compress.c:521:17: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  521 |    bsW ( s, 15, nSelectors );
      |                 ^~~~~~~~~~
compress.c:534:19: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  534 |       bsW ( s, 5, curr );
      |                   ^~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:569:13: note: in expansion of macro 'BZ_ITAH'
  569 |             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:569:26: note: in expansion of macro 'BZ_ITAH'
  569 |             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:569:39: note: in expansion of macro 'BZ_ITAH'
  569 |             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:569:52: note: in expansion of macro 'BZ_ITAH'
  569 |             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:569:65: note: in expansion of macro 'BZ_ITAH'
  569 |             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:570:13: note: in expansion of macro 'BZ_ITAH'
  570 |             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:570:26: note: in expansion of macro 'BZ_ITAH'
  570 |             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:570:39: note: in expansion of macro 'BZ_ITAH'
  570 |             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:570:52: note: in expansion of macro 'BZ_ITAH'
  570 |             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:570:65: note: in expansion of macro 'BZ_ITAH'
  570 |             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:571:13: note: in expansion of macro 'BZ_ITAH'
  571 |             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:571:26: note: in expansion of macro 'BZ_ITAH'
  571 |             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:571:39: note: in expansion of macro 'BZ_ITAH'
  571 |             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:571:52: note: in expansion of macro 'BZ_ITAH'
  571 |             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:571:65: note: in expansion of macro 'BZ_ITAH'
  571 |             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:572:13: note: in expansion of macro 'BZ_ITAH'
  572 |             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:572:26: note: in expansion of macro 'BZ_ITAH'
  572 |             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:572:39: note: in expansion of macro 'BZ_ITAH'
  572 |             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:572:52: note: in expansion of macro 'BZ_ITAH'
  572 |             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:572:65: note: in expansion of macro 'BZ_ITAH'
  572 |             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:573:13: note: in expansion of macro 'BZ_ITAH'
  573 |             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:573:26: note: in expansion of macro 'BZ_ITAH'
  573 |             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:573:39: note: in expansion of macro 'BZ_ITAH'
  573 |             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:573:52: note: in expansion of macro 'BZ_ITAH'
  573 |             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:573:65: note: in expansion of macro 'BZ_ITAH'
  573 |             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:574:13: note: in expansion of macro 'BZ_ITAH'
  574 |             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:574:26: note: in expansion of macro 'BZ_ITAH'
  574 |             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:574:39: note: in expansion of macro 'BZ_ITAH'
  574 |             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:574:52: note: in expansion of macro 'BZ_ITAH'
  574 |             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:574:65: note: in expansion of macro 'BZ_ITAH'
  574 |             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:575:13: note: in expansion of macro 'BZ_ITAH'
  575 |             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:575:26: note: in expansion of macro 'BZ_ITAH'
  575 |             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:575:39: note: in expansion of macro 'BZ_ITAH'
  575 |             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:575:52: note: in expansion of macro 'BZ_ITAH'
  575 |             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:575:65: note: in expansion of macro 'BZ_ITAH'
  575 |             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:576:13: note: in expansion of macro 'BZ_ITAH'
  576 |             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:576:26: note: in expansion of macro 'BZ_ITAH'
  576 |             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:576:39: note: in expansion of macro 'BZ_ITAH'
  576 |             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:576:52: note: in expansion of macro 'BZ_ITAH'
  576 |             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:576:65: note: in expansion of macro 'BZ_ITAH'
  576 |             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:577:13: note: in expansion of macro 'BZ_ITAH'
  577 |             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:577:26: note: in expansion of macro 'BZ_ITAH'
  577 |             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:577:39: note: in expansion of macro 'BZ_ITAH'
  577 |             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:577:52: note: in expansion of macro 'BZ_ITAH'
  577 |             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:577:65: note: in expansion of macro 'BZ_ITAH'
  577 |             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
      |                                                                 ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:578:13: note: in expansion of macro 'BZ_ITAH'
  578 |             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
      |             ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:578:26: note: in expansion of macro 'BZ_ITAH'
  578 |             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
      |                          ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:578:39: note: in expansion of macro 'BZ_ITAH'
  578 |             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
      |                                       ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:578:52: note: in expansion of macro 'BZ_ITAH'
  578 |             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
      |                                                    ^~~~~~~
compress.c:567:39: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  567 |                      s_code_sel_selCtr[mtfv_i] )
      |                      ~~~~~~~~~~~~~~~~~^~~~~~~~
compress.c:578:65: note: in expansion of macro 'BZ_ITAH'
  578 |             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
      |                                                                 ^~~~~~~
compress.c:587:49: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  587 |                   s->code [s->selector[selCtr]] [mtfv[i]] );
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
compress.c: In function 'BZ2_compressBlock':
compress.c:651:21: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  651 |       bsW ( s, 24, s->origPtr );
      |                    ~^~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  crctable.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  decompress.c
decompress.c: In function 'makeMaps_d':
decompress.c:33:37: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   33 |          s->seqToUnseq[s->nInUse] = i;
      |                                     ^
decompress.c: In function 'BZ2_decompress':
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:198:7: note: in expansion of macro 'GET_UCHAR'
  198 |       GET_UCHAR(BZ_X_MAGIC_1, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:201:7: note: in expansion of macro 'GET_UCHAR'
  201 |       GET_UCHAR(BZ_X_MAGIC_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:204:7: note: in expansion of macro 'GET_UCHAR'
  204 |       GET_UCHAR(BZ_X_MAGIC_3, uc)
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:207:7: note: in expansion of macro 'GET_BITS'
  207 |       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
      |       ^~~~~~~~
In file included from decompress.c:22:
decompress.c:213:65: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  213 |          s->ll16 = (UInt16*) BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
      |                                                                 ^
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:213:65: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  213 |          s->ll16 = (UInt16*) BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:215:62: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  215 |                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar)
      |                                                              ^
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:215:62: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  215 |                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar)
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:219:64: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  219 |          s->tt  = (UInt32*) BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
      |                                                                ^
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:219:64: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  219 |          s->tt  = (UInt32*) BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
bzlib_private.h:102:52: note: in definition of macro 'BZALLOC'
  102 | #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
      |                                                    ^~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:223:7: note: in expansion of macro 'GET_UCHAR'
  223 |       GET_UCHAR(BZ_X_BLKHDR_1, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:227:7: note: in expansion of macro 'GET_UCHAR'
  227 |       GET_UCHAR(BZ_X_BLKHDR_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:229:7: note: in expansion of macro 'GET_UCHAR'
  229 |       GET_UCHAR(BZ_X_BLKHDR_3, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:231:7: note: in expansion of macro 'GET_UCHAR'
  231 |       GET_UCHAR(BZ_X_BLKHDR_4, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:233:7: note: in expansion of macro 'GET_UCHAR'
  233 |       GET_UCHAR(BZ_X_BLKHDR_5, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:235:7: note: in expansion of macro 'GET_UCHAR'
  235 |       GET_UCHAR(BZ_X_BLKHDR_6, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:243:7: note: in expansion of macro 'GET_UCHAR'
  243 |       GET_UCHAR(BZ_X_BCRC_1, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:245:7: note: in expansion of macro 'GET_UCHAR'
  245 |       GET_UCHAR(BZ_X_BCRC_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:247:7: note: in expansion of macro 'GET_UCHAR'
  247 |       GET_UCHAR(BZ_X_BCRC_3, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:249:7: note: in expansion of macro 'GET_UCHAR'
  249 |       GET_UCHAR(BZ_X_BCRC_4, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'Bool' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:252:7: note: in expansion of macro 'GET_BITS'
  252 |       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
      |       ^~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:255:7: note: in expansion of macro 'GET_UCHAR'
  255 |       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:257:7: note: in expansion of macro 'GET_UCHAR'
  257 |       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:259:7: note: in expansion of macro 'GET_UCHAR'
  259 |       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:269:10: note: in expansion of macro 'GET_BIT'
  269 |          GET_BIT(BZ_X_MAPPING_1, uc);
      |          ^~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:280:16: note: in expansion of macro 'GET_BIT'
  280 |                GET_BIT(BZ_X_MAPPING_2, uc);
      |                ^~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:288:7: note: in expansion of macro 'GET_BITS'
  288 |       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
      |       ^~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:290:7: note: in expansion of macro 'GET_BITS'
  290 |       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
      |       ^~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:295:13: note: in expansion of macro 'GET_BIT'
  295 |             GET_BIT(BZ_X_SELECTOR_3, uc);
      |             ^~~~~~~
decompress.c:304:32: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  304 |            s->selectorMtf[i] = j;
      |                                ^
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:325:10: note: in expansion of macro 'GET_BITS'
  325 |          GET_BITS(BZ_X_CODING_1, curr, 5);
      |          ^~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:329:16: note: in expansion of macro 'GET_BIT'
  329 |                GET_BIT(BZ_X_CODING_2, uc);
      |                ^~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:331:16: note: in expansion of macro 'GET_BIT'
  331 |                GET_BIT(BZ_X_CODING_3, uc);
      |                ^~~~~~~
decompress.c:334:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  334 |             s->len[t][i] = curr;
      |                            ^~~~
decompress.c:50:31: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   50 |              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
      |                               ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:380:7: note: in expansion of macro 'GET_MTF_VAL'
  380 |       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
      |       ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:380:7: note: in expansion of macro 'GET_MTF_VAL'
  380 |       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
      |       ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:96:7: note: in expansion of macro 'GET_BIT'
   96 |       GET_BIT(label2, zj);                        \
      |       ^~~~~~~
decompress.c:380:7: note: in expansion of macro 'GET_MTF_VAL'
  380 |       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
      |       ^~~~~~~~~~~
decompress.c:50:31: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   50 |              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
      |                               ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:401:16: note: in expansion of macro 'GET_MTF_VAL'
  401 |                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
      |                ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:401:16: note: in expansion of macro 'GET_MTF_VAL'
  401 |                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
      |                ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:96:7: note: in expansion of macro 'GET_BIT'
   96 |       GET_BIT(label2, zj);                        \
      |       ^~~~~~~
decompress.c:401:16: note: in expansion of macro 'GET_MTF_VAL'
  401 |                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
      |                ^~~~~~~~~~~
decompress.c:439:34: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  439 |                   uc = s->mtfa[pp+nn];
      |                                  ^
decompress.c:441:34: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  441 |                      Int32 z = pp+nn;
      |                                  ^
decompress.c:441:32: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  441 |                      Int32 z = pp+nn;
      |                                ^~
decompress.c:449:33: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  449 |                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--;
      |                                 ^
decompress.c:449:52: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  449 |                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--;
      |                                                    ^
decompress.c:454:25: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  454 |                   lno = nn / MTFL_SIZE;
      |                         ^~
decompress.c:50:31: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   50 |              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
      |                               ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:490:13: note: in expansion of macro 'GET_MTF_VAL'
  490 |             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
      |             ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:90:4: note: in expansion of macro 'GET_BITS'
   90 |    GET_BITS(label1, zvec, zn);                    \
      |    ^~~~~~~~
decompress.c:490:13: note: in expansion of macro 'GET_MTF_VAL'
  490 |             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
      |             ^~~~~~~~~~~
decompress.c:52:16: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:72:4: note: in expansion of macro 'GET_BITS'
   72 |    GET_BITS(lll,uuu,1)
      |    ^~~~~~~~
decompress.c:96:7: note: in expansion of macro 'GET_BIT'
   96 |       GET_BIT(label2, zj);                        \
      |       ^~~~~~~
decompress.c:490:13: note: in expansion of macro 'GET_MTF_VAL'
  490 |             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
      |             ^~~~~~~~~~~
bzlib_private.h:460:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  460 |         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
      |                            ^
bzlib_private.h:469:6: note: in expansion of macro 'SET_LL4'
  469 |      SET_LL4(i, n >> 16);                    \
      |      ^~~~~~~
decompress.c:539:13: note: in expansion of macro 'SET_LL'
  539 |             SET_LL(i, s->cftabCopy[uc]);
      |             ^~~~~~
bzlib_private.h:461:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  461 |         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
      |                            ^
bzlib_private.h:469:6: note: in expansion of macro 'SET_LL4'
  469 |      SET_LL4(i, n >> 16);                    \
      |      ^~~~~~~
decompress.c:539:13: note: in expansion of macro 'SET_LL'
  539 |             SET_LL(i, s->cftabCopy[uc]);
      |             ^~~~~~
bzlib_private.h:460:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  460 |         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
      |                            ^
bzlib_private.h:469:6: note: in expansion of macro 'SET_LL4'
  469 |      SET_LL4(i, n >> 16);                    \
      |      ^~~~~~~
decompress.c:548:13: note: in expansion of macro 'SET_LL'
  548 |             SET_LL(j, i);
      |             ^~~~~~
bzlib_private.h:461:28: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  461 |         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
      |                            ^
bzlib_private.h:469:6: note: in expansion of macro 'SET_LL4'
  469 |      SET_LL4(i, n >> 16);                    \
      |      ^~~~~~~
decompress.c:548:13: note: in expansion of macro 'SET_LL'
  548 |             SET_LL(j, i);
      |             ^~~~~~
decompress.c:554:20: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  554 |          s->tPos = s->origPtr;
      |                    ^
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
decompress.c:558:13: note: in expansion of macro 'BZ_GET_SMALL'
  558 |             BZ_GET_SMALL(s->k0); s->nblock_used++;
      |             ^~~~~~~~~~~~
bzlib_private.h:478:30: warning: conversion to 'Int32' {aka 'int'} from 'UInt32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  478 |     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
      |                             ~^~~~~~
decompress.c:561:13: note: in expansion of macro 'BZ_GET_SMALL'
  561 |             BZ_GET_SMALL(s->k0); s->nblock_used++;
      |             ^~~~~~~~~~~~
decompress.c:569:33: warning: conversion to 'UInt32' {aka 'unsigned int'} from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  569 |             s->tt[s->cftab[uc]] |= (i << 8);
      |                                 ^~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:591:7: note: in expansion of macro 'GET_UCHAR'
  591 |       GET_UCHAR(BZ_X_ENDHDR_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:593:7: note: in expansion of macro 'GET_UCHAR'
  593 |       GET_UCHAR(BZ_X_ENDHDR_3, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:595:7: note: in expansion of macro 'GET_UCHAR'
  595 |       GET_UCHAR(BZ_X_ENDHDR_4, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:597:7: note: in expansion of macro 'GET_UCHAR'
  597 |       GET_UCHAR(BZ_X_ENDHDR_5, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:599:7: note: in expansion of macro 'GET_UCHAR'
  599 |       GET_UCHAR(BZ_X_ENDHDR_6, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:603:7: note: in expansion of macro 'GET_UCHAR'
  603 |       GET_UCHAR(BZ_X_CCRC_1, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:605:7: note: in expansion of macro 'GET_UCHAR'
  605 |       GET_UCHAR(BZ_X_CCRC_2, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:607:7: note: in expansion of macro 'GET_UCHAR'
  607 |       GET_UCHAR(BZ_X_CCRC_3, uc);
      |       ^~~~~~~~~
decompress.c:52:16: warning: conversion from 'UInt32' {aka 'unsigned int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
   52 |          vvv = v;                                 \
      |                ^
decompress.c:69:4: note: in expansion of macro 'GET_BITS'
   69 |    GET_BITS(lll,uuu,8)
      |    ^~~~~~~~
decompress.c:609:7: note: in expansion of macro 'GET_UCHAR'
  609 |       GET_UCHAR(BZ_X_CCRC_4, uc);
      |       ^~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  huffman.c
huffman.c: In function 'BZ2_hbMakeCodeLengths':
huffman.c:25:31: warning: conversion to 'unsigned int' from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   25 | #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
      |                               ^
huffman.c:30:5: note: in expansion of macro 'WEIGHTOF'
   30 |    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
      |     ^~~~~~~~
huffman.c:105:27: note: in expansion of macro 'ADDWEIGHTS'
  105 |          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
      |                           ^~~~~~~~~~
huffman.c:25:31: warning: conversion to 'unsigned int' from 'Int32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   25 | #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
      |                               ^
huffman.c:30:19: note: in expansion of macro 'WEIGHTOF'
   30 |    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
      |                   ^~~~~~~~
huffman.c:105:27: note: in expansion of macro 'ADDWEIGHTS'
  105 |          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
      |                           ^~~~~~~~~~
huffman.c:30:34: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
   30 |    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
      |                                  ^
huffman.c:105:27: note: in expansion of macro 'ADDWEIGHTS'
  105 |          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
      |                           ^~~~~~~~~~
huffman.c:30:4: warning: conversion to 'Int32' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
   30 |    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
      |    ^
huffman.c:105:27: note: in expansion of macro 'ADDWEIGHTS'
  105 |          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
      |                           ^~~~~~~~~~
huffman.c:119:21: warning: conversion from 'Int32' {aka 'int'} to 'UChar' {aka 'unsigned char'} may change value [-Wconversion]
  119 |          len[i-1] = j;
      |                     ^
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.103\" -DXS_VERSION=\"2.103\" -fPIC -Wno-unused-function "-I../.."  -Wall -Wno-comment  -DBZ_NO_STDIO  randtable.c
rm -f ../../lib/auto/Compress/Raw/Bzip2/Bzip2.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Bzip2.o blocksort.o bzlib.o compress.o crctable.o decompress.o huffman.o randtable.o   -o ../../lib/auto/Compress/Raw/Bzip2/Bzip2.so  \
      \
  
chmod 755 ../../lib/auto/Compress/Raw/Bzip2/Bzip2.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Bzip2'
cd cpan/Compress-Raw-Zlib/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Parsing config.in...
Building Zlib enabled
Auto Detect Gzip OS Code..
Setting Gzip OS Code to 3 [Unix/Default]
Looks Good.
Generating a Unix-style Makefile
Writing Makefile for Compress::Raw::Zlib
make -C cpan/Compress-Raw-Zlib/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Zlib'
cp lib/Compress/Raw/Zlib.pm ../../lib/Compress/Raw/Zlib.pm
Running Mkbootstrap for Zlib ()
chmod 644 "Zlib.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Zlib/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Zlib.bs ../../lib/auto/Compress/Raw/Zlib/Zlib.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Zlib/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Zlib/typemap'  Zlib.xs > Zlib.xsc
mv Zlib.xsc Zlib.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 Zlib.c
In file included from ../../perl.h:7246,
                 from Zlib.xs:31:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Zlib.xs: In function 'PostInitStream':
Zlib.xs:553:18: warning: conversion to 'Perl_crz_uLong' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  553 |     s->bufsize = bufsize ;
      |                  ^~~~~~~
Zlib.xs:556:5: warning: conversion to 'Perl_crz_uLong' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  556 |     s->last_error = 0 ;
      |     ^
In file included from ../../perl.h:5782:
Zlib.c: In function 'XS_Compress__Raw__Zlib_ZLIB_VERNUM':
Zlib.c:1052:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1052 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1052:9: note: in expansion of macro 'PUSHu'
 1052 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1052:9: note: in expansion of macro 'PUSHu'
 1052 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib_zlibCompileFlags':
Zlib.c:1073:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1073 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1073:9: note: in expansion of macro 'PUSHu'
 1073 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1073:9: note: in expansion of macro 'PUSHu'
 1073 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib_adler32':
Zlib.c:1112:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1112 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1112:9: note: in expansion of macro 'PUSHu'
 1112 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1112:9: note: in expansion of macro 'PUSHu'
 1112 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib_crc32':
Zlib.c:1162:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1162 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1162:9: note: in expansion of macro 'PUSHu'
 1162 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1162:9: note: in expansion of macro 'PUSHu'
 1162 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib_crc32_combine':
Zlib.c:1179:24: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1179 |         z_off_t len2 = (unsigned long)SvUV(ST(2))
      |                        ^
Zlib.c:1192:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1192 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1192:9: note: in expansion of macro 'PUSHu'
 1192 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1192:9: note: in expansion of macro 'PUSHu'
 1192 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib_adler32_combine':
Zlib.c:1209:24: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1209 |         z_off_t len2 = (unsigned long)SvUV(ST(2))
      |                        ^
Zlib.c:1222:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 1222 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:1222:9: note: in expansion of macro 'PUSHu'
 1222 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:1222:9: note: in expansion of macro 'PUSHu'
 1222 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__deflateInit':
Zlib.xs:938:38: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  938 |             PostInitStream(s, flags, bufsize, windowBits) ;
      |                                      ^~~~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateInit':
Zlib.xs:1002:38: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1002 |             PostInitStream(s, flags, bufsize, windowBits) ;
      |                                      ^~~~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__deflateStream_deflateReset':
Zlib.xs:1043:40: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1043 |           PostInitStream(s, s->flags, s->bufsize, s->WindowBits) ;
      |                                       ~^~~~~~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_get_Bufsize':
Zlib.c:2007:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2007 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2007:9: note: in expansion of macro 'PUSHu'
 2007 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2007:9: note: in expansion of macro 'PUSHu'
 2007 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_crc32':
Zlib.c:2075:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2075 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2075:9: note: in expansion of macro 'PUSHu'
 2075 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2075:9: note: in expansion of macro 'PUSHu'
 2075 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_dict_adler':
Zlib.c:2109:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2109 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2109:9: note: in expansion of macro 'PUSHu'
 2109 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2109:9: note: in expansion of macro 'PUSHu'
 2109 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_adler32':
Zlib.c:2143:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2143 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2143:9: note: in expansion of macro 'PUSHu'
 2143 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2143:9: note: in expansion of macro 'PUSHu'
 2143 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_compressedBytes':
Zlib.c:2177:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2177 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2177:9: note: in expansion of macro 'PUSHu'
 2177 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2177:9: note: in expansion of macro 'PUSHu'
 2177 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_uncompressedBytes':
Zlib.c:2211:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2211 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2211:9: note: in expansion of macro 'PUSHu'
 2211 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2211:9: note: in expansion of macro 'PUSHu'
 2211 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_total_in':
Zlib.c:2245:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2245 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2245:9: note: in expansion of macro 'PUSHu'
 2245 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2245:9: note: in expansion of macro 'PUSHu'
 2245 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__deflateStream_total_out':
Zlib.c:2279:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2279 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2279:9: note: in expansion of macro 'PUSHu'
 2279 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2279:9: note: in expansion of macro 'PUSHu'
 2279 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateStream_inflateReset':
Zlib.xs:1488:40: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1488 |           PostInitStream(s, s->flags, s->bufsize, s->WindowBits) ;
      |                                       ~^~~~~~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateStream_inflate':
../../sv.h:1240:21: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1240 | #  define SvLEN(sv) ((XPV*) SvANY(sv))->xpv_len
      |                     ^
Zlib.xs:1560:25: note: in expansion of macro 'SvLEN'
 1560 |             increment = SvLEN(output) -  cur_length - 1;
      |                         ^~~~~
Zlib.xs:1561:35: warning: conversion to 'Perl_crz_uInt' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1561 |             s->stream.avail_out = increment;
      |                                   ^~~~~~~~~
Zlib.xs:1574:24: warning: conversion to 'Perl_crz_uInt' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1574 |             cur_length += increment ;
      |                        ^~
Zlib.xs:1576:25: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1576 |             increment = bufinc ;
      |                         ^~~~~~
Zlib.xs:1577:35: warning: conversion to 'Perl_crz_uInt' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1577 |             s->stream.avail_out = increment;
      |                                   ^~~~~~~~~
Zlib.xs:1650:39: warning: conversion to 'Perl_crz_uInt' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1650 |         s->bytesInflated = cur_length + increment - s->stream.avail_out - prefix_length;
      |                                       ^
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_inflateCount':
Zlib.c:2709:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2709 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2709:9: note: in expansion of macro 'PUSHu'
 2709 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2709:9: note: in expansion of macro 'PUSHu'
 2709 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_compressedBytes':
Zlib.c:2743:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2743 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2743:9: note: in expansion of macro 'PUSHu'
 2743 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2743:9: note: in expansion of macro 'PUSHu'
 2743 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_uncompressedBytes':
Zlib.c:2777:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2777 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2777:9: note: in expansion of macro 'PUSHu'
 2777 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2777:9: note: in expansion of macro 'PUSHu'
 2777 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateStream_status':
Zlib.xs:1770:18: warning: conversion to 'Perl_crz_uLong' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1770 |         RETVAL = s->last_error ;
      |                  ^
Zlib.c:2913:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2913 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2913:9: note: in expansion of macro 'PUSHu'
 2913 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2913:9: note: in expansion of macro 'PUSHu'
 2913 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_crc32':
Zlib.c:2947:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2947 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2947:9: note: in expansion of macro 'PUSHu'
 2947 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2947:9: note: in expansion of macro 'PUSHu'
 2947 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_dict_adler':
Zlib.c:2981:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2981 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:2981:9: note: in expansion of macro 'PUSHu'
 2981 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:2981:9: note: in expansion of macro 'PUSHu'
 2981 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_total_in':
Zlib.c:3015:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3015 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3015:9: note: in expansion of macro 'PUSHu'
 3015 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3015:9: note: in expansion of macro 'PUSHu'
 3015 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_adler32':
Zlib.c:3049:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3049 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3049:9: note: in expansion of macro 'PUSHu'
 3049 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3049:9: note: in expansion of macro 'PUSHu'
 3049 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_total_out':
Zlib.c:3083:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3083 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3083:9: note: in expansion of macro 'PUSHu'
 3083 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3083:9: note: in expansion of macro 'PUSHu'
 3083 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateStream_get_Bufsize':
Zlib.c:3152:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3152 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3152:9: note: in expansion of macro 'PUSHu'
 3152 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3152:9: note: in expansion of macro 'PUSHu'
 3152 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateScanStream_inflateReset':
Zlib.xs:1874:40: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1874 |           PostInitStream(s, s->flags, s->bufsize, s->WindowBits) ;
      |                                       ~^~~~~~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateScanStream_scan':
Zlib.xs:1903:17: warning: conversion to 'int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1903 |     start_len = s->stream.avail_in ;
      |                 ^
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateScanStream_getEndOffset':
Zlib.xs:2003:18: warning: conversion from 'off_t' {aka 'long long int'} to 'Perl_crz_uLong' {aka 'long unsigned int'} may change value [-Wconversion]
 2003 |         RETVAL = s->window_endOffset;
      |                  ^
Zlib.c:3505:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3505 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3505:9: note: in expansion of macro 'PUSHu'
 3505 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3505:9: note: in expansion of macro 'PUSHu'
 3505 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_inflateCount':
Zlib.c:3543:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3543 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3543:9: note: in expansion of macro 'PUSHu'
 3543 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3543:9: note: in expansion of macro 'PUSHu'
 3543 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_compressedBytes':
Zlib.c:3577:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3577 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3577:9: note: in expansion of macro 'PUSHu'
 3577 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3577:9: note: in expansion of macro 'PUSHu'
 3577 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_uncompressedBytes':
Zlib.c:3611:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3611 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3611:9: note: in expansion of macro 'PUSHu'
 3611 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3611:9: note: in expansion of macro 'PUSHu'
 3611 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_getLastBlockOffset':
Zlib.c:3649:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3649 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3649:9: note: in expansion of macro 'PUSHu'
 3649 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3649:9: note: in expansion of macro 'PUSHu'
 3649 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateScanStream_getLastBufferOffset':
Zlib.xs:2056:18: warning: conversion from 'off_t' {aka 'long long int'} to 'Perl_crz_uLong' {aka 'long unsigned int'} may change value [-Wconversion]
 2056 |         RETVAL = s->window_lastoff;
      |                  ^
Zlib.c:3687:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3687 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3687:9: note: in expansion of macro 'PUSHu'
 3687 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3687:9: note: in expansion of macro 'PUSHu'
 3687 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.xs: In function 'XS_Compress__Raw__Zlib__inflateScanStream__createDeflateStream':
Zlib.xs:2123:38: warning: conversion to 'int' from 'Perl_crz_uLong' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 2123 |             PostInitStream(s, flags, bufsize, windowBits) ;
      |                                      ^~~~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_crc32':
Zlib.c:3908:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3908 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3908:9: note: in expansion of macro 'PUSHu'
 3908 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3908:9: note: in expansion of macro 'PUSHu'
 3908 |         PUSHu((IV)RETVAL);
      |         ^~~~~
Zlib.c: In function 'XS_Compress__Raw__Zlib__inflateScanStream_adler32':
Zlib.c:3942:15: warning: conversion to 'UV' {aka 'long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3942 |         PUSHu((IV)RETVAL);
      |               ^
../../pp.h:432:23: note: in definition of macro 'TARGu'
  432 |         UV TARGu_uv = u;                                                \
      |                       ^
Zlib.c:3942:9: note: in expansion of macro 'PUSHu'
 3942 |         PUSHu((IV)RETVAL);
      |         ^~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Zlib.c:3942:9: note: in expansion of macro 'PUSHu'
 3942 |         PUSHu((IV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
Zlib.c: In function 'boot_Compress__Raw__Zlib':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Zlib.c:3956:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 3956 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Zlib.c:3956:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 3956 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 adler32.c
adler32.c: In function 'adler32_combine_':
adler32.c:59:22: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
   59 | #  define MOD63(a) a %= BASE
      |                      ^~
adler32.c:157:5: note: in expansion of macro 'MOD63'
  157 |     MOD63(len2);                /* assumes len2 >= 0 */
      |     ^~~~~
adler32.c:12:14: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
   12 | #define BASE 65521U     /* largest prime smaller than 65536 */
      |              ^~~~~~
adler32.c:59:25: note: in expansion of macro 'BASE'
   59 | #  define MOD63(a) a %= BASE
      |                         ^~~~
adler32.c:157:5: note: in expansion of macro 'MOD63'
  157 |     MOD63(len2);                /* assumes len2 >= 0 */
      |     ^~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 compress.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 crc32.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 deflate.c
deflate.c: In function 'Perl_crz_deflateParams':
deflate.c:635:44: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
  635 |         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)
      |                                            ^
deflate.c: In function 'deflate_stored':
deflate.c:1707:16: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1707 |         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */
      |                ^
deflate.c:1712:28: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1712 |         left = s->strstart - s->block_start;    /* bytes left in window */
      |                            ^
deflate.c:1732:44: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1732 |         _tr_stored_block(s, (char *)0, 0L, last);
      |                                            ^~~~
deflate.c:1735:42: warning: conversion from 'unsigned int' to 'Perl_crz_Bytef' {aka 'unsigned char'} may change value [-Wconversion]
 1735 |         s->pending_buf[s->pending - 4] = len;
      |                                          ^~~
deflate.c:1736:42: warning: conversion from 'unsigned int' to 'Perl_crz_Bytef' {aka 'unsigned char'} may change value [-Wconversion]
 1736 |         s->pending_buf[s->pending - 3] = len >> 8;
      |                                          ^~~
deflate.c:1737:42: warning: conversion from 'unsigned int' to 'Perl_crz_Bytef' {aka 'unsigned char'} may change value [-Wconversion]
 1737 |         s->pending_buf[s->pending - 2] = ~len;
      |                                          ^
deflate.c:1738:42: warning: conversion from 'unsigned int' to 'Perl_crz_Bytef' {aka 'unsigned char'} may change value [-Wconversion]
 1738 |         s->pending_buf[s->pending - 1] = ~len >> 8;
      |                                          ^
deflate.c:1757:28: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1757 |             s->block_start += left;
      |                            ^~
deflate.c:1757:31: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1757 |             s->block_start += left;
      |                               ^~~~
deflate.c:1803:26: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1803 |         s->block_start = s->strstart;
      |                          ^
deflate.c:1821:24: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1821 |         s->block_start -= s->w_size;
      |                        ^~
deflate.c:1821:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1821 |         s->block_start -= s->w_size;
      |                           ^
deflate.c:1845:12: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1845 |     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */
      |            ^
deflate.c:1849:24: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1849 |     left = s->strstart - s->block_start;
      |                        ^
deflate.c:1856:71: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1856 |         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);
      |                                                                       ^~~~
deflate.c:1857:24: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1857 |         s->block_start += len;
      |                        ^~
deflate.c:1857:27: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1857 |         s->block_start += len;
      |                           ^~~
In file included from deflate.c:52:
deflate.c: In function 'deflate_fast':
./zlib-src/deflate.h:332:33: warning: conversion from 'ush' {aka 'short unsigned int'} to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  332 |     s->sym_buf[s->sym_next++] = dist; \
      |                                 ^~~~
deflate.c:1915:13: note: in expansion of macro '_tr_tally_dist'
 1915 |             _tr_tally_dist(s, s->strstart - s->match_start,
      |             ^~~~~~~~~~~~~~
./zlib-src/deflate.h:333:33: warning: conversion from 'int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  333 |     s->sym_buf[s->sym_next++] = dist >> 8; \
      |                                 ^~~~
deflate.c:1915:13: note: in expansion of macro '_tr_tally_dist'
 1915 |             _tr_tally_dist(s, s->strstart - s->match_start,
      |             ^~~~~~~~~~~~~~
deflate.c:1956:33: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1956 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                                 ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:1956:21: note: in expansion of macro 'FLUSH_BLOCK'
 1956 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                     ^~~~~~~~~~~
deflate.c:1960:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1960 |         FLUSH_BLOCK(s, 1);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:1960:9: note: in expansion of macro 'FLUSH_BLOCK'
 1960 |         FLUSH_BLOCK(s, 1);
      |         ^~~~~~~~~~~
deflate.c:1964:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1964 |         FLUSH_BLOCK(s, 0);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:1964:9: note: in expansion of macro 'FLUSH_BLOCK'
 1964 |         FLUSH_BLOCK(s, 0);
      |         ^~~~~~~~~~~
deflate.c: In function 'deflate_slow':
./zlib-src/deflate.h:332:33: warning: conversion from 'ush' {aka 'short unsigned int'} to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  332 |     s->sym_buf[s->sym_next++] = dist; \
      |                                 ^~~~
deflate.c:2040:13: note: in expansion of macro '_tr_tally_dist'
 2040 |             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
      |             ^~~~~~~~~~~~~~
./zlib-src/deflate.h:333:33: warning: conversion from 'int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  333 |     s->sym_buf[s->sym_next++] = dist >> 8; \
      |                                 ^~~~
deflate.c:2040:13: note: in expansion of macro '_tr_tally_dist'
 2040 |             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
      |             ^~~~~~~~~~~~~~
deflate.c:2059:37: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2059 |             if (bflush) FLUSH_BLOCK(s, 0);
      |                                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2059:25: note: in expansion of macro 'FLUSH_BLOCK'
 2059 |             if (bflush) FLUSH_BLOCK(s, 0);
      |                         ^~~~~~~~~~~
deflate.c:2069:34: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2069 |                 FLUSH_BLOCK_ONLY(s, 0);
      |                                  ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2091:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2091 |         FLUSH_BLOCK(s, 1);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2091:9: note: in expansion of macro 'FLUSH_BLOCK'
 2091 |         FLUSH_BLOCK(s, 1);
      |         ^~~~~~~~~~~
deflate.c:2095:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2095 |         FLUSH_BLOCK(s, 0);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2095:9: note: in expansion of macro 'FLUSH_BLOCK'
 2095 |         FLUSH_BLOCK(s, 0);
      |         ^~~~~~~~~~~
deflate.c: In function 'deflate_rle':
./zlib-src/deflate.h:332:33: warning: conversion from 'ush' {aka 'short unsigned int'} to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  332 |     s->sym_buf[s->sym_next++] = dist; \
      |                                 ^~~~
deflate.c:2150:13: note: in expansion of macro '_tr_tally_dist'
 2150 |             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
      |             ^~~~~~~~~~~~~~
./zlib-src/deflate.h:333:33: warning: conversion from 'int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
  333 |     s->sym_buf[s->sym_next++] = dist >> 8; \
      |                                 ^~~~
deflate.c:2150:13: note: in expansion of macro '_tr_tally_dist'
 2150 |             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
      |             ^~~~~~~~~~~~~~
deflate.c:2162:33: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2162 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                                 ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2162:21: note: in expansion of macro 'FLUSH_BLOCK'
 2162 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                     ^~~~~~~~~~~
deflate.c:2166:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2166 |         FLUSH_BLOCK(s, 1);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2166:9: note: in expansion of macro 'FLUSH_BLOCK'
 2166 |         FLUSH_BLOCK(s, 1);
      |         ^~~~~~~~~~~
deflate.c:2170:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2170 |         FLUSH_BLOCK(s, 0);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2170:9: note: in expansion of macro 'FLUSH_BLOCK'
 2170 |         FLUSH_BLOCK(s, 0);
      |         ^~~~~~~~~~~
deflate.c: In function 'deflate_huff':
deflate.c:2201:33: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2201 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                                 ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2201:21: note: in expansion of macro 'FLUSH_BLOCK'
 2201 |         if (bflush) FLUSH_BLOCK(s, 0);
      |                     ^~~~~~~~~~~
deflate.c:2205:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2205 |         FLUSH_BLOCK(s, 1);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2205:9: note: in expansion of macro 'FLUSH_BLOCK'
 2205 |         FLUSH_BLOCK(s, 1);
      |         ^~~~~~~~~~~
deflate.c:2209:21: warning: conversion to 'long int' from 'Perl_crz_uInt' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2209 |         FLUSH_BLOCK(s, 0);
      |                     ^
deflate.c:1653:21: note: in definition of macro 'FLUSH_BLOCK_ONLY'
 1653 |    s->block_start = s->strstart; \
      |                     ^
deflate.c:2209:9: note: in expansion of macro 'FLUSH_BLOCK'
 2209 |         FLUSH_BLOCK(s, 0);
      |         ^~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 infback.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 inffast.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 inflate.c
inflate.c: In function 'Perl_crz_inflate':
inflate.c:1116:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1116 |                 state->back += state->extra;
      |                             ^~
inflate.c:1116:32: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1116 |                 state->back += state->extra;
      |                                ^~~~~
inflate.c:1155:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1155 |                 state->back += state->extra;
      |                             ^~
inflate.c:1155:32: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 1155 |                 state->back += state->extra;
      |                                ^~~~~
inflate.c: In function 'Perl_crz_inflateMark':
inflate.c:1580:63: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 1580 |     return (long)(((unsigned long)((long)state->back)) << 16) +
      |                                                               ^
inflate.c:1580:63: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1580 |     return (long)(((unsigned long)((long)state->back)) << 16) +
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
 1581 |         (state->mode == COPY ? state->length :
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                 
 1582 |             (state->mode == MATCH ? state->was - state->length : 0));
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 inftrees.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 trees.c
trees.c: In function 'scan_tree':
trees.c:724:40: warning: conversion from 'int' to 'ush' {aka 'short unsigned int'} may change value [-Wconversion]
  724 |             s->bl_tree[curlen].Freq += count;
      |                                        ^~~~~
trees.c: In function 'Perl_crz__tr_tally':
trees.c:1022:33: warning: conversion from 'unsigned int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
 1022 |     s->sym_buf[s->sym_next++] = dist;
      |                                 ^~~~
trees.c:1023:33: warning: conversion from 'unsigned int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
 1023 |     s->sym_buf[s->sym_next++] = dist >> 8;
      |                                 ^~~~
trees.c:1024:33: warning: conversion from 'unsigned int' to 'uchf' {aka 'unsigned char'} may change value [-Wconversion]
 1024 |     s->sym_buf[s->sym_next++] = lc;
      |                                 ^~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 uncompr.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./zlib-src -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.105\" -DXS_VERSION=\"2.105\" -fPIC -Wno-unused-function "-I../.."  -DNO_VIZ -DZ_SOLO   -DZ_PREFIX -DGZIP_OS_CODE=3  -DPerl_crz_BUILD_ZLIB=1 zutil.c
rm -f ../../lib/auto/Compress/Raw/Zlib/Zlib.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Zlib.o adler32.o compress.o crc32.o deflate.o infback.o inffast.o inflate.o inftrees.o trees.o uncompr.o zutil.o   -o ../../lib/auto/Compress/Raw/Zlib/Zlib.so  \
      \
  
chmod 755 ../../lib/auto/Compress/Raw/Zlib/Zlib.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Compress-Raw-Zlib'
cd cpan/Digest-MD5/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Digest::MD5
make -C cpan/Digest-MD5/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-MD5'
cp MD5.pm ../../lib/Digest/MD5.pm
Running Mkbootstrap for MD5 ()
chmod 644 "MD5.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-MD5/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- MD5.bs ../../lib/auto/Digest/MD5/MD5.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-MD5/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-MD5/typemap'  MD5.xs > MD5.xsc
mv MD5.xsc MD5.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.58\" -DXS_VERSION=\"2.58\" -fPIC -Wno-unused-function "-I../.."   MD5.c
In file included from ../../perl.h:7246,
                 from MD5.xs:40:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
MD5.xs: In function 'XS_Digest__MD5_addfile':
MD5.xs:661:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  661 |                     MD5Update(context, buffer, n);
      |                                                ^
MD5.xs:668:44: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  668 |                 MD5Update(context, buffer, n);
      |                                            ^
In file included from ../../perl.h:4161:
MD5.c: In function 'boot_Digest__MD5':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MD5.c:1064:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1064 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MD5.c:1064:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1064 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Digest/MD5/MD5.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  MD5.o  -o ../../lib/auto/Digest/MD5/MD5.so  \
      \
  
chmod 755 ../../lib/auto/Digest/MD5/MD5.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-MD5'
cd cpan/Digest-SHA/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Digest::SHA
make -C cpan/Digest-SHA/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA'
cp lib/Digest/SHA.pm ../../lib/Digest/SHA.pm
Running Mkbootstrap for SHA ()
chmod 644 "SHA.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- SHA.bs ../../lib/auto/Digest/SHA/SHA.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA/typemap'  SHA.xs > SHA.xsc
mv SHA.xsc SHA.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"6.02\" -DXS_VERSION=\"6.02\" -fPIC -Wno-unused-function "-I../.."   SHA.c
In file included from ../../perl.h:7246,
                 from SHA.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5782:
SHA.c: In function 'XS_Digest__SHA_shawrite':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
SHA.c:266:9: note: in expansion of macro 'PUSHu'
  266 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
SHA.c: In function 'boot_Digest__SHA':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SHA.c:732:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  732 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SHA.c:732:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  732 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Digest/SHA/SHA.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  SHA.o  -o ../../lib/auto/Digest/SHA/SHA.so  \
      \
  
chmod 755 ../../lib/auto/Digest/SHA/SHA.so
cp shasum blib/script/shasum
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/shasum
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Digest-SHA'
cd cpan/Encode/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Encode
make -C cpan/Encode/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode'
cp Encode/ConfigLocal_PM.e2x ../../lib/Encode/ConfigLocal_PM.e2x
cp lib/Encode/Encoding.pm ../../lib/Encode/Encoding.pm
cp lib/Encode/CN/HZ.pm ../../lib/Encode/CN/HZ.pm
cp lib/Encode/Unicode/UTF7.pm ../../lib/Encode/Unicode/UTF7.pm
cp lib/Encode/MIME/Header.pm ../../lib/Encode/MIME/Header.pm
cp lib/Encode/KR/2022_KR.pm ../../lib/Encode/KR/2022_KR.pm
cp lib/Encode/Guess.pm ../../lib/Encode/Guess.pm
cp Encode/README.e2x ../../lib/Encode/README.e2x
cp lib/Encode/CJKConstants.pm ../../lib/Encode/CJKConstants.pm
cp lib/Encode/Supported.pod ../../lib/Encode/Supported.pod
cp lib/Encode/Encoder.pm ../../lib/Encode/Encoder.pm
cp Encode.pm ../../lib/Encode.pm
cp lib/Encode/GSM0338.pm ../../lib/Encode/GSM0338.pm
cp lib/Encode/JP/H2Z.pm ../../lib/Encode/JP/H2Z.pm
cp lib/Encode/PerlIO.pod ../../lib/Encode/PerlIO.pod
cp Encode/_PM.e2x ../../lib/Encode/_PM.e2x
cp Encode/encode.h ../../lib/Encode/encode.h
cp lib/Encode/MIME/Name.pm ../../lib/Encode/MIME/Name.pm
cp Encode/Changes.e2x ../../lib/Encode/Changes.e2x
cp Encode/Makefile_PL.e2x ../../lib/Encode/Makefile_PL.e2x
cp Encode/_T.e2x ../../lib/Encode/_T.e2x
cp lib/Encode/MIME/Header/ISO_2022_JP.pm ../../lib/Encode/MIME/Header/ISO_2022_JP.pm
cp lib/Encode/JP/JIS7.pm ../../lib/Encode/JP/JIS7.pm
cp lib/Encode/Alias.pm ../../lib/Encode/Alias.pm
cp encoding.pm ../../lib/encoding.pm
cp lib/Encode/Config.pm ../../lib/Encode/Config.pm
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Byte'
cp Byte.pm ../../../lib/Encode/Byte.pm
Running Mkbootstrap for Byte ()
chmod 644 "Byte.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Byte/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Byte.bs ../../../lib/auto/Encode/Byte/Byte.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -"O" -o byte_t.c -f byte_t.fnm
Reading iso-8859-2 (iso-8859-2)
Reading iso-8859-3 (iso-8859-3)
Reading iso-8859-4 (iso-8859-4)
Reading iso-8859-5 (iso-8859-5)
Reading iso-8859-6 (iso-8859-6)
Reading iso-8859-7 (iso-8859-7)
Reading iso-8859-8 (iso-8859-8)
Reading iso-8859-9 (iso-8859-9)
Reading iso-8859-10 (iso-8859-10)
Reading iso-8859-11 (iso-8859-11)
Reading iso-8859-13 (iso-8859-13)
Reading iso-8859-14 (iso-8859-14)
Reading iso-8859-15 (iso-8859-15)
Reading iso-8859-16 (iso-8859-16)
Reading AdobeStandardEncoding (AdobeStandardEncoding)
Reading cp1006 (cp1006)
Reading cp1250 (cp1250)
Reading cp1251 (cp1251)
Reading cp1253 (cp1253)
Reading cp1254 (cp1254)
Reading cp1255 (cp1255)
Reading cp1256 (cp1256)
Reading cp1257 (cp1257)
Reading cp1258 (cp1258)
Reading cp424 (cp424)
Reading cp437 (cp437)
Reading cp737 (cp737)
Reading cp775 (cp775)
Reading cp850 (cp850)
Reading cp852 (cp852)
Reading cp855 (cp855)
Reading cp856 (cp856)
Reading cp857 (cp857)
Reading cp858 (cp858)
Reading cp860 (cp860)
Reading cp861 (cp861)
Reading cp862 (cp862)
Reading cp863 (cp863)
Reading cp864 (cp864)
Reading cp865 (cp865)
Reading cp866 (cp866)
Reading cp869 (cp869)
Reading cp874 (cp874)
Reading hp-roman8 (hp-roman8)
Reading koi8-f (koi8-f)
Reading koi8-r (koi8-r)
Reading koi8-u (koi8-u)
Reading MacArabic (MacArabic)
Reading MacCentralEurRoman (MacCentralEurRoman)
Reading MacCroatian (MacCroatian)
Reading MacCyrillic (MacCyrillic)
Reading MacFarsi (MacFarsi)
Reading MacGreek (MacGreek)
Reading MacHebrew (MacHebrew)
Reading MacIcelandic (MacIcelandic)
Reading MacRomanian (MacRomanian)
Reading MacRumanian (MacRumanian)
Reading MacRoman (MacRoman)
Reading MacSami (MacSami)
Reading MacThai (MacThai)
Reading MacTurkish (MacTurkish)
Reading MacUkrainian (MacUkrainian)
Reading nextstep (nextstep)
Reading viscii (viscii)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Byte/../../../lib/ExtUtils/typemap'  Byte.xs > Byte.xsc
mv Byte.xsc Byte.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.04\" -DXS_VERSION=\"2.04\" -fPIC -Wno-unused-function "-I../../.."   Byte.c
In file included from ../../../perl.h:7246,
                 from Byte.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
Byte.c: In function 'boot_Encode__Byte':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Byte.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Byte.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.04\" -DXS_VERSION=\"2.04\" -fPIC -Wno-unused-function "-I../../.."   byte_t.c
byte_t.c:6:24: warning: uninitialized 'const utf8_AdobeStandardEncoding' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t utf8_AdobeStandardEncoding[10];
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:11:24: warning: uninitialized 'const utf8_MacArabic' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_MacArabic[9];
      |                        ^~~~~~~~~~~~~~
byte_t.c:16:24: warning: uninitialized 'const utf8_MacCentralEurRoman' is invalid in C++ [-Wc++-compat]
   16 | static const encpage_t utf8_MacCentralEurRoman[8];
      |                        ^~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:21:24: warning: uninitialized 'const utf8_MacCroatian' is invalid in C++ [-Wc++-compat]
   21 | static const encpage_t utf8_MacCroatian[12];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:26:24: warning: uninitialized 'const utf8_MacCyrillic' is invalid in C++ [-Wc++-compat]
   26 | static const encpage_t utf8_MacCyrillic[9];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:31:24: warning: uninitialized 'const utf8_MacFarsi' is invalid in C++ [-Wc++-compat]
   31 | static const encpage_t utf8_MacFarsi[9];
      |                        ^~~~~~~~~~~~~
byte_t.c:36:24: warning: uninitialized 'const utf8_MacGreek' is invalid in C++ [-Wc++-compat]
   36 | static const encpage_t utf8_MacGreek[8];
      |                        ^~~~~~~~~~~~~
byte_t.c:41:24: warning: uninitialized 'const utf8_MacHebrew' is invalid in C++ [-Wc++-compat]
   41 | static const encpage_t utf8_MacHebrew[8];
      |                        ^~~~~~~~~~~~~~
byte_t.c:46:24: warning: uninitialized 'const utf8_MacIcelandic' is invalid in C++ [-Wc++-compat]
   46 | static const encpage_t utf8_MacIcelandic[12];
      |                        ^~~~~~~~~~~~~~~~~
byte_t.c:51:24: warning: uninitialized 'const utf8_MacRoman' is invalid in C++ [-Wc++-compat]
   51 | static const encpage_t utf8_MacRoman[12];
      |                        ^~~~~~~~~~~~~
byte_t.c:56:24: warning: uninitialized 'const utf8_MacRomanian' is invalid in C++ [-Wc++-compat]
   56 | static const encpage_t utf8_MacRomanian[13];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:61:24: warning: uninitialized 'const utf8_MacRumanian' is invalid in C++ [-Wc++-compat]
   61 | static const encpage_t utf8_MacRumanian[11];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:66:24: warning: uninitialized 'const utf8_MacSami' is invalid in C++ [-Wc++-compat]
   66 | static const encpage_t utf8_MacSami[13];
      |                        ^~~~~~~~~~~~
byte_t.c:71:24: warning: uninitialized 'const utf8_MacThai' is invalid in C++ [-Wc++-compat]
   71 | static const encpage_t utf8_MacThai[5];
      |                        ^~~~~~~~~~~~
byte_t.c:76:24: warning: uninitialized 'const utf8_MacTurkish' is invalid in C++ [-Wc++-compat]
   76 | static const encpage_t utf8_MacTurkish[12];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:81:24: warning: uninitialized 'const utf8_cp1006' is invalid in C++ [-Wc++-compat]
   81 | static const encpage_t utf8_cp1006[6];
      |                        ^~~~~~~~~~~
byte_t.c:86:24: warning: uninitialized 'const utf8_cp1250' is invalid in C++ [-Wc++-compat]
   86 | static const encpage_t utf8_cp1250[8];
      |                        ^~~~~~~~~~~
byte_t.c:91:24: warning: uninitialized 'const utf8_cp1251' is invalid in C++ [-Wc++-compat]
   91 | static const encpage_t utf8_cp1251[7];
      |                        ^~~~~~~~~~~
byte_t.c:96:24: warning: uninitialized 'const utf8_cp1253' is invalid in C++ [-Wc++-compat]
   96 | static const encpage_t utf8_cp1253[7];
      |                        ^~~~~~~~~~~
byte_t.c:101:24: warning: uninitialized 'const utf8_cp1254' is invalid in C++ [-Wc++-compat]
  101 | static const encpage_t utf8_cp1254[9];
      |                        ^~~~~~~~~~~
byte_t.c:106:24: warning: uninitialized 'const utf8_cp1255' is invalid in C++ [-Wc++-compat]
  106 | static const encpage_t utf8_cp1255[9];
      |                        ^~~~~~~~~~~
byte_t.c:111:24: warning: uninitialized 'const utf8_cp1256' is invalid in C++ [-Wc++-compat]
  111 | static const encpage_t utf8_cp1256[12];
      |                        ^~~~~~~~~~~
byte_t.c:116:24: warning: uninitialized 'const utf8_cp1257' is invalid in C++ [-Wc++-compat]
  116 | static const encpage_t utf8_cp1257[8];
      |                        ^~~~~~~~~~~
byte_t.c:121:24: warning: uninitialized 'const utf8_cp1258' is invalid in C++ [-Wc++-compat]
  121 | static const encpage_t utf8_cp1258[10];
      |                        ^~~~~~~~~~~
byte_t.c:126:24: warning: uninitialized 'const utf8_cp424' is invalid in C++ [-Wc++-compat]
  126 | static const encpage_t utf8_cp424[6];
      |                        ^~~~~~~~~~
byte_t.c:131:24: warning: uninitialized 'const utf8_cp437' is invalid in C++ [-Wc++-compat]
  131 | static const encpage_t utf8_cp437[8];
      |                        ^~~~~~~~~~
byte_t.c:136:24: warning: uninitialized 'const utf8_cp737' is invalid in C++ [-Wc++-compat]
  136 | static const encpage_t utf8_cp737[7];
      |                        ^~~~~~~~~~
byte_t.c:141:24: warning: uninitialized 'const utf8_cp775' is invalid in C++ [-Wc++-compat]
  141 | static const encpage_t utf8_cp775[7];
      |                        ^~~~~~~~~~
byte_t.c:146:24: warning: uninitialized 'const utf8_cp850' is invalid in C++ [-Wc++-compat]
  146 | static const encpage_t utf8_cp850[7];
      |                        ^~~~~~~~~~
byte_t.c:151:24: warning: uninitialized 'const utf8_cp852' is invalid in C++ [-Wc++-compat]
  151 | static const encpage_t utf8_cp852[8];
      |                        ^~~~~~~~~~
byte_t.c:156:24: warning: uninitialized 'const utf8_cp855' is invalid in C++ [-Wc++-compat]
  156 | static const encpage_t utf8_cp855[6];
      |                        ^~~~~~~~~~
byte_t.c:161:24: warning: uninitialized 'const utf8_cp856' is invalid in C++ [-Wc++-compat]
  161 | static const encpage_t utf8_cp856[6];
      |                        ^~~~~~~~~~
byte_t.c:166:24: warning: uninitialized 'const utf8_cp857' is invalid in C++ [-Wc++-compat]
  166 | static const encpage_t utf8_cp857[7];
      |                        ^~~~~~~~~~
byte_t.c:171:24: warning: uninitialized 'const utf8_cp858' is invalid in C++ [-Wc++-compat]
  171 | static const encpage_t utf8_cp858[6];
      |                        ^~~~~~~~~~
byte_t.c:176:24: warning: uninitialized 'const utf8_cp860' is invalid in C++ [-Wc++-compat]
  176 | static const encpage_t utf8_cp860[7];
      |                        ^~~~~~~~~~
byte_t.c:181:24: warning: uninitialized 'const utf8_cp861' is invalid in C++ [-Wc++-compat]
  181 | static const encpage_t utf8_cp861[8];
      |                        ^~~~~~~~~~
byte_t.c:186:24: warning: uninitialized 'const utf8_cp862' is invalid in C++ [-Wc++-compat]
  186 | static const encpage_t utf8_cp862[9];
      |                        ^~~~~~~~~~
byte_t.c:191:24: warning: uninitialized 'const utf8_cp863' is invalid in C++ [-Wc++-compat]
  191 | static const encpage_t utf8_cp863[8];
      |                        ^~~~~~~~~~
byte_t.c:196:24: warning: uninitialized 'const utf8_cp864' is invalid in C++ [-Wc++-compat]
  196 | static const encpage_t utf8_cp864[11];
      |                        ^~~~~~~~~~
byte_t.c:201:24: warning: uninitialized 'const utf8_cp865' is invalid in C++ [-Wc++-compat]
  201 | static const encpage_t utf8_cp865[8];
      |                        ^~~~~~~~~~
byte_t.c:206:24: warning: uninitialized 'const utf8_cp866' is invalid in C++ [-Wc++-compat]
  206 | static const encpage_t utf8_cp866[6];
      |                        ^~~~~~~~~~
byte_t.c:211:24: warning: uninitialized 'const utf8_cp869' is invalid in C++ [-Wc++-compat]
  211 | static const encpage_t utf8_cp869[6];
      |                        ^~~~~~~~~~
byte_t.c:216:24: warning: uninitialized 'const utf8_cp874' is invalid in C++ [-Wc++-compat]
  216 | static const encpage_t utf8_cp874[5];
      |                        ^~~~~~~~~~
byte_t.c:221:24: warning: uninitialized 'const utf8_hp_roman8' is invalid in C++ [-Wc++-compat]
  221 | static const encpage_t utf8_hp_roman8[8];
      |                        ^~~~~~~~~~~~~~
byte_t.c:226:24: warning: uninitialized 'const utf8_iso_8859_2' is invalid in C++ [-Wc++-compat]
  226 | static const encpage_t utf8_iso_8859_2[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:231:24: warning: uninitialized 'const utf8_iso_8859_3' is invalid in C++ [-Wc++-compat]
  231 | static const encpage_t utf8_iso_8859_3[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:236:24: warning: uninitialized 'const utf8_iso_8859_4' is invalid in C++ [-Wc++-compat]
  236 | static const encpage_t utf8_iso_8859_4[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:241:24: warning: uninitialized 'const utf8_iso_8859_5' is invalid in C++ [-Wc++-compat]
  241 | static const encpage_t utf8_iso_8859_5[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:246:24: warning: uninitialized 'const utf8_iso_8859_6' is invalid in C++ [-Wc++-compat]
  246 | static const encpage_t utf8_iso_8859_6[5];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:251:24: warning: uninitialized 'const utf8_iso_8859_7' is invalid in C++ [-Wc++-compat]
  251 | static const encpage_t utf8_iso_8859_7[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:256:24: warning: uninitialized 'const utf8_iso_8859_8' is invalid in C++ [-Wc++-compat]
  256 | static const encpage_t utf8_iso_8859_8[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:261:24: warning: uninitialized 'const utf8_iso_8859_9' is invalid in C++ [-Wc++-compat]
  261 | static const encpage_t utf8_iso_8859_9[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:266:24: warning: uninitialized 'const utf8_iso_8859_10' is invalid in C++ [-Wc++-compat]
  266 | static const encpage_t utf8_iso_8859_10[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:271:24: warning: uninitialized 'const utf8_iso_8859_11' is invalid in C++ [-Wc++-compat]
  271 | static const encpage_t utf8_iso_8859_11[4];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:276:24: warning: uninitialized 'const utf8_iso_8859_13' is invalid in C++ [-Wc++-compat]
  276 | static const encpage_t utf8_iso_8859_13[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:281:24: warning: uninitialized 'const utf8_iso_8859_14' is invalid in C++ [-Wc++-compat]
  281 | static const encpage_t utf8_iso_8859_14[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:286:24: warning: uninitialized 'const utf8_iso_8859_15' is invalid in C++ [-Wc++-compat]
  286 | static const encpage_t utf8_iso_8859_15[6];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:291:24: warning: uninitialized 'const utf8_iso_8859_16' is invalid in C++ [-Wc++-compat]
  291 | static const encpage_t utf8_iso_8859_16[8];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:296:24: warning: uninitialized 'const utf8_koi8_f' is invalid in C++ [-Wc++-compat]
  296 | static const encpage_t utf8_koi8_f[7];
      |                        ^~~~~~~~~~~
byte_t.c:301:24: warning: uninitialized 'const utf8_koi8_r' is invalid in C++ [-Wc++-compat]
  301 | static const encpage_t utf8_koi8_r[7];
      |                        ^~~~~~~~~~~
byte_t.c:306:24: warning: uninitialized 'const utf8_koi8_u' is invalid in C++ [-Wc++-compat]
  306 | static const encpage_t utf8_koi8_u[8];
      |                        ^~~~~~~~~~~
byte_t.c:311:24: warning: uninitialized 'const utf8_nextstep' is invalid in C++ [-Wc++-compat]
  311 | static const encpage_t utf8_nextstep[10];
      |                        ^~~~~~~~~~~~~
byte_t.c:316:24: warning: uninitialized 'const utf8_viscii' is invalid in C++ [-Wc++-compat]
  316 | static const encpage_t utf8_viscii[12];
      |                        ^~~~~~~~~~~
byte_t.c:1138:24: warning: duplicate declaration of 'utf8_AdobeStandardEncoding' is invalid in C++ [-Wc++-compat]
 1138 | static const encpage_t utf8_AdobeStandardEncoding[10] = {
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:6:24: note: previous declaration of 'utf8_AdobeStandardEncoding' with type 'const encpage_t[10]' {aka 'const struct encpage_s[10]'}
    6 | static const encpage_t utf8_AdobeStandardEncoding[10];
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:1288:24: warning: duplicate declaration of 'utf8_MacArabic' is invalid in C++ [-Wc++-compat]
 1288 | static const encpage_t utf8_MacArabic[9] = {
      |                        ^~~~~~~~~~~~~~
byte_t.c:11:24: note: previous declaration of 'utf8_MacArabic' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
   11 | static const encpage_t utf8_MacArabic[9];
      |                        ^~~~~~~~~~~~~~
byte_t.c:1477:24: warning: duplicate declaration of 'utf8_MacCentralEurRoman' is invalid in C++ [-Wc++-compat]
 1477 | static const encpage_t utf8_MacCentralEurRoman[8] = {
      |                        ^~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:16:24: note: previous declaration of 'utf8_MacCentralEurRoman' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
   16 | static const encpage_t utf8_MacCentralEurRoman[8];
      |                        ^~~~~~~~~~~~~~~~~~~~~~~
byte_t.c:1712:24: warning: duplicate declaration of 'utf8_MacCroatian' is invalid in C++ [-Wc++-compat]
 1712 | static const encpage_t utf8_MacCroatian[12] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:21:24: note: previous declaration of 'utf8_MacCroatian' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
   21 | static const encpage_t utf8_MacCroatian[12];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:1884:24: warning: duplicate declaration of 'utf8_MacCyrillic' is invalid in C++ [-Wc++-compat]
 1884 | static const encpage_t utf8_MacCyrillic[9] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:26:24: note: previous declaration of 'utf8_MacCyrillic' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
   26 | static const encpage_t utf8_MacCyrillic[9];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:2034:24: warning: duplicate declaration of 'utf8_MacFarsi' is invalid in C++ [-Wc++-compat]
 2034 | static const encpage_t utf8_MacFarsi[9] = {
      |                        ^~~~~~~~~~~~~
byte_t.c:31:24: note: previous declaration of 'utf8_MacFarsi' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
   31 | static const encpage_t utf8_MacFarsi[9];
      |                        ^~~~~~~~~~~~~
byte_t.c:2193:24: warning: duplicate declaration of 'utf8_MacGreek' is invalid in C++ [-Wc++-compat]
 2193 | static const encpage_t utf8_MacGreek[8] = {
      |                        ^~~~~~~~~~~~~
byte_t.c:36:24: note: previous declaration of 'utf8_MacGreek' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
   36 | static const encpage_t utf8_MacGreek[8];
      |                        ^~~~~~~~~~~~~
byte_t.c:2341:24: warning: duplicate declaration of 'utf8_MacHebrew' is invalid in C++ [-Wc++-compat]
 2341 | static const encpage_t utf8_MacHebrew[8] = {
      |                        ^~~~~~~~~~~~~~
byte_t.c:41:24: note: previous declaration of 'utf8_MacHebrew' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
   41 | static const encpage_t utf8_MacHebrew[8];
      |                        ^~~~~~~~~~~~~~
byte_t.c:2565:24: warning: duplicate declaration of 'utf8_MacIcelandic' is invalid in C++ [-Wc++-compat]
 2565 | static const encpage_t utf8_MacIcelandic[12] = {
      |                        ^~~~~~~~~~~~~~~~~
byte_t.c:46:24: note: previous declaration of 'utf8_MacIcelandic' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
   46 | static const encpage_t utf8_MacIcelandic[12];
      |                        ^~~~~~~~~~~~~~~~~
byte_t.c:2809:24: warning: duplicate declaration of 'utf8_MacRoman' is invalid in C++ [-Wc++-compat]
 2809 | static const encpage_t utf8_MacRoman[12] = {
      |                        ^~~~~~~~~~~~~
byte_t.c:51:24: note: previous declaration of 'utf8_MacRoman' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
   51 | static const encpage_t utf8_MacRoman[12];
      |                        ^~~~~~~~~~~~~
byte_t.c:3058:24: warning: duplicate declaration of 'utf8_MacRomanian' is invalid in C++ [-Wc++-compat]
 3058 | static const encpage_t utf8_MacRomanian[13] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:56:24: note: previous declaration of 'utf8_MacRomanian' with type 'const encpage_t[13]' {aka 'const struct encpage_s[13]'}
   56 | static const encpage_t utf8_MacRomanian[13];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:3289:24: warning: duplicate declaration of 'utf8_MacRumanian' is invalid in C++ [-Wc++-compat]
 3289 | static const encpage_t utf8_MacRumanian[11] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:61:24: note: previous declaration of 'utf8_MacRumanian' with type 'const encpage_t[11]' {aka 'const struct encpage_s[11]'}
   61 | static const encpage_t utf8_MacRumanian[11];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:3509:24: warning: duplicate declaration of 'utf8_MacSami' is invalid in C++ [-Wc++-compat]
 3509 | static const encpage_t utf8_MacSami[13] = {
      |                        ^~~~~~~~~~~~
byte_t.c:66:24: note: previous declaration of 'utf8_MacSami' with type 'const encpage_t[13]' {aka 'const struct encpage_s[13]'}
   66 | static const encpage_t utf8_MacSami[13];
      |                        ^~~~~~~~~~~~
byte_t.c:3625:24: warning: duplicate declaration of 'utf8_MacThai' is invalid in C++ [-Wc++-compat]
 3625 | static const encpage_t utf8_MacThai[5] = {
      |                        ^~~~~~~~~~~~
byte_t.c:71:24: note: previous declaration of 'utf8_MacThai' with type 'const encpage_t[5]' {aka 'const struct encpage_s[5]'}
   71 | static const encpage_t utf8_MacThai[5];
      |                        ^~~~~~~~~~~~
byte_t.c:3847:24: warning: duplicate declaration of 'utf8_MacTurkish' is invalid in C++ [-Wc++-compat]
 3847 | static const encpage_t utf8_MacTurkish[12] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:76:24: note: previous declaration of 'utf8_MacTurkish' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
   76 | static const encpage_t utf8_MacTurkish[12];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:4025:24: warning: duplicate declaration of 'utf8_cp1006' is invalid in C++ [-Wc++-compat]
 4025 | static const encpage_t utf8_cp1006[6] = {
      |                        ^~~~~~~~~~~
byte_t.c:81:24: note: previous declaration of 'utf8_cp1006' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
   81 | static const encpage_t utf8_cp1006[6];
      |                        ^~~~~~~~~~~
byte_t.c:4176:24: warning: duplicate declaration of 'utf8_cp1250' is invalid in C++ [-Wc++-compat]
 4176 | static const encpage_t utf8_cp1250[8] = {
      |                        ^~~~~~~~~~~
byte_t.c:86:24: note: previous declaration of 'utf8_cp1250' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
   86 | static const encpage_t utf8_cp1250[8];
      |                        ^~~~~~~~~~~
byte_t.c:4294:24: warning: duplicate declaration of 'utf8_cp1251' is invalid in C++ [-Wc++-compat]
 4294 | static const encpage_t utf8_cp1251[7] = {
      |                        ^~~~~~~~~~~
byte_t.c:91:24: note: previous declaration of 'utf8_cp1251' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
   91 | static const encpage_t utf8_cp1251[7];
      |                        ^~~~~~~~~~~
byte_t.c:4411:24: warning: duplicate declaration of 'utf8_cp1253' is invalid in C++ [-Wc++-compat]
 4411 | static const encpage_t utf8_cp1253[7] = {
      |                        ^~~~~~~~~~~
byte_t.c:96:24: note: previous declaration of 'utf8_cp1253' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
   96 | static const encpage_t utf8_cp1253[7];
      |                        ^~~~~~~~~~~
byte_t.c:4543:24: warning: duplicate declaration of 'utf8_cp1254' is invalid in C++ [-Wc++-compat]
 4543 | static const encpage_t utf8_cp1254[9] = {
      |                        ^~~~~~~~~~~
byte_t.c:101:24: note: previous declaration of 'utf8_cp1254' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
  101 | static const encpage_t utf8_cp1254[9];
      |                        ^~~~~~~~~~~
byte_t.c:4681:24: warning: duplicate declaration of 'utf8_cp1255' is invalid in C++ [-Wc++-compat]
 4681 | static const encpage_t utf8_cp1255[9] = {
      |                        ^~~~~~~~~~~
byte_t.c:106:24: note: previous declaration of 'utf8_cp1255' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
  106 | static const encpage_t utf8_cp1255[9];
      |                        ^~~~~~~~~~~
byte_t.c:4860:24: warning: duplicate declaration of 'utf8_cp1256' is invalid in C++ [-Wc++-compat]
 4860 | static const encpage_t utf8_cp1256[12] = {
      |                        ^~~~~~~~~~~
byte_t.c:111:24: note: previous declaration of 'utf8_cp1256' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
  111 | static const encpage_t utf8_cp1256[12];
      |                        ^~~~~~~~~~~
byte_t.c:5010:24: warning: duplicate declaration of 'utf8_cp1257' is invalid in C++ [-Wc++-compat]
 5010 | static const encpage_t utf8_cp1257[8] = {
      |                        ^~~~~~~~~~~
byte_t.c:116:24: note: previous declaration of 'utf8_cp1257' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  116 | static const encpage_t utf8_cp1257[8];
      |                        ^~~~~~~~~~~
byte_t.c:5163:24: warning: duplicate declaration of 'utf8_cp1258' is invalid in C++ [-Wc++-compat]
 5163 | static const encpage_t utf8_cp1258[10] = {
      |                        ^~~~~~~~~~~
byte_t.c:121:24: note: previous declaration of 'utf8_cp1258' with type 'const encpage_t[10]' {aka 'const struct encpage_s[10]'}
  121 | static const encpage_t utf8_cp1258[10];
      |                        ^~~~~~~~~~~
byte_t.c:5289:24: warning: duplicate declaration of 'utf8_cp424' is invalid in C++ [-Wc++-compat]
 5289 | static const encpage_t utf8_cp424[6] = {
      |                        ^~~~~~~~~~
byte_t.c:126:24: note: previous declaration of 'utf8_cp424' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  126 | static const encpage_t utf8_cp424[6];
      |                        ^~~~~~~~~~
byte_t.c:5493:24: warning: duplicate declaration of 'utf8_cp437' is invalid in C++ [-Wc++-compat]
 5493 | static const encpage_t utf8_cp437[8] = {
      |                        ^~~~~~~~~~
byte_t.c:131:24: note: previous declaration of 'utf8_cp437' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  131 | static const encpage_t utf8_cp437[8];
      |                        ^~~~~~~~~~
byte_t.c:5644:24: warning: duplicate declaration of 'utf8_cp737' is invalid in C++ [-Wc++-compat]
 5644 | static const encpage_t utf8_cp737[7] = {
      |                        ^~~~~~~~~~
byte_t.c:136:24: note: previous declaration of 'utf8_cp737' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  136 | static const encpage_t utf8_cp737[7];
      |                        ^~~~~~~~~~
byte_t.c:5830:24: warning: duplicate declaration of 'utf8_cp775' is invalid in C++ [-Wc++-compat]
 5830 | static const encpage_t utf8_cp775[7] = {
      |                        ^~~~~~~~~~
byte_t.c:141:24: note: previous declaration of 'utf8_cp775' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  141 | static const encpage_t utf8_cp775[7];
      |                        ^~~~~~~~~~
byte_t.c:5965:24: warning: duplicate declaration of 'utf8_cp850' is invalid in C++ [-Wc++-compat]
 5965 | static const encpage_t utf8_cp850[7] = {
      |                        ^~~~~~~~~~
byte_t.c:146:24: note: previous declaration of 'utf8_cp850' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  146 | static const encpage_t utf8_cp850[7];
      |                        ^~~~~~~~~~
byte_t.c:6138:24: warning: duplicate declaration of 'utf8_cp852' is invalid in C++ [-Wc++-compat]
 6138 | static const encpage_t utf8_cp852[8] = {
      |                        ^~~~~~~~~~
byte_t.c:151:24: note: previous declaration of 'utf8_cp852' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  151 | static const encpage_t utf8_cp852[8];
      |                        ^~~~~~~~~~
byte_t.c:6274:24: warning: duplicate declaration of 'utf8_cp855' is invalid in C++ [-Wc++-compat]
 6274 | static const encpage_t utf8_cp855[6] = {
      |                        ^~~~~~~~~~
byte_t.c:156:24: note: previous declaration of 'utf8_cp855' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  156 | static const encpage_t utf8_cp855[6];
      |                        ^~~~~~~~~~
byte_t.c:6408:24: warning: duplicate declaration of 'utf8_cp856' is invalid in C++ [-Wc++-compat]
 6408 | static const encpage_t utf8_cp856[6] = {
      |                        ^~~~~~~~~~
byte_t.c:161:24: note: previous declaration of 'utf8_cp856' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  161 | static const encpage_t utf8_cp856[6];
      |                        ^~~~~~~~~~
byte_t.c:6539:24: warning: duplicate declaration of 'utf8_cp857' is invalid in C++ [-Wc++-compat]
 6539 | static const encpage_t utf8_cp857[7] = {
      |                        ^~~~~~~~~~
byte_t.c:166:24: note: previous declaration of 'utf8_cp857' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  166 | static const encpage_t utf8_cp857[7];
      |                        ^~~~~~~~~~
byte_t.c:6677:24: warning: duplicate declaration of 'utf8_cp858' is invalid in C++ [-Wc++-compat]
 6677 | static const encpage_t utf8_cp858[6] = {
      |                        ^~~~~~~~~~
byte_t.c:171:24: note: previous declaration of 'utf8_cp858' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  171 | static const encpage_t utf8_cp858[6];
      |                        ^~~~~~~~~~
byte_t.c:6871:24: warning: duplicate declaration of 'utf8_cp860' is invalid in C++ [-Wc++-compat]
 6871 | static const encpage_t utf8_cp860[7] = {
      |                        ^~~~~~~~~~
byte_t.c:176:24: note: previous declaration of 'utf8_cp860' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  176 | static const encpage_t utf8_cp860[7];
      |                        ^~~~~~~~~~
byte_t.c:7081:24: warning: duplicate declaration of 'utf8_cp861' is invalid in C++ [-Wc++-compat]
 7081 | static const encpage_t utf8_cp861[8] = {
      |                        ^~~~~~~~~~
byte_t.c:181:24: note: previous declaration of 'utf8_cp861' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  181 | static const encpage_t utf8_cp861[8];
      |                        ^~~~~~~~~~
byte_t.c:7292:24: warning: duplicate declaration of 'utf8_cp862' is invalid in C++ [-Wc++-compat]
 7292 | static const encpage_t utf8_cp862[9] = {
      |                        ^~~~~~~~~~
byte_t.c:186:24: note: previous declaration of 'utf8_cp862' with type 'const encpage_t[9]' {aka 'const struct encpage_s[9]'}
  186 | static const encpage_t utf8_cp862[9];
      |                        ^~~~~~~~~~
byte_t.c:7500:24: warning: duplicate declaration of 'utf8_cp863' is invalid in C++ [-Wc++-compat]
 7500 | static const encpage_t utf8_cp863[8] = {
      |                        ^~~~~~~~~~
byte_t.c:191:24: note: previous declaration of 'utf8_cp863' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  191 | static const encpage_t utf8_cp863[8];
      |                        ^~~~~~~~~~
byte_t.c:7744:24: warning: duplicate declaration of 'utf8_cp864' is invalid in C++ [-Wc++-compat]
 7744 | static const encpage_t utf8_cp864[11] = {
      |                        ^~~~~~~~~~
byte_t.c:196:24: note: previous declaration of 'utf8_cp864' with type 'const encpage_t[11]' {aka 'const struct encpage_s[11]'}
  196 | static const encpage_t utf8_cp864[11];
      |                        ^~~~~~~~~~
byte_t.c:7954:24: warning: duplicate declaration of 'utf8_cp865' is invalid in C++ [-Wc++-compat]
 7954 | static const encpage_t utf8_cp865[8] = {
      |                        ^~~~~~~~~~
byte_t.c:201:24: note: previous declaration of 'utf8_cp865' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  201 | static const encpage_t utf8_cp865[8];
      |                        ^~~~~~~~~~
byte_t.c:8086:24: warning: duplicate declaration of 'utf8_cp866' is invalid in C++ [-Wc++-compat]
 8086 | static const encpage_t utf8_cp866[6] = {
      |                        ^~~~~~~~~~
byte_t.c:206:24: note: previous declaration of 'utf8_cp866' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  206 | static const encpage_t utf8_cp866[6];
      |                        ^~~~~~~~~~
byte_t.c:8228:24: warning: duplicate declaration of 'utf8_cp869' is invalid in C++ [-Wc++-compat]
 8228 | static const encpage_t utf8_cp869[6] = {
      |                        ^~~~~~~~~~
byte_t.c:211:24: note: previous declaration of 'utf8_cp869' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  211 | static const encpage_t utf8_cp869[6];
      |                        ^~~~~~~~~~
byte_t.c:8317:24: warning: duplicate declaration of 'utf8_cp874' is invalid in C++ [-Wc++-compat]
 8317 | static const encpage_t utf8_cp874[5] = {
      |                        ^~~~~~~~~~
byte_t.c:216:24: note: previous declaration of 'utf8_cp874' with type 'const encpage_t[5]' {aka 'const struct encpage_s[5]'}
  216 | static const encpage_t utf8_cp874[5];
      |                        ^~~~~~~~~~
byte_t.c:8427:24: warning: duplicate declaration of 'utf8_hp_roman8' is invalid in C++ [-Wc++-compat]
 8427 | static const encpage_t utf8_hp_roman8[8] = {
      |                        ^~~~~~~~~~~~~~
byte_t.c:221:24: note: previous declaration of 'utf8_hp_roman8' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  221 | static const encpage_t utf8_hp_roman8[8];
      |                        ^~~~~~~~~~~~~~
byte_t.c:8529:24: warning: duplicate declaration of 'utf8_iso_8859_2' is invalid in C++ [-Wc++-compat]
 8529 | static const encpage_t utf8_iso_8859_2[7] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:226:24: note: previous declaration of 'utf8_iso_8859_2' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  226 | static const encpage_t utf8_iso_8859_2[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:8621:24: warning: duplicate declaration of 'utf8_iso_8859_3' is invalid in C++ [-Wc++-compat]
 8621 | static const encpage_t utf8_iso_8859_3[7] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:231:24: note: previous declaration of 'utf8_iso_8859_3' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  231 | static const encpage_t utf8_iso_8859_3[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:8717:24: warning: duplicate declaration of 'utf8_iso_8859_4' is invalid in C++ [-Wc++-compat]
 8717 | static const encpage_t utf8_iso_8859_4[7] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:236:24: note: previous declaration of 'utf8_iso_8859_4' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  236 | static const encpage_t utf8_iso_8859_4[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:8785:24: warning: duplicate declaration of 'utf8_iso_8859_5' is invalid in C++ [-Wc++-compat]
 8785 | static const encpage_t utf8_iso_8859_5[6] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:241:24: note: previous declaration of 'utf8_iso_8859_5' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  241 | static const encpage_t utf8_iso_8859_5[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:8841:24: warning: duplicate declaration of 'utf8_iso_8859_6' is invalid in C++ [-Wc++-compat]
 8841 | static const encpage_t utf8_iso_8859_6[5] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:246:24: note: previous declaration of 'utf8_iso_8859_6' with type 'const encpage_t[5]' {aka 'const struct encpage_s[5]'}
  246 | static const encpage_t utf8_iso_8859_6[5];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:8938:24: warning: duplicate declaration of 'utf8_iso_8859_7' is invalid in C++ [-Wc++-compat]
 8938 | static const encpage_t utf8_iso_8859_7[7] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:251:24: note: previous declaration of 'utf8_iso_8859_7' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  251 | static const encpage_t utf8_iso_8859_7[7];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:9009:24: warning: duplicate declaration of 'utf8_iso_8859_8' is invalid in C++ [-Wc++-compat]
 9009 | static const encpage_t utf8_iso_8859_8[6] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:256:24: note: previous declaration of 'utf8_iso_8859_8' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  256 | static const encpage_t utf8_iso_8859_8[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:9066:24: warning: duplicate declaration of 'utf8_iso_8859_9' is invalid in C++ [-Wc++-compat]
 9066 | static const encpage_t utf8_iso_8859_9[6] = {
      |                        ^~~~~~~~~~~~~~~
byte_t.c:261:24: note: previous declaration of 'utf8_iso_8859_9' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  261 | static const encpage_t utf8_iso_8859_9[6];
      |                        ^~~~~~~~~~~~~~~
byte_t.c:9167:24: warning: duplicate declaration of 'utf8_iso_8859_10' is invalid in C++ [-Wc++-compat]
 9167 | static const encpage_t utf8_iso_8859_10[7] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:266:24: note: previous declaration of 'utf8_iso_8859_10' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  266 | static const encpage_t utf8_iso_8859_10[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9225:24: warning: duplicate declaration of 'utf8_iso_8859_11' is invalid in C++ [-Wc++-compat]
 9225 | static const encpage_t utf8_iso_8859_11[4] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:271:24: note: previous declaration of 'utf8_iso_8859_11' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
  271 | static const encpage_t utf8_iso_8859_11[4];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9333:24: warning: duplicate declaration of 'utf8_iso_8859_13' is invalid in C++ [-Wc++-compat]
 9333 | static const encpage_t utf8_iso_8859_13[7] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:276:24: note: previous declaration of 'utf8_iso_8859_13' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  276 | static const encpage_t utf8_iso_8859_13[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9464:24: warning: duplicate declaration of 'utf8_iso_8859_14' is invalid in C++ [-Wc++-compat]
 9464 | static const encpage_t utf8_iso_8859_14[7] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:281:24: note: previous declaration of 'utf8_iso_8859_14' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  281 | static const encpage_t utf8_iso_8859_14[7];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9536:24: warning: duplicate declaration of 'utf8_iso_8859_15' is invalid in C++ [-Wc++-compat]
 9536 | static const encpage_t utf8_iso_8859_15[6] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:286:24: note: previous declaration of 'utf8_iso_8859_15' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
  286 | static const encpage_t utf8_iso_8859_15[6];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9652:24: warning: duplicate declaration of 'utf8_iso_8859_16' is invalid in C++ [-Wc++-compat]
 9652 | static const encpage_t utf8_iso_8859_16[8] = {
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:291:24: note: previous declaration of 'utf8_iso_8859_16' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  291 | static const encpage_t utf8_iso_8859_16[8];
      |                        ^~~~~~~~~~~~~~~~
byte_t.c:9781:24: warning: duplicate declaration of 'utf8_koi8_f' is invalid in C++ [-Wc++-compat]
 9781 | static const encpage_t utf8_koi8_f[7] = {
      |                        ^~~~~~~~~~~
byte_t.c:296:24: note: previous declaration of 'utf8_koi8_f' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  296 | static const encpage_t utf8_koi8_f[7];
      |                        ^~~~~~~~~~~
byte_t.c:9926:24: warning: duplicate declaration of 'utf8_koi8_r' is invalid in C++ [-Wc++-compat]
 9926 | static const encpage_t utf8_koi8_r[7] = {
      |                        ^~~~~~~~~~~
byte_t.c:301:24: note: previous declaration of 'utf8_koi8_r' with type 'const encpage_t[7]' {aka 'const struct encpage_s[7]'}
  301 | static const encpage_t utf8_koi8_r[7];
      |                        ^~~~~~~~~~~
byte_t.c:10097:24: warning: duplicate declaration of 'utf8_koi8_u' is invalid in C++ [-Wc++-compat]
10097 | static const encpage_t utf8_koi8_u[8] = {
      |                        ^~~~~~~~~~~
byte_t.c:306:24: note: previous declaration of 'utf8_koi8_u' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
  306 | static const encpage_t utf8_koi8_u[8];
      |                        ^~~~~~~~~~~
byte_t.c:10243:24: warning: duplicate declaration of 'utf8_nextstep' is invalid in C++ [-Wc++-compat]
10243 | static const encpage_t utf8_nextstep[10] = {
      |                        ^~~~~~~~~~~~~
byte_t.c:311:24: note: previous declaration of 'utf8_nextstep' with type 'const encpage_t[10]' {aka 'const struct encpage_s[10]'}
  311 | static const encpage_t utf8_nextstep[10];
      |                        ^~~~~~~~~~~~~
byte_t.c:10388:24: warning: duplicate declaration of 'utf8_viscii' is invalid in C++ [-Wc++-compat]
10388 | static const encpage_t utf8_viscii[12] = {
      |                        ^~~~~~~~~~~
byte_t.c:316:24: note: previous declaration of 'utf8_viscii' with type 'const encpage_t[12]' {aka 'const struct encpage_s[12]'}
  316 | static const encpage_t utf8_viscii[12];
      |                        ^~~~~~~~~~~
rm -f ../../../lib/auto/Encode/Byte/Byte.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Byte.o byte_t.o  -o ../../../lib/auto/Encode/Byte/Byte.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/Byte/Byte.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Byte'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/CN'
cp CN.pm ../../../lib/Encode/CN.pm
Running Mkbootstrap for CN ()
chmod 644 "CN.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/CN/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- CN.bs ../../../lib/auto/Encode/CN/CN.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o cp_00_t.c -f cp_00_t.fnm
Reading cp936 (cp936)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o eu_01_t.c -f eu_01_t.fnm
Reading euc-cn (euc-cn)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o gb_02_t.c -f gb_02_t.fnm
Reading gb12345-raw (gb12345-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o gb_03_t.c -f gb_03_t.fnm
Reading gb2312-raw (gb2312-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ir_04_t.c -f ir_04_t.fnm
Reading iso-ir-165 (iso-ir-165)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ma_05_t.c -f ma_05_t.fnm
Reading MacChineseSimp (MacChineseSimp)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp" -noprototypes -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/CN/../../../lib/ExtUtils/typemap'  CN.xs > CN.xsc
mv CN.xsc CN.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   CN.c
In file included from ../../../perl.h:7246,
                 from CN.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
CN.c: In function 'boot_Encode__CN':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CN.c:198:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  198 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CN.c:198:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  198 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   cp_00_t.c
cp_00_t.c:6:24: warning: uninitialized 'const cp936_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t cp936_utf8[129];
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: warning: uninitialized 'const utf8_cp936' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_cp936[23];
      |                        ^~~~~~~~~~
cp_00_t.c:7440:24: warning: duplicate declaration of 'cp936_utf8' is invalid in C++ [-Wc++-compat]
 7440 | static const encpage_t cp936_utf8[129] = {
      |                        ^~~~~~~~~~
cp_00_t.c:6:24: note: previous declaration of 'cp936_utf8' with type 'const encpage_t[129]' {aka 'const struct encpage_s[129]'}
    6 | static const encpage_t cp936_utf8[129];
      |                        ^~~~~~~~~~
cp_00_t.c:11492:24: warning: duplicate declaration of 'utf8_cp936' is invalid in C++ [-Wc++-compat]
11492 | static const encpage_t utf8_cp936[23] = {
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: note: previous declaration of 'utf8_cp936' with type 'const encpage_t[23]' {aka 'const struct encpage_s[23]'}
   11 | static const encpage_t utf8_cp936[23];
      |                        ^~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   eu_01_t.c
eu_01_t.c:6:24: warning: uninitialized 'const euc_cn_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t euc_cn_utf8[83];
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: warning: uninitialized 'const utf8_euc_cn' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_euc_cn[21];
      |                        ^~~~~~~~~~~
eu_01_t.c:2502:24: warning: duplicate declaration of 'euc_cn_utf8' is invalid in C++ [-Wc++-compat]
 2502 | static const encpage_t euc_cn_utf8[83] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:6:24: note: previous declaration of 'euc_cn_utf8' with type 'const encpage_t[83]' {aka 'const struct encpage_s[83]'}
    6 | static const encpage_t euc_cn_utf8[83];
      |                        ^~~~~~~~~~~
eu_01_t.c:9084:24: warning: duplicate declaration of 'utf8_euc_cn' is invalid in C++ [-Wc++-compat]
 9084 | static const encpage_t utf8_euc_cn[21] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: note: previous declaration of 'utf8_euc_cn' with type 'const encpage_t[21]' {aka 'const struct encpage_s[21]'}
   11 | static const encpage_t utf8_euc_cn[21];
      |                        ^~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   gb_02_t.c
gb_02_t.c:6:24: warning: uninitialized 'const gb12345_raw_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t gb12345_raw_utf8[84];
      |                        ^~~~~~~~~~~~~~~~
gb_02_t.c:11:24: warning: uninitialized 'const utf8_gb12345_raw' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_gb12345_raw[20];
      |                        ^~~~~~~~~~~~~~~~
gb_02_t.c:2405:24: warning: duplicate declaration of 'gb12345_raw_utf8' is invalid in C++ [-Wc++-compat]
 2405 | static const encpage_t gb12345_raw_utf8[84] = {
      |                        ^~~~~~~~~~~~~~~~
gb_02_t.c:6:24: note: previous declaration of 'gb12345_raw_utf8' with type 'const encpage_t[84]' {aka 'const struct encpage_s[84]'}
    6 | static const encpage_t gb12345_raw_utf8[84];
      |                        ^~~~~~~~~~~~~~~~
gb_02_t.c:9792:24: warning: duplicate declaration of 'utf8_gb12345_raw' is invalid in C++ [-Wc++-compat]
 9792 | static const encpage_t utf8_gb12345_raw[20] = {
      |                        ^~~~~~~~~~~~~~~~
gb_02_t.c:11:24: note: previous declaration of 'utf8_gb12345_raw' with type 'const encpage_t[20]' {aka 'const struct encpage_s[20]'}
   11 | static const encpage_t utf8_gb12345_raw[20];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   gb_03_t.c
gb_03_t.c:6:24: warning: uninitialized 'const gb2312_raw_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t gb2312_raw_utf8[82];
      |                        ^~~~~~~~~~~~~~~
gb_03_t.c:11:24: warning: uninitialized 'const utf8_gb2312_raw' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_gb2312_raw[20];
      |                        ^~~~~~~~~~~~~~~
gb_03_t.c:2382:24: warning: duplicate declaration of 'gb2312_raw_utf8' is invalid in C++ [-Wc++-compat]
 2382 | static const encpage_t gb2312_raw_utf8[82] = {
      |                        ^~~~~~~~~~~~~~~
gb_03_t.c:6:24: note: previous declaration of 'gb2312_raw_utf8' with type 'const encpage_t[82]' {aka 'const struct encpage_s[82]'}
    6 | static const encpage_t gb2312_raw_utf8[82];
      |                        ^~~~~~~~~~~~~~~
gb_03_t.c:8963:24: warning: duplicate declaration of 'utf8_gb2312_raw' is invalid in C++ [-Wc++-compat]
 8963 | static const encpage_t utf8_gb2312_raw[20] = {
      |                        ^~~~~~~~~~~~~~~
gb_03_t.c:11:24: note: previous declaration of 'utf8_gb2312_raw' with type 'const encpage_t[20]' {aka 'const struct encpage_s[20]'}
   11 | static const encpage_t utf8_gb2312_raw[20];
      |                        ^~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   ir_04_t.c
ir_04_t.c:6:24: warning: uninitialized 'const iso_ir_165_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t iso_ir_165_utf8[91];
      |                        ^~~~~~~~~~~~~~~
ir_04_t.c:11:24: warning: uninitialized 'const utf8_iso_ir_165' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_iso_ir_165[23];
      |                        ^~~~~~~~~~~~~~~
ir_04_t.c:2627:24: warning: duplicate declaration of 'iso_ir_165_utf8' is invalid in C++ [-Wc++-compat]
 2627 | static const encpage_t iso_ir_165_utf8[91] = {
      |                        ^~~~~~~~~~~~~~~
ir_04_t.c:6:24: note: previous declaration of 'iso_ir_165_utf8' with type 'const encpage_t[91]' {aka 'const struct encpage_s[91]'}
    6 | static const encpage_t iso_ir_165_utf8[91];
      |                        ^~~~~~~~~~~~~~~
ir_04_t.c:9332:24: warning: duplicate declaration of 'utf8_iso_ir_165' is invalid in C++ [-Wc++-compat]
 9332 | static const encpage_t utf8_iso_ir_165[23] = {
      |                        ^~~~~~~~~~~~~~~
ir_04_t.c:11:24: note: previous declaration of 'utf8_iso_ir_165' with type 'const encpage_t[23]' {aka 'const struct encpage_s[23]'}
   11 | static const encpage_t utf8_iso_ir_165[23];
      |                        ^~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   ma_05_t.c
ma_05_t.c:6:24: warning: uninitialized 'const MacChineseSimp_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t MacChineseSimp_utf8[87];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_05_t.c:11:24: warning: uninitialized 'const utf8_MacChineseSimp' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_MacChineseSimp[23];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_05_t.c:2521:24: warning: duplicate declaration of 'MacChineseSimp_utf8' is invalid in C++ [-Wc++-compat]
 2521 | static const encpage_t MacChineseSimp_utf8[87] = {
      |                        ^~~~~~~~~~~~~~~~~~~
ma_05_t.c:6:24: note: previous declaration of 'MacChineseSimp_utf8' with type 'const encpage_t[87]' {aka 'const struct encpage_s[87]'}
    6 | static const encpage_t MacChineseSimp_utf8[87];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_05_t.c:9167:24: warning: duplicate declaration of 'utf8_MacChineseSimp' is invalid in C++ [-Wc++-compat]
 9167 | static const encpage_t utf8_MacChineseSimp[23] = {
      |                        ^~~~~~~~~~~~~~~~~~~
ma_05_t.c:11:24: note: previous declaration of 'utf8_MacChineseSimp' with type 'const encpage_t[23]' {aka 'const struct encpage_s[23]'}
   11 | static const encpage_t utf8_MacChineseSimp[23];
      |                        ^~~~~~~~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/CN/CN.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  CN.o cp_00_t.o eu_01_t.o gb_02_t.o gb_03_t.o ir_04_t.o ma_05_t.o  -o ../../../lib/auto/Encode/CN/CN.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/CN/CN.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/CN'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/EBCDIC'
cp EBCDIC.pm ../../../lib/Encode/EBCDIC.pm
Running Mkbootstrap for EBCDIC ()
chmod 644 "EBCDIC.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/EBCDIC/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- EBCDIC.bs ../../../lib/auto/Encode/EBCDIC/EBCDIC.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -"O" -o ebcdic_t.c -f ebcdic_t.fnm
Reading cp37 (cp37)
Reading cp1026 (cp1026)
Reading cp1047 (cp1047)
Reading cp500 (cp500)
Reading cp875 (cp875)
Reading posix-bc (posix-bc)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/EBCDIC/../../../lib/ExtUtils/typemap'  EBCDIC.xs > EBCDIC.xsc
mv EBCDIC.xsc EBCDIC.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.02\" -DXS_VERSION=\"2.02\" -fPIC -Wno-unused-function "-I../../.."   EBCDIC.c
In file included from ../../../perl.h:7246,
                 from EBCDIC.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
EBCDIC.c: In function 'boot_Encode__EBCDIC':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EBCDIC.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EBCDIC.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.02\" -DXS_VERSION=\"2.02\" -fPIC -Wno-unused-function "-I../../.."   ebcdic_t.c
ebcdic_t.c:6:24: warning: uninitialized 'const utf8_cp1026' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t utf8_cp1026[6];
      |                        ^~~~~~~~~~~
ebcdic_t.c:11:24: warning: uninitialized 'const utf8_cp1047' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_cp1047[4];
      |                        ^~~~~~~~~~~
ebcdic_t.c:16:24: warning: uninitialized 'const utf8_cp37' is invalid in C++ [-Wc++-compat]
   16 | static const encpage_t utf8_cp37[4];
      |                        ^~~~~~~~~
ebcdic_t.c:21:24: warning: uninitialized 'const utf8_cp500' is invalid in C++ [-Wc++-compat]
   21 | static const encpage_t utf8_cp500[4];
      |                        ^~~~~~~~~~
ebcdic_t.c:26:24: warning: uninitialized 'const utf8_cp875' is invalid in C++ [-Wc++-compat]
   26 | static const encpage_t utf8_cp875[6];
      |                        ^~~~~~~~~~
ebcdic_t.c:31:24: warning: uninitialized 'const utf8_posix_bc' is invalid in C++ [-Wc++-compat]
   31 | static const encpage_t utf8_posix_bc[4];
      |                        ^~~~~~~~~~~~~
ebcdic_t.c:253:24: warning: duplicate declaration of 'utf8_cp1026' is invalid in C++ [-Wc++-compat]
  253 | static const encpage_t utf8_cp1026[6] = {
      |                        ^~~~~~~~~~~
ebcdic_t.c:6:24: note: previous declaration of 'utf8_cp1026' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
    6 | static const encpage_t utf8_cp1026[6];
      |                        ^~~~~~~~~~~
ebcdic_t.c:341:24: warning: duplicate declaration of 'utf8_cp1047' is invalid in C++ [-Wc++-compat]
  341 | static const encpage_t utf8_cp1047[4] = {
      |                        ^~~~~~~~~~~
ebcdic_t.c:11:24: note: previous declaration of 'utf8_cp1047' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
   11 | static const encpage_t utf8_cp1047[4];
      |                        ^~~~~~~~~~~
ebcdic_t.c:429:24: warning: duplicate declaration of 'utf8_cp37' is invalid in C++ [-Wc++-compat]
  429 | static const encpage_t utf8_cp37[4] = {
      |                        ^~~~~~~~~
ebcdic_t.c:16:24: note: previous declaration of 'utf8_cp37' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
   16 | static const encpage_t utf8_cp37[4];
      |                        ^~~~~~~~~
ebcdic_t.c:513:24: warning: duplicate declaration of 'utf8_cp500' is invalid in C++ [-Wc++-compat]
  513 | static const encpage_t utf8_cp500[4] = {
      |                        ^~~~~~~~~~
ebcdic_t.c:21:24: note: previous declaration of 'utf8_cp500' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
   21 | static const encpage_t utf8_cp500[4];
      |                        ^~~~~~~~~~
ebcdic_t.c:635:24: warning: duplicate declaration of 'utf8_cp875' is invalid in C++ [-Wc++-compat]
  635 | static const encpage_t utf8_cp875[6] = {
      |                        ^~~~~~~~~~
ebcdic_t.c:26:24: note: previous declaration of 'utf8_cp875' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
   26 | static const encpage_t utf8_cp875[6];
      |                        ^~~~~~~~~~
ebcdic_t.c:726:24: warning: duplicate declaration of 'utf8_posix_bc' is invalid in C++ [-Wc++-compat]
  726 | static const encpage_t utf8_posix_bc[4] = {
      |                        ^~~~~~~~~~~~~
ebcdic_t.c:31:24: note: previous declaration of 'utf8_posix_bc' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
   31 | static const encpage_t utf8_posix_bc[4];
      |                        ^~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/EBCDIC/EBCDIC.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  EBCDIC.o ebcdic_t.o  -o ../../../lib/auto/Encode/EBCDIC/EBCDIC.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/EBCDIC/EBCDIC.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/EBCDIC'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/JP'
cp JP.pm ../../../lib/Encode/JP.pm
Running Mkbootstrap for JP ()
chmod 644 "JP.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/JP/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- JP.bs ../../../lib/auto/Encode/JP/JP.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o cp_00_t.c -f cp_00_t.fnm
Reading cp932 (cp932)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o eu_01_t.c -f eu_01_t.fnm
Reading euc-jp (euc-jp)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ji_02_t.c -f ji_02_t.fnm
Reading jis0201-raw (jis0201-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ji_03_t.c -f ji_03_t.fnm
Reading jis0208-raw (jis0208-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ji_04_t.c -f ji_04_t.fnm
Reading jis0212-raw (jis0212-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ma_05_t.c -f ma_05_t.fnm
Reading MacJapanese (MacJapanese)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o sh_06_t.c -f sh_06_t.fnm
Reading shiftjis (shiftjis)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/JP/../../../lib/ExtUtils/typemap'  JP.xs > JP.xsc
mv JP.xsc JP.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   JP.c
In file included from ../../../perl.h:7246,
                 from JP.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
JP.c: In function 'boot_Encode__JP':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JP.c:199:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  199 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JP.c:199:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  199 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   cp_00_t.c
cp_00_t.c:6:24: warning: uninitialized 'const cp932_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t cp932_utf8[59];
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: warning: uninitialized 'const utf8_cp932' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_cp932[18];
      |                        ^~~~~~~~~~
cp_00_t.c:2897:24: warning: duplicate declaration of 'cp932_utf8' is invalid in C++ [-Wc++-compat]
 2897 | static const encpage_t cp932_utf8[59] = {
      |                        ^~~~~~~~~~
cp_00_t.c:6:24: note: previous declaration of 'cp932_utf8' with type 'const encpage_t[59]' {aka 'const struct encpage_s[59]'}
    6 | static const encpage_t cp932_utf8[59];
      |                        ^~~~~~~~~~
cp_00_t.c:10492:24: warning: duplicate declaration of 'utf8_cp932' is invalid in C++ [-Wc++-compat]
10492 | static const encpage_t utf8_cp932[18] = {
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: note: previous declaration of 'utf8_cp932' with type 'const encpage_t[18]' {aka 'const struct encpage_s[18]'}
   11 | static const encpage_t utf8_cp932[18];
      |                        ^~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   eu_01_t.c
eu_01_t.c:6:24: warning: uninitialized 'const euc_jp_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t euc_jp_utf8[98];
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: warning: uninitialized 'const utf8_euc_jp' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_euc_jp[21];
      |                        ^~~~~~~~~~~
eu_01_t.c:6335:24: warning: duplicate declaration of 'euc_jp_utf8' is invalid in C++ [-Wc++-compat]
 6335 | static const encpage_t euc_jp_utf8[98] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:6:24: note: previous declaration of 'euc_jp_utf8' with type 'const encpage_t[98]' {aka 'const struct encpage_s[98]'}
    6 | static const encpage_t euc_jp_utf8[98];
      |                        ^~~~~~~~~~~
eu_01_t.c:17484:24: warning: duplicate declaration of 'utf8_euc_jp' is invalid in C++ [-Wc++-compat]
17484 | static const encpage_t utf8_euc_jp[21] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: note: previous declaration of 'utf8_euc_jp' with type 'const encpage_t[21]' {aka 'const struct encpage_s[21]'}
   11 | static const encpage_t utf8_euc_jp[21];
      |                        ^~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   ji_02_t.c
ji_02_t.c:6:24: warning: uninitialized 'const utf8_jis0201_raw' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t utf8_jis0201_raw[6];
      |                        ^~~~~~~~~~~~~~~~
ji_02_t.c:98:24: warning: duplicate declaration of 'utf8_jis0201_raw' is invalid in C++ [-Wc++-compat]
   98 | static const encpage_t utf8_jis0201_raw[6] = {
      |                        ^~~~~~~~~~~~~~~~
ji_02_t.c:6:24: note: previous declaration of 'utf8_jis0201_raw' with type 'const encpage_t[6]' {aka 'const struct encpage_s[6]'}
    6 | static const encpage_t utf8_jis0201_raw[6];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   ji_03_t.c
ji_03_t.c:6:24: warning: uninitialized 'const jis0208_raw_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t jis0208_raw_utf8[78];
      |                        ^~~~~~~~~~~~~~~~
ji_03_t.c:11:24: warning: uninitialized 'const utf8_jis0208_raw' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_jis0208_raw[16];
      |                        ^~~~~~~~~~~~~~~~
ji_03_t.c:2215:24: warning: duplicate declaration of 'jis0208_raw_utf8' is invalid in C++ [-Wc++-compat]
 2215 | static const encpage_t jis0208_raw_utf8[78] = {
      |                        ^~~~~~~~~~~~~~~~
ji_03_t.c:6:24: note: previous declaration of 'jis0208_raw_utf8' with type 'const encpage_t[78]' {aka 'const struct encpage_s[78]'}
    6 | static const encpage_t jis0208_raw_utf8[78];
      |                        ^~~~~~~~~~~~~~~~
ji_03_t.c:9300:24: warning: duplicate declaration of 'utf8_jis0208_raw' is invalid in C++ [-Wc++-compat]
 9300 | static const encpage_t utf8_jis0208_raw[16] = {
      |                        ^~~~~~~~~~~~~~~~
ji_03_t.c:11:24: note: previous declaration of 'utf8_jis0208_raw' with type 'const encpage_t[16]' {aka 'const struct encpage_s[16]'}
   11 | static const encpage_t utf8_jis0208_raw[16];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   ji_04_t.c
ji_04_t.c:6:24: warning: uninitialized 'const jis0212_raw_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t jis0212_raw_utf8[69];
      |                        ^~~~~~~~~~~~~~~~
ji_04_t.c:11:24: warning: uninitialized 'const utf8_jis0212_raw' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_jis0212_raw[19];
      |                        ^~~~~~~~~~~~~~~~
ji_04_t.c:1918:24: warning: duplicate declaration of 'jis0212_raw_utf8' is invalid in C++ [-Wc++-compat]
 1918 | static const encpage_t jis0212_raw_utf8[69] = {
      |                        ^~~~~~~~~~~~~~~~
ji_04_t.c:6:24: note: previous declaration of 'jis0212_raw_utf8' with type 'const encpage_t[69]' {aka 'const struct encpage_s[69]'}
    6 | static const encpage_t jis0212_raw_utf8[69];
      |                        ^~~~~~~~~~~~~~~~
ji_04_t.c:8702:24: warning: duplicate declaration of 'utf8_jis0212_raw' is invalid in C++ [-Wc++-compat]
 8702 | static const encpage_t utf8_jis0212_raw[19] = {
      |                        ^~~~~~~~~~~~~~~~
ji_04_t.c:11:24: note: previous declaration of 'utf8_jis0212_raw' with type 'const encpage_t[19]' {aka 'const struct encpage_s[19]'}
   11 | static const encpage_t utf8_jis0212_raw[19];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   ma_05_t.c
ma_05_t.c:6:24: warning: uninitialized 'const MacJapanese_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t MacJapanese_utf8[54];
      |                        ^~~~~~~~~~~~~~~~
ma_05_t.c:11:24: warning: uninitialized 'const utf8_MacJapanese' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_MacJapanese[17];
      |                        ^~~~~~~~~~~~~~~~
ma_05_t.c:2305:24: warning: duplicate declaration of 'MacJapanese_utf8' is invalid in C++ [-Wc++-compat]
 2305 | static const encpage_t MacJapanese_utf8[54] = {
      |                        ^~~~~~~~~~~~~~~~
ma_05_t.c:6:24: note: previous declaration of 'MacJapanese_utf8' with type 'const encpage_t[54]' {aka 'const struct encpage_s[54]'}
    6 | static const encpage_t MacJapanese_utf8[54];
      |                        ^~~~~~~~~~~~~~~~
ma_05_t.c:9543:24: warning: duplicate declaration of 'utf8_MacJapanese' is invalid in C++ [-Wc++-compat]
 9543 | static const encpage_t utf8_MacJapanese[17] = {
      |                        ^~~~~~~~~~~~~~~~
ma_05_t.c:11:24: note: previous declaration of 'utf8_MacJapanese' with type 'const encpage_t[17]' {aka 'const struct encpage_s[17]'}
   11 | static const encpage_t utf8_MacJapanese[17];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.05\" -DXS_VERSION=\"2.05\" -fPIC -Wno-unused-function "-I../../.."   sh_06_t.c
sh_06_t.c:6:24: warning: uninitialized 'const shiftjis_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t shiftjis_utf8[42];
      |                        ^~~~~~~~~~~~~
sh_06_t.c:11:24: warning: uninitialized 'const utf8_shiftjis' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_shiftjis[17];
      |                        ^~~~~~~~~~~~~
sh_06_t.c:2106:24: warning: duplicate declaration of 'shiftjis_utf8' is invalid in C++ [-Wc++-compat]
 2106 | static const encpage_t shiftjis_utf8[42] = {
      |                        ^~~~~~~~~~~~~
sh_06_t.c:6:24: note: previous declaration of 'shiftjis_utf8' with type 'const encpage_t[42]' {aka 'const struct encpage_s[42]'}
    6 | static const encpage_t shiftjis_utf8[42];
      |                        ^~~~~~~~~~~~~
sh_06_t.c:9165:24: warning: duplicate declaration of 'utf8_shiftjis' is invalid in C++ [-Wc++-compat]
 9165 | static const encpage_t utf8_shiftjis[17] = {
      |                        ^~~~~~~~~~~~~
sh_06_t.c:11:24: note: previous declaration of 'utf8_shiftjis' with type 'const encpage_t[17]' {aka 'const struct encpage_s[17]'}
   11 | static const encpage_t utf8_shiftjis[17];
      |                        ^~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/JP/JP.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  JP.o cp_00_t.o eu_01_t.o ji_02_t.o ji_03_t.o ji_04_t.o ma_05_t.o sh_06_t.o  -o ../../../lib/auto/Encode/JP/JP.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/JP/JP.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/JP'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/KR'
cp KR.pm ../../../lib/Encode/KR.pm
Running Mkbootstrap for KR ()
chmod 644 "KR.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/KR/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- KR.bs ../../../lib/auto/Encode/KR/KR.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o cp_00_t.c -f cp_00_t.fnm
Reading cp949 (cp949)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o eu_01_t.c -f eu_01_t.fnm
Reading euc-kr (euc-kr)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o jo_02_t.c -f jo_02_t.fnm
Reading johab (johab)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ks_03_t.c -f ks_03_t.fnm
Reading ksc5601-raw (ksc5601-raw)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ma_04_t.c -f ma_04_t.fnm
Reading MacKorean (MacKorean)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/KR/../../../lib/ExtUtils/typemap'  KR.xs > KR.xsc
mv KR.xsc KR.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   KR.c
In file included from ../../../perl.h:7246,
                 from KR.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
KR.c: In function 'boot_Encode__KR':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KR.c:197:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  197 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KR.c:197:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  197 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   cp_00_t.c
cp_00_t.c:6:24: warning: uninitialized 'const cp949_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t cp949_utf8[129];
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: warning: uninitialized 'const utf8_cp949' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_cp949[26];
      |                        ^~~~~~~~~~
cp_00_t.c:5577:24: warning: duplicate declaration of 'cp949_utf8' is invalid in C++ [-Wc++-compat]
 5577 | static const encpage_t cp949_utf8[129] = {
      |                        ^~~~~~~~~~
cp_00_t.c:6:24: note: previous declaration of 'cp949_utf8' with type 'const encpage_t[129]' {aka 'const struct encpage_s[129]'}
    6 | static const encpage_t cp949_utf8[129];
      |                        ^~~~~~~~~~
cp_00_t.c:13922:24: warning: duplicate declaration of 'utf8_cp949' is invalid in C++ [-Wc++-compat]
13922 | static const encpage_t utf8_cp949[26] = {
      |                        ^~~~~~~~~~
cp_00_t.c:11:24: note: previous declaration of 'utf8_cp949' with type 'const encpage_t[26]' {aka 'const struct encpage_s[26]'}
   11 | static const encpage_t utf8_cp949[26];
      |                        ^~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   eu_01_t.c
eu_01_t.c:6:24: warning: uninitialized 'const euc_kr_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t euc_kr_utf8[91];
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: warning: uninitialized 'const utf8_euc_kr' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_euc_kr[24];
      |                        ^~~~~~~~~~~
eu_01_t.c:2698:24: warning: duplicate declaration of 'euc_kr_utf8' is invalid in C++ [-Wc++-compat]
 2698 | static const encpage_t euc_kr_utf8[91] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:6:24: note: previous declaration of 'euc_kr_utf8' with type 'const encpage_t[91]' {aka 'const struct encpage_s[91]'}
    6 | static const encpage_t euc_kr_utf8[91];
      |                        ^~~~~~~~~~~
eu_01_t.c:12275:24: warning: duplicate declaration of 'utf8_euc_kr' is invalid in C++ [-Wc++-compat]
12275 | static const encpage_t utf8_euc_kr[24] = {
      |                        ^~~~~~~~~~~
eu_01_t.c:11:24: note: previous declaration of 'utf8_euc_kr' with type 'const encpage_t[24]' {aka 'const struct encpage_s[24]'}
   11 | static const encpage_t utf8_euc_kr[24];
      |                        ^~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   jo_02_t.c
jo_02_t.c:6:24: warning: uninitialized 'const johab_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t johab_utf8[114];
      |                        ^~~~~~~~~~
jo_02_t.c:11:24: warning: uninitialized 'const utf8_johab' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_johab[24];
      |                        ^~~~~~~~~~
jo_02_t.c:6085:24: warning: duplicate declaration of 'johab_utf8' is invalid in C++ [-Wc++-compat]
 6085 | static const encpage_t johab_utf8[114] = {
      |                        ^~~~~~~~~~
jo_02_t.c:6:24: note: previous declaration of 'johab_utf8' with type 'const encpage_t[114]' {aka 'const struct encpage_s[114]'}
    6 | static const encpage_t johab_utf8[114];
      |                        ^~~~~~~~~~
jo_02_t.c:14237:24: warning: duplicate declaration of 'utf8_johab' is invalid in C++ [-Wc++-compat]
14237 | static const encpage_t utf8_johab[24] = {
      |                        ^~~~~~~~~~
jo_02_t.c:11:24: note: previous declaration of 'utf8_johab' with type 'const encpage_t[24]' {aka 'const struct encpage_s[24]'}
   11 | static const encpage_t utf8_johab[24];
      |                        ^~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   ks_03_t.c
ks_03_t.c:6:24: warning: uninitialized 'const ksc5601_raw_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t ksc5601_raw_utf8[90];
      |                        ^~~~~~~~~~~~~~~~
ks_03_t.c:11:24: warning: uninitialized 'const utf8_ksc5601_raw' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_ksc5601_raw[23];
      |                        ^~~~~~~~~~~~~~~~
ks_03_t.c:2585:24: warning: duplicate declaration of 'ksc5601_raw_utf8' is invalid in C++ [-Wc++-compat]
 2585 | static const encpage_t ksc5601_raw_utf8[90] = {
      |                        ^~~~~~~~~~~~~~~~
ks_03_t.c:6:24: note: previous declaration of 'ksc5601_raw_utf8' with type 'const encpage_t[90]' {aka 'const struct encpage_s[90]'}
    6 | static const encpage_t ksc5601_raw_utf8[90];
      |                        ^~~~~~~~~~~~~~~~
ks_03_t.c:12161:24: warning: duplicate declaration of 'utf8_ksc5601_raw' is invalid in C++ [-Wc++-compat]
12161 | static const encpage_t utf8_ksc5601_raw[23] = {
      |                        ^~~~~~~~~~~~~~~~
ks_03_t.c:11:24: note: previous declaration of 'utf8_ksc5601_raw' with type 'const encpage_t[23]' {aka 'const struct encpage_s[23]'}
   11 | static const encpage_t utf8_ksc5601_raw[23];
      |                        ^~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   ma_04_t.c
ma_04_t.c:6:24: warning: uninitialized 'const MacKorean_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t MacKorean_utf8[97];
      |                        ^~~~~~~~~~~~~~
ma_04_t.c:11:24: warning: uninitialized 'const utf8_MacKorean' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_MacKorean[25];
      |                        ^~~~~~~~~~~~~~
ma_04_t.c:3266:24: warning: duplicate declaration of 'MacKorean_utf8' is invalid in C++ [-Wc++-compat]
 3266 | static const encpage_t MacKorean_utf8[97] = {
      |                        ^~~~~~~~~~~~~~
ma_04_t.c:6:24: note: previous declaration of 'MacKorean_utf8' with type 'const encpage_t[97]' {aka 'const struct encpage_s[97]'}
    6 | static const encpage_t MacKorean_utf8[97];
      |                        ^~~~~~~~~~~~~~
ma_04_t.c:13068:24: warning: duplicate declaration of 'utf8_MacKorean' is invalid in C++ [-Wc++-compat]
13068 | static const encpage_t utf8_MacKorean[25] = {
      |                        ^~~~~~~~~~~~~~
ma_04_t.c:11:24: note: previous declaration of 'utf8_MacKorean' with type 'const encpage_t[25]' {aka 'const struct encpage_s[25]'}
   11 | static const encpage_t utf8_MacKorean[25];
      |                        ^~~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/KR/KR.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  KR.o cp_00_t.o eu_01_t.o jo_02_t.o ks_03_t.o ma_04_t.o  -o ../../../lib/auto/Encode/KR/KR.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/KR/KR.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/KR'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Symbol'
cp Symbol.pm ../../../lib/Encode/Symbol.pm
Running Mkbootstrap for Symbol ()
chmod 644 "Symbol.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Symbol/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Symbol.bs ../../../lib/auto/Encode/Symbol/Symbol.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -"O" -o symbol_t.c -f symbol_t.fnm
Reading AdobeSymbol (AdobeSymbol)
Reading AdobeZdingbat (AdobeZdingbat)
Reading dingbats (dingbats)
Reading MacDingbats (MacDingbats)
Reading MacSymbol (MacSymbol)
Reading symbol (symbol)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Symbol/../../../lib/ExtUtils/typemap'  Symbol.xs > Symbol.xsc
mv Symbol.xsc Symbol.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.02\" -DXS_VERSION=\"2.02\" -fPIC -Wno-unused-function "-I../../.."   Symbol.c
In file included from ../../../perl.h:7246,
                 from Symbol.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
Symbol.c: In function 'boot_Encode__Symbol':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Symbol.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Symbol.c:193:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  193 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.02\" -DXS_VERSION=\"2.02\" -fPIC -Wno-unused-function "-I../../.."   symbol_t.c
symbol_t.c:6:24: warning: uninitialized 'const utf8_AdobeSymbol' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t utf8_AdobeSymbol[18];
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:11:24: warning: uninitialized 'const utf8_AdobeZdingbat' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_AdobeZdingbat[5];
      |                        ^~~~~~~~~~~~~~~~~~
symbol_t.c:16:24: warning: uninitialized 'const utf8_MacDingbats' is invalid in C++ [-Wc++-compat]
   16 | static const encpage_t utf8_MacDingbats[3];
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:21:24: warning: uninitialized 'const utf8_MacSymbol' is invalid in C++ [-Wc++-compat]
   21 | static const encpage_t utf8_MacSymbol[19];
      |                        ^~~~~~~~~~~~~~
symbol_t.c:26:24: warning: uninitialized 'const utf8_dingbats' is invalid in C++ [-Wc++-compat]
   26 | static const encpage_t utf8_dingbats[5];
      |                        ^~~~~~~~~~~~~
symbol_t.c:31:24: warning: uninitialized 'const utf8_symbol' is invalid in C++ [-Wc++-compat]
   31 | static const encpage_t utf8_symbol[19];
      |                        ^~~~~~~~~~~
symbol_t.c:408:24: warning: duplicate declaration of 'utf8_AdobeSymbol' is invalid in C++ [-Wc++-compat]
  408 | static const encpage_t utf8_AdobeSymbol[18] = {
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:6:24: note: previous declaration of 'utf8_AdobeSymbol' with type 'const encpage_t[18]' {aka 'const struct encpage_s[18]'}
    6 | static const encpage_t utf8_AdobeSymbol[18];
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:577:24: warning: duplicate declaration of 'utf8_AdobeZdingbat' is invalid in C++ [-Wc++-compat]
  577 | static const encpage_t utf8_AdobeZdingbat[5] = {
      |                        ^~~~~~~~~~~~~~~~~~
symbol_t.c:11:24: note: previous declaration of 'utf8_AdobeZdingbat' with type 'const encpage_t[5]' {aka 'const struct encpage_s[5]'}
   11 | static const encpage_t utf8_AdobeZdingbat[5];
      |                        ^~~~~~~~~~~~~~~~~~
symbol_t.c:708:24: warning: duplicate declaration of 'utf8_MacDingbats' is invalid in C++ [-Wc++-compat]
  708 | static const encpage_t utf8_MacDingbats[3] = {
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:16:24: note: previous declaration of 'utf8_MacDingbats' with type 'const encpage_t[3]' {aka 'const struct encpage_s[3]'}
   16 | static const encpage_t utf8_MacDingbats[3];
      |                        ^~~~~~~~~~~~~~~~
symbol_t.c:998:24: warning: duplicate declaration of 'utf8_MacSymbol' is invalid in C++ [-Wc++-compat]
  998 | static const encpage_t utf8_MacSymbol[19] = {
      |                        ^~~~~~~~~~~~~~
symbol_t.c:21:24: note: previous declaration of 'utf8_MacSymbol' with type 'const encpage_t[19]' {aka 'const struct encpage_s[19]'}
   21 | static const encpage_t utf8_MacSymbol[19];
      |                        ^~~~~~~~~~~~~~
symbol_t.c:1153:24: warning: duplicate declaration of 'utf8_dingbats' is invalid in C++ [-Wc++-compat]
 1153 | static const encpage_t utf8_dingbats[5] = {
      |                        ^~~~~~~~~~~~~
symbol_t.c:26:24: note: previous declaration of 'utf8_dingbats' with type 'const encpage_t[5]' {aka 'const struct encpage_s[5]'}
   26 | static const encpage_t utf8_dingbats[5];
      |                        ^~~~~~~~~~~~~
symbol_t.c:1410:24: warning: duplicate declaration of 'utf8_symbol' is invalid in C++ [-Wc++-compat]
 1410 | static const encpage_t utf8_symbol[19] = {
      |                        ^~~~~~~~~~~
symbol_t.c:31:24: note: previous declaration of 'utf8_symbol' with type 'const encpage_t[19]' {aka 'const struct encpage_s[19]'}
   31 | static const encpage_t utf8_symbol[19];
      |                        ^~~~~~~~~~~
rm -f ../../../lib/auto/Encode/Symbol/Symbol.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Symbol.o symbol_t.o  -o ../../../lib/auto/Encode/Symbol/Symbol.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/Symbol/Symbol.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Symbol'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/TW'
cp TW.pm ../../../lib/Encode/TW.pm
Running Mkbootstrap for TW ()
chmod 644 "TW.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/TW/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- TW.bs ../../../lib/auto/Encode/TW/TW.bs 644
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o bi_00_t.c -f bi_00_t.fnm
Reading big5-eten (big5-eten)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o bi_01_t.c -f bi_01_t.fnm
Reading big5-hkscs (big5-hkscs)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o cp_02_t.c -f cp_02_t.fnm
Reading cp950 (cp950)
"../../../miniperl_top" "-I../../../lib" ../bin/enc2xs -"Q" -o ma_03_t.c -f ma_03_t.fnm
Reading MacChineseTrad (MacChineseTrad)
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -nolinenumbers -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/TW/../../../lib/ExtUtils/typemap'  TW.xs > TW.xsc
mv TW.xsc TW.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   TW.c
In file included from ../../../perl.h:7246,
                 from TW.c:11:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../../perl.h:4161:
TW.c: In function 'boot_Encode__TW':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TW.c:196:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  196 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TW.c:196:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  196 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   bi_00_t.c
bi_00_t.c:6:24: warning: uninitialized 'const big5_eten_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t big5_eten_utf8[91];
      |                        ^~~~~~~~~~~~~~
bi_00_t.c:11:24: warning: uninitialized 'const utf8_big5_eten' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_big5_eten[22];
      |                        ^~~~~~~~~~~~~~
bi_00_t.c:4396:24: warning: duplicate declaration of 'big5_eten_utf8' is invalid in C++ [-Wc++-compat]
 4396 | static const encpage_t big5_eten_utf8[91] = {
      |                        ^~~~~~~~~~~~~~
bi_00_t.c:6:24: note: previous declaration of 'big5_eten_utf8' with type 'const encpage_t[91]' {aka 'const struct encpage_s[91]'}
    6 | static const encpage_t big5_eten_utf8[91];
      |                        ^~~~~~~~~~~~~~
bi_00_t.c:11598:24: warning: duplicate declaration of 'utf8_big5_eten' is invalid in C++ [-Wc++-compat]
11598 | static const encpage_t utf8_big5_eten[22] = {
      |                        ^~~~~~~~~~~~~~
bi_00_t.c:11:24: note: previous declaration of 'utf8_big5_eten' with type 'const encpage_t[22]' {aka 'const struct encpage_s[22]'}
   11 | static const encpage_t utf8_big5_eten[22];
      |                        ^~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   bi_01_t.c
bi_01_t.c:6:24: warning: uninitialized 'const big5_hkscs_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t big5_hkscs_utf8[121];
      |                        ^~~~~~~~~~~~~~~
bi_01_t.c:11:24: warning: uninitialized 'const utf8_big5_hkscs' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_big5_hkscs[26];
      |                        ^~~~~~~~~~~~~~~
bi_01_t.c:6020:24: warning: duplicate declaration of 'big5_hkscs_utf8' is invalid in C++ [-Wc++-compat]
 6020 | static const encpage_t big5_hkscs_utf8[121] = {
      |                        ^~~~~~~~~~~~~~~
bi_01_t.c:6:24: note: previous declaration of 'big5_hkscs_utf8' with type 'const encpage_t[121]' {aka 'const struct encpage_s[121]'}
    6 | static const encpage_t big5_hkscs_utf8[121];
      |                        ^~~~~~~~~~~~~~~
bi_01_t.c:20924:24: warning: duplicate declaration of 'utf8_big5_hkscs' is invalid in C++ [-Wc++-compat]
20924 | static const encpage_t utf8_big5_hkscs[26] = {
      |                        ^~~~~~~~~~~~~~~
bi_01_t.c:11:24: note: previous declaration of 'utf8_big5_hkscs' with type 'const encpage_t[26]' {aka 'const struct encpage_s[26]'}
   11 | static const encpage_t utf8_big5_hkscs[26];
      |                        ^~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   cp_02_t.c
cp_02_t.c:6:24: warning: uninitialized 'const cp950_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t cp950_utf8[129];
      |                        ^~~~~~~~~~
cp_02_t.c:11:24: warning: uninitialized 'const utf8_cp950' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_cp950[18];
      |                        ^~~~~~~~~~
cp_02_t.c:6273:24: warning: duplicate declaration of 'cp950_utf8' is invalid in C++ [-Wc++-compat]
 6273 | static const encpage_t cp950_utf8[129] = {
      |                        ^~~~~~~~~~
cp_02_t.c:6:24: note: previous declaration of 'cp950_utf8' with type 'const encpage_t[129]' {aka 'const struct encpage_s[129]'}
    6 | static const encpage_t cp950_utf8[129];
      |                        ^~~~~~~~~~
cp_02_t.c:14265:24: warning: duplicate declaration of 'utf8_cp950' is invalid in C++ [-Wc++-compat]
14265 | static const encpage_t utf8_cp950[18] = {
      |                        ^~~~~~~~~~
cp_02_t.c:11:24: note: previous declaration of 'utf8_cp950' with type 'const encpage_t[18]' {aka 'const struct encpage_s[18]'}
   11 | static const encpage_t utf8_cp950[18];
      |                        ^~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../../.."   ma_03_t.c
ma_03_t.c:6:24: warning: uninitialized 'const MacChineseTrad_utf8' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t MacChineseTrad_utf8[93];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_03_t.c:11:24: warning: uninitialized 'const utf8_MacChineseTrad' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_MacChineseTrad[16];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_03_t.c:4277:24: warning: duplicate declaration of 'MacChineseTrad_utf8' is invalid in C++ [-Wc++-compat]
 4277 | static const encpage_t MacChineseTrad_utf8[93] = {
      |                        ^~~~~~~~~~~~~~~~~~~
ma_03_t.c:6:24: note: previous declaration of 'MacChineseTrad_utf8' with type 'const encpage_t[93]' {aka 'const struct encpage_s[93]'}
    6 | static const encpage_t MacChineseTrad_utf8[93];
      |                        ^~~~~~~~~~~~~~~~~~~
ma_03_t.c:11217:24: warning: duplicate declaration of 'utf8_MacChineseTrad' is invalid in C++ [-Wc++-compat]
11217 | static const encpage_t utf8_MacChineseTrad[16] = {
      |                        ^~~~~~~~~~~~~~~~~~~
ma_03_t.c:11:24: note: previous declaration of 'utf8_MacChineseTrad' with type 'const encpage_t[16]' {aka 'const struct encpage_s[16]'}
   11 | static const encpage_t utf8_MacChineseTrad[16];
      |                        ^~~~~~~~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/TW/TW.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  TW.o bi_00_t.o bi_01_t.o cp_02_t.o ma_03_t.o  -o ../../../lib/auto/Encode/TW/TW.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/TW/TW.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/TW'
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Unicode'
cp Unicode.pm ../../../lib/Encode/Unicode.pm
Running Mkbootstrap for Unicode ()
chmod 644 "Unicode.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Unicode/../../../miniperl_top "-I../../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Unicode.bs ../../../lib/auto/Encode/Unicode/Unicode.bs 644
"../../../miniperl_top" "-I../../../lib" "../../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Unicode/../../../lib/ExtUtils/typemap'  Unicode.xs > Unicode.xsc
mv Unicode.xsc Unicode.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c -I./Encode  -I../Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.20\" -DXS_VERSION=\"2.20\" -fPIC -Wno-unused-function "-I../../.."   Unicode.c
In file included from ../../../perl.h:7246,
                 from Unicode.xs:9:
../../../inline.h: In function 'Perl_av_count':
../../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../../perl.h:4159:
../../../inline.h: In function 'Perl_SvAMAGIC_off':
../../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../../inline.h: In function 'Perl_SvPADSTALE_off':
../../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../../inline.h: In function 'Perl_is_utf8_string_flags':
../../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isUTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../../regexp.h:21,
                 from ../../../perl.h:4160:
../../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../../perl.h:7247:
../../../sv_inline.h: In function 'Perl_newSV_type':
../../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Unicode.xs: In function 'XS_Encode__Unicode_decode':
Unicode.xs:140:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  140 |     STRLEN usize = (size > 0 ? size : 1); /* protect against rogue size<=0 */
      |                    ^
../../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
Unicode.xs:184:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  184 |         bom = enc_unpack(aTHX_ &s,e,size,endian);
      |                                     ^~~~
Unicode.xs:226:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  226 |         UV ord = enc_unpack(aTHX_ &s,e,size,endian);
      |                                        ^~~~
Unicode.xs:277:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  277 |                     lo = enc_unpack(aTHX_ &s,e,size,endian);
      |                                                ^~~~
Unicode.xs:319:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  319 |             STRLEN remaining = (e - s)/usize + 1; /* +1 to avoid the leak */
      |                                       ^
../../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Unicode.xs:340:9: note: in expansion of macro 'SvCUR_set'
  340 |         SvCUR_set(result, d - (U8 *)SvPVX(result));
      |         ^~~~~~~~~
In file included from ../../../perl.h:3003:
../../../handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
Unicode.xs:353:13: note: in expansion of macro 'Move'
  353 |             Move(s,SvPVX(str),e-s,U8);
      |             ^~~~
../../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Unicode.xs:354:13: note: in expansion of macro 'SvCUR_set'
  354 |             SvCUR_set(str,(e-s));
      |             ^~~~~~~~~
Unicode.xs: In function 'XS_Encode__Unicode_encode':
Unicode.xs:385:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  385 |     const STRLEN usize = (size > 0 ? size : 1);
      |                          ^
Unicode.xs:425:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  425 |         enc_pack(aTHX_ result,size,endian,BOM_BE);
      |                               ^~~~
Unicode.xs:437:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  437 |         UV ord = utf8n_to_uvchr_msgs(s, e-s, &len, UTF8_DISALLOW_ILLEGAL_INTERCHANGE | UTF8_WARN_ILLEGAL_INTERCHANGE, NULL, &msgs);
      |                                         ~^~
Unicode.xs:469:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  469 |                     enc_pack(aTHX_ result,size,endian,FBCHAR);
      |                                           ^~~~
Unicode.xs:471:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  471 |                     enc_pack(aTHX_ result,size,endian,FBCHAR);
      |                                           ^~~~
Unicode.xs:475:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  475 |                     enc_pack(aTHX_ result,size,endian,hi);
      |                                           ^~~~
Unicode.xs:476:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  476 |                     enc_pack(aTHX_ result,size,endian,lo);
      |                                           ^~~~
Unicode.xs:481:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  481 |                 enc_pack(aTHX_ result,size,endian,FBCHAR);
      |                                       ^~~~
Unicode.xs:485:35: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  485 |             enc_pack(aTHX_ result,size,endian,ord);
      |                                   ^~~~
../../../handy.h:2790:134: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
Unicode.xs:502:13: note: in expansion of macro 'Move'
  502 |             Move(s,SvPVX(utf8),e-s,U8);
      |             ^~~~
../../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Unicode.xs:503:13: note: in expansion of macro 'SvCUR_set'
  503 |             SvCUR_set(utf8,(e-s));
      |             ^~~~~~~~~
In file included from ../../../perl.h:4161:
Unicode.c: In function 'boot_Encode__Unicode':
../../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unicode.c:714:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  714 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unicode.c:714:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  714 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../../sv_inline.h: At top level:
../../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../../lib/auto/Encode/Unicode/Unicode.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Unicode.o  -o ../../../lib/auto/Encode/Unicode/Unicode.so  \
      \
  
chmod 755 ../../../lib/auto/Encode/Unicode/Unicode.so
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/Unicode'
Running Mkbootstrap for Encode ()
chmod 644 "Encode.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Encode.bs ../../lib/auto/Encode/Encode.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/../../lib/ExtUtils/typemap'  Encode.xs > Encode.xsc
mv Encode.xsc Encode.c
"../../miniperl_top" "-I../../lib" bin/enc2xs -"Q" -"O" -o def_t.c -f def_t.fnm
Reading iso-8859-1 (iso-8859-1)
Reading ascii (ascii)
Reading cp1252 (cp1252)
Reading ascii-ctrl (ascii-ctrl)
Reading null (null)
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.17\" -DXS_VERSION=\"3.17\" -fPIC -Wno-unused-function "-I../.."   Encode.c
In file included from ../../perl.h:7246,
                 from Encode.xs:8:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Encode.xs: In function 'utf8_safe_downgrade':
../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
Encode.xs: In function 'encode_method':
Encode.xs:271:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  271 |             ddone += dlen + enc->replen;
      |                           ^
In file included from ../../perl.h:5841:
Encode.xs:272:48: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  272 |             sv_catpvn(dst, (char*)enc->rep, enc->replen);
      |                                             ~~~^~~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Encode.xs:272:13: note: in expansion of macro 'sv_catpvn'
  272 |             sv_catpvn(dst, (char*)enc->rep, enc->replen);
      |             ^~~~~~~~~
Encode.xs: In function 'process_utf8':
Encode.xs:416:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  416 |     dlen = (s && e && s < e) ? e-s+1 : 1;
      |            ^
Encode.xs:426:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  426 |         bool valid = is_utf8_string_loc_flags(s, e - s, &e_or_where_failed, flags);
      |                                                  ~~^~~
../../inline.h:1965:56: note: in definition of macro 'is_utf8_string_loc_flags'
 1965 |                         is_utf8_string_loclen_flags(s, len, ep, 0, flags)
      |                                                        ^~~
Encode.xs:427:22: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  427 |         STRLEN len = e_or_where_failed - s;
      |                      ^~~~~~~~~~~~~~~~~
Encode.xs:448:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  448 |         uv = utf8n_to_uvchr(s, e - s, &ulen, UTF8_ALLOW_ANY);
      |                                ~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
Encode.xs:448:14: note: in expansion of macro 'utf8n_to_uvchr'
  448 |         uv = utf8n_to_uvchr(s, e - s, &ulen, UTF8_ALLOW_ANY);
      |              ^~~~~~~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Encode.xs:507:13: note: in expansion of macro 'SvCUR_set'
  507 |             SvCUR_set(dst, d-(U8 *)SvPVX(dst));
      |             ^~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Encode.xs:516:17: note: in expansion of macro 'SvCUR_set'
  516 |                 SvCUR_set(dst, d-(U8 *)SvPVX(dst));
      |                 ^~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Encode.xs:524:5: note: in expansion of macro 'SvCUR_set'
  524 |     SvCUR_set(dst, d-(U8 *)SvPVX(dst));
      |     ^~~~~~~~~
Encode.xs: In function 'XS_Encode__utf8_decode':
Encode.xs:667:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  667 |         slen = e-s;
      |                ^
Encode.xs: In function 'XS_Encode__utf8_encode':
Encode.xs:706:39: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  706 |             sv_setpvn(dst,(char *)s,(e-s));
      |                                     ~~^~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Encode.xs:728:9: note: in expansion of macro 'SvCUR_set'
  728 |         SvCUR_set(dst, d- (U8 *)SvPVX(dst));
      |         ^~~~~~~~~
Encode.xs:734:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  734 |         slen = e-s;
      |                ^
../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
Encode.xs: In function 'XS_Encode__utf8_off':
../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
In file included from ../../perl.h:4161:
Encode.c: In function 'boot_Encode':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Encode.c:1587:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1587 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Encode.c:1587:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1587 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.17\" -DXS_VERSION=\"3.17\" -fPIC -Wno-unused-function "-I../.."   def_t.c
def_t.c:6:24: warning: uninitialized 'const utf8_cp1252' is invalid in C++ [-Wc++-compat]
    6 | static const encpage_t utf8_cp1252[8];
      |                        ^~~~~~~~~~~
def_t.c:11:24: warning: uninitialized 'const utf8_iso_8859_1' is invalid in C++ [-Wc++-compat]
   11 | static const encpage_t utf8_iso_8859_1[4];
      |                        ^~~~~~~~~~~~~~~
def_t.c:198:24: warning: duplicate declaration of 'utf8_cp1252' is invalid in C++ [-Wc++-compat]
  198 | static const encpage_t utf8_cp1252[8] = {
      |                        ^~~~~~~~~~~
def_t.c:6:24: note: previous declaration of 'utf8_cp1252' with type 'const encpage_t[8]' {aka 'const struct encpage_s[8]'}
    6 | static const encpage_t utf8_cp1252[8];
      |                        ^~~~~~~~~~~
def_t.c:236:24: warning: duplicate declaration of 'utf8_iso_8859_1' is invalid in C++ [-Wc++-compat]
  236 | static const encpage_t utf8_iso_8859_1[4] = {
      |                        ^~~~~~~~~~~~~~~
def_t.c:11:24: note: previous declaration of 'utf8_iso_8859_1' with type 'const encpage_t[4]' {aka 'const struct encpage_s[4]'}
   11 | static const encpage_t utf8_iso_8859_1[4];
      |                        ^~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I./Encode -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.17\" -DXS_VERSION=\"3.17\" -fPIC -Wno-unused-function "-I../.."   encengine.c
In file included from ../../perl.h:7246,
                 from encengine.c:91:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
encengine.c: In function 'do_encode':
encengine.c:157:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  157 |     *slen = last - src;
      |             ^~~~
encengine.c:158:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  158 |     *dout = d - dst;
      |             ^
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Encode/Encode.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Encode.o def_t.o encengine.o  -o ../../lib/auto/Encode/Encode.so  \
      \
  
chmod 755 ../../lib/auto/Encode/Encode.so
cp bin/enc2xs blib/script/enc2xs
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/enc2xs
cp bin/encguess blib/script/encguess
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/encguess
cp bin/piconv blib/script/piconv
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode/../../miniperl_top "-I../../lib" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/piconv
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Encode'
./miniperl_top make_ext_Makefile.pl cpan/Filter-Util-Call/Makefile.PL
Creating cpan/Filter-Util-Call/Makefile.PL for Filter::Util::Call
cd cpan/Filter-Util-Call/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Filter::Util::Call
make -C cpan/Filter-Util-Call/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Filter-Util-Call'
cp Call.pm ../../lib/Filter/Util/Call.pm
cp filter-util.pl ../../lib/Filter/Util/filter-util.pl
Running Mkbootstrap for Call ()
chmod 644 "Call.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Filter-Util-Call/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Call.bs ../../lib/auto/Filter/Util/Call/Call.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Filter-Util-Call/../../lib/ExtUtils/typemap'  Call.xs > Call.xsc
mv Call.xsc Call.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.60\" -DXS_VERSION=\"1.60\" -fPIC -Wno-unused-function "-I../.."   Call.c
In file included from ../../perl.h:7246,
                 from Call.xs:17:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Call.xs: In function 'filter_call':
../../sv.h:1319:23: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
Call.xs:70:18: note: in expansion of macro 'SvCUR'
   70 |         if ((n = SvCUR(my_sv))) {
      |                  ^~~~~
In file included from ../../perl.h:5841:
Call.xs:81:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   81 |                 sv_catpvn(buf_sv, out_ptr, maxlen > n ? n : maxlen );
      |                                            ~~~~~~~~~~~~~~~^~~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Call.xs:81:17: note: in expansion of macro 'sv_catpvn'
   81 |                 sv_catpvn(buf_sv, out_ptr, maxlen > n ? n : maxlen );
      |                 ^~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Call.xs:88:21: note: in expansion of macro 'SvCUR_set'
   88 |                     SvCUR_set(my_sv, n - maxlen) ;
      |                     ^~~~~~~~~
../../sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
../../sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
In file included from ../../perl.h:4161:
../../util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
Call.xs:94:26: note: in expansion of macro 'ninstr'
   94 |                 if ((p = ninstr(out_ptr, out_ptr + n, nl, nl + 1))) {
      |                          ^~~~~~
Call.xs:96:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   96 |                     sv_catpvn(buf_sv, out_ptr, p - out_ptr + 1);
      |                                                ~~~~~~~~~~~~^~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Call.xs:96:21: note: in expansion of macro 'sv_catpvn'
   96 |                     sv_catpvn(buf_sv, out_ptr, p - out_ptr + 1);
      |                     ^~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Call.xs:100:21: note: in expansion of macro 'SvCUR_set'
  100 |                     SvCUR_set(my_sv, n) ;
      |                     ^~~~~~~~~
../../sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
../../sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
Call.xs:108:48: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  108 |                     sv_catpvn(buf_sv, out_ptr, n) ;
      |                                                ^
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Call.xs:108:21: note: in expansion of macro 'sv_catpvn'
  108 |                     sv_catpvn(buf_sv, out_ptr, n) ;
      |                     ^~~~~~~~~
Call.c: In function 'boot_Filter__Util__Call':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Call.c:471:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  471 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Call.c:471:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  471 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Filter/Util/Call/Call.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Call.o  -o ../../lib/auto/Filter/Util/Call/Call.so  \
      \
  
chmod 755 ../../lib/auto/Filter/Util/Call/Call.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Filter-Util-Call'
cd cpan/IPC-SysV/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Setting license tag...
Generating a Unix-style Makefile
Writing Makefile for IPC::SysV
cp -f dist/Devel-PPPort/ppport.h cpan/IPC-SysV/ppport.h
make -C cpan/IPC-SysV/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV'
cp lib/IPC/Msg.pm ../../lib/IPC/Msg.pm
cp lib/IPC/SysV.pm ../../lib/IPC/SysV.pm
cp lib/IPC/SharedMem.pm ../../lib/IPC/SharedMem.pm
cp lib/IPC/Semaphore.pm ../../lib/IPC/Semaphore.pm
Running Mkbootstrap for SysV ()
chmod 644 "SysV.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- SysV.bs ../../lib/auto/IPC/SysV/SysV.bs 644
make[3]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV'
"../../miniperl_top" -I../../lib -I../../lib regen.pl
Writing const-xs.inc
Writing const-c.inc
make[3]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV'
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV/typemap'  SysV.xs > SysV.xsc
mv SysV.xsc SysV.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.09\" -DXS_VERSION=\"2.09\" -fPIC -Wno-unused-function "-I../.."  -DNO_PPPORT_H SysV.c
In file included from ../../perl.h:7246,
                 from SysV.xs:12:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
SysV.xs: In function 'XS_IPC__Msg__stat_pack':
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:135:5: note: in expansion of macro 'AV_FETCH_IV'
  135 |     AV_FETCH_IV(ds.msg_perm.uid , list,  0);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:136:5: note: in expansion of macro 'AV_FETCH_IV'
  136 |     AV_FETCH_IV(ds.msg_perm.gid , list,  1);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:137:5: note: in expansion of macro 'AV_FETCH_IV'
  137 |     AV_FETCH_IV(ds.msg_perm.cuid, list,  2);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:138:5: note: in expansion of macro 'AV_FETCH_IV'
  138 |     AV_FETCH_IV(ds.msg_perm.cgid, list,  3);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:139:5: note: in expansion of macro 'AV_FETCH_IV'
  139 |     AV_FETCH_IV(ds.msg_perm.mode, list,  4);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to 'msgqnum_t' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:140:5: note: in expansion of macro 'AV_FETCH_IV'
  140 |     AV_FETCH_IV(ds.msg_qnum     , list,  5);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to 'msglen_t' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:141:5: note: in expansion of macro 'AV_FETCH_IV'
  141 |     AV_FETCH_IV(ds.msg_qbytes   , list,  6);
      |     ^~~~~~~~~~~
SysV.xs: In function 'XS_IPC__Msg__stat_unpack':
SysV.xs:165:35: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  165 |     assert_data_length(s_pkg_msg, len, sizeof(*data));
      |                                   ^~~
In file included from ../../perl.h:5841:
SysV.xs:166:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  166 |     AV_STORE_IV(data->msg_perm.uid , list,  0);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:166:5: note: in expansion of macro 'AV_STORE_IV'
  166 |     AV_STORE_IV(data->msg_perm.uid , list,  0);
      |     ^~~~~~~~~~~
SysV.xs:167:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  167 |     AV_STORE_IV(data->msg_perm.gid , list,  1);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:167:5: note: in expansion of macro 'AV_STORE_IV'
  167 |     AV_STORE_IV(data->msg_perm.gid , list,  1);
      |     ^~~~~~~~~~~
SysV.xs:168:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  168 |     AV_STORE_IV(data->msg_perm.cuid, list,  2);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:168:5: note: in expansion of macro 'AV_STORE_IV'
  168 |     AV_STORE_IV(data->msg_perm.cuid, list,  2);
      |     ^~~~~~~~~~~
SysV.xs:169:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  169 |     AV_STORE_IV(data->msg_perm.cgid, list,  3);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:169:5: note: in expansion of macro 'AV_STORE_IV'
  169 |     AV_STORE_IV(data->msg_perm.cgid, list,  3);
      |     ^~~~~~~~~~~
SysV.xs:170:31: warning: conversion to 'IV' {aka 'const long int'} from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  170 |     AV_STORE_IV(data->msg_perm.mode, list,  4);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:170:5: note: in expansion of macro 'AV_STORE_IV'
  170 |     AV_STORE_IV(data->msg_perm.mode, list,  4);
      |     ^~~~~~~~~~~
SysV.xs:171:21: warning: conversion to 'IV' {aka 'const long int'} from 'msgqnum_t' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  171 |     AV_STORE_IV(data->msg_qnum     , list,  5);
      |                 ~~~~^~~~~~~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:171:5: note: in expansion of macro 'AV_STORE_IV'
  171 |     AV_STORE_IV(data->msg_qnum     , list,  5);
      |     ^~~~~~~~~~~
SysV.xs:172:21: warning: conversion to 'IV' {aka 'const long int'} from 'msglen_t' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  172 |     AV_STORE_IV(data->msg_qbytes   , list,  6);
      |                 ~~~~^~~~~~~~~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:172:5: note: in expansion of macro 'AV_STORE_IV'
  172 |     AV_STORE_IV(data->msg_qbytes   , list,  6);
      |     ^~~~~~~~~~~
SysV.xs: In function 'XS_IPC__Semaphore__stat_pack':
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:198:5: note: in expansion of macro 'AV_FETCH_IV'
  198 |     AV_FETCH_IV(ds.sem_perm.uid , list, 0);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:199:5: note: in expansion of macro 'AV_FETCH_IV'
  199 |     AV_FETCH_IV(ds.sem_perm.gid , list, 1);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:200:5: note: in expansion of macro 'AV_FETCH_IV'
  200 |     AV_FETCH_IV(ds.sem_perm.cuid, list, 2);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:201:5: note: in expansion of macro 'AV_FETCH_IV'
  201 |     AV_FETCH_IV(ds.sem_perm.cgid, list, 3);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:202:5: note: in expansion of macro 'AV_FETCH_IV'
  202 |     AV_FETCH_IV(ds.sem_perm.mode, list, 4);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__syscall_ulong_t' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:205:5: note: in expansion of macro 'AV_FETCH_IV'
  205 |     AV_FETCH_IV(ds.sem_nsems    , list, 7);
      |     ^~~~~~~~~~~
SysV.xs: In function 'XS_IPC__Semaphore__stat_unpack':
SysV.xs:224:35: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  224 |     assert_data_length(s_pkg_sem, len, sizeof(*data));
      |                                   ^~~
SysV.xs:225:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  225 |     AV_STORE_IV(data->sem_perm.uid , list, 0);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:225:5: note: in expansion of macro 'AV_STORE_IV'
  225 |     AV_STORE_IV(data->sem_perm.uid , list, 0);
      |     ^~~~~~~~~~~
SysV.xs:226:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  226 |     AV_STORE_IV(data->sem_perm.gid , list, 1);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:226:5: note: in expansion of macro 'AV_STORE_IV'
  226 |     AV_STORE_IV(data->sem_perm.gid , list, 1);
      |     ^~~~~~~~~~~
SysV.xs:227:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  227 |     AV_STORE_IV(data->sem_perm.cuid, list, 2);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:227:5: note: in expansion of macro 'AV_STORE_IV'
  227 |     AV_STORE_IV(data->sem_perm.cuid, list, 2);
      |     ^~~~~~~~~~~
SysV.xs:228:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  228 |     AV_STORE_IV(data->sem_perm.cgid, list, 3);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:228:5: note: in expansion of macro 'AV_STORE_IV'
  228 |     AV_STORE_IV(data->sem_perm.cgid, list, 3);
      |     ^~~~~~~~~~~
SysV.xs:229:31: warning: conversion to 'IV' {aka 'const long int'} from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  229 |     AV_STORE_IV(data->sem_perm.mode, list, 4);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:229:5: note: in expansion of macro 'AV_STORE_IV'
  229 |     AV_STORE_IV(data->sem_perm.mode, list, 4);
      |     ^~~~~~~~~~~
SysV.xs:232:21: warning: conversion to 'IV' {aka 'const long int'} from '__syscall_ulong_t' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  232 |     AV_STORE_IV(data->sem_nsems    , list, 7);
      |                 ~~~~^~~~~~~~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:232:5: note: in expansion of macro 'AV_STORE_IV'
  232 |     AV_STORE_IV(data->sem_nsems    , list, 7);
      |     ^~~~~~~~~~~
SysV.xs: In function 'XS_IPC__SharedMem__stat_pack':
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:253:5: note: in expansion of macro 'AV_FETCH_IV'
  253 |     AV_FETCH_IV(ds.shm_perm.uid , list,  0);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:254:5: note: in expansion of macro 'AV_FETCH_IV'
  254 |     AV_FETCH_IV(ds.shm_perm.gid , list,  1);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__uid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:255:5: note: in expansion of macro 'AV_FETCH_IV'
  255 |     AV_FETCH_IV(ds.shm_perm.cuid, list,  2);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__gid_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:256:5: note: in expansion of macro 'AV_FETCH_IV'
  256 |     AV_FETCH_IV(ds.shm_perm.cgid, list,  3);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to '__mode_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:257:5: note: in expansion of macro 'AV_FETCH_IV'
  257 |     AV_FETCH_IV(ds.shm_perm.mode, list,  4);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to 'size_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:258:5: note: in expansion of macro 'AV_FETCH_IV'
  258 |     AV_FETCH_IV(ds.shm_segsz    , list,  5);
      |     ^~~~~~~~~~~
../../sv.h:1821:18: warning: conversion to 'shmatt_t' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                  ^
SysV.xs:76:21: note: in expansion of macro 'SvIV'
   76 |             ident = SvIV(*svp);                               \
      |                     ^~~~
SysV.xs:261:5: note: in expansion of macro 'AV_FETCH_IV'
  261 |     AV_FETCH_IV(ds.shm_nattch   , list,  8);
      |     ^~~~~~~~~~~
SysV.xs: In function 'XS_IPC__SharedMem__stat_unpack':
SysV.xs:283:35: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  283 |     assert_data_length(s_pkg_shm, len, sizeof(*data));
      |                                   ^~~
SysV.xs:284:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  284 |     AV_STORE_IV(data->shm_perm.uid , list,  0);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:284:5: note: in expansion of macro 'AV_STORE_IV'
  284 |     AV_STORE_IV(data->shm_perm.uid , list,  0);
      |     ^~~~~~~~~~~
SysV.xs:285:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  285 |     AV_STORE_IV(data->shm_perm.gid , list,  1);
      |                 ~~~~~~~~~~~~~~^~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:285:5: note: in expansion of macro 'AV_STORE_IV'
  285 |     AV_STORE_IV(data->shm_perm.gid , list,  1);
      |     ^~~~~~~~~~~
SysV.xs:286:31: warning: conversion to 'IV' {aka 'const long int'} from '__uid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  286 |     AV_STORE_IV(data->shm_perm.cuid, list,  2);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:286:5: note: in expansion of macro 'AV_STORE_IV'
  286 |     AV_STORE_IV(data->shm_perm.cuid, list,  2);
      |     ^~~~~~~~~~~
SysV.xs:287:31: warning: conversion to 'IV' {aka 'const long int'} from '__gid_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  287 |     AV_STORE_IV(data->shm_perm.cgid, list,  3);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:287:5: note: in expansion of macro 'AV_STORE_IV'
  287 |     AV_STORE_IV(data->shm_perm.cgid, list,  3);
      |     ^~~~~~~~~~~
SysV.xs:288:31: warning: conversion to 'IV' {aka 'const long int'} from '__mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  288 |     AV_STORE_IV(data->shm_perm.mode, list,  4);
      |                 ~~~~~~~~~~~~~~^~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:288:5: note: in expansion of macro 'AV_STORE_IV'
  288 |     AV_STORE_IV(data->shm_perm.mode, list,  4);
      |     ^~~~~~~~~~~
SysV.xs:289:21: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  289 |     AV_STORE_IV(data->shm_segsz    , list,  5);
      |                 ~~~~^~~~~~~~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:289:5: note: in expansion of macro 'AV_STORE_IV'
  289 |     AV_STORE_IV(data->shm_segsz    , list,  5);
      |     ^~~~~~~~~~~
SysV.xs:292:21: warning: conversion to 'IV' {aka 'const long int'} from 'shmatt_t' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  292 |     AV_STORE_IV(data->shm_nattch   , list,  8);
      |                 ~~~~^~~~~~~~~~~~
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
SysV.xs:80:35: note: in expansion of macro 'newSViv'
   80 |           av_store((av), (index), newSViv(ident))
      |                                   ^~~~~~~
SysV.xs:292:5: note: in expansion of macro 'AV_STORE_IV'
  292 |     AV_STORE_IV(data->shm_nattch   , list,  8);
      |     ^~~~~~~~~~~
In file included from ../../perl.h:4161:
SysV.c: In function 'boot_IPC__SysV':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SysV.c:837:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  837 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SysV.c:837:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  837 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/IPC/SysV/SysV.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  SysV.o  -o ../../lib/auto/IPC/SysV/SysV.so  \
      \
  
chmod 755 ../../lib/auto/IPC/SysV/SysV.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/IPC-SysV'
./miniperl_top make_ext_Makefile.pl cpan/Math-BigInt-FastCalc/Makefile.PL
Creating cpan/Math-BigInt-FastCalc/Makefile.PL for Math::BigInt::FastCalc
cd cpan/Math-BigInt-FastCalc/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Math::BigInt::FastCalc
make -C cpan/Math-BigInt-FastCalc/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt-FastCalc'
cp lib/Math/BigInt/FastCalc.pm ../../lib/Math/BigInt/FastCalc.pm
Running Mkbootstrap for FastCalc ()
chmod 644 "FastCalc.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt-FastCalc/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- FastCalc.bs ../../lib/auto/Math/BigInt/FastCalc/FastCalc.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt-FastCalc/../../lib/ExtUtils/typemap'  FastCalc.xs > FastCalc.xsc
mv FastCalc.xsc FastCalc.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.5012\" -DXS_VERSION=\"0.5012\" -fPIC -Wno-unused-function "-I../.."   FastCalc.c
In file included from ../../perl.h:7246,
                 from FastCalc.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
FastCalc.xs: In function 'XS_Math__BigInt__FastCalc__len':
FastCalc.xs:338:9: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
  338 |     len += (IV) XS_BASE_LEN * elems;
      |         ^~
In file included from ../../perl.h:5841:
FastCalc.xs:339:32: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  339 |     ST(0) = sv_2mortal(newSViv(len));
      |                                ^~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
FastCalc.xs:339:24: note: in expansion of macro 'newSViv'
  339 |     ST(0) = sv_2mortal(newSViv(len));
      |                        ^~~~~~~
In file included from ../../perl.h:4161:
FastCalc.c: In function 'boot_Math__BigInt__FastCalc':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FastCalc.c:634:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  634 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FastCalc.c:634:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  634 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Math/BigInt/FastCalc/FastCalc.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  FastCalc.o  -o ../../lib/auto/Math/BigInt/FastCalc/FastCalc.so  \
      \
  
chmod 755 ../../lib/auto/Math/BigInt/FastCalc/FastCalc.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Math-BigInt-FastCalc'
./miniperl_top make_ext_Makefile.pl cpan/MIME-Base64/Makefile.PL
Creating cpan/MIME-Base64/Makefile.PL for MIME::Base64
cd cpan/MIME-Base64/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for MIME::Base64
make -C cpan/MIME-Base64/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/MIME-Base64'
cp lib/MIME/QuotedPrint.pm ../../lib/MIME/QuotedPrint.pm
cp lib/MIME/Base64.pm ../../lib/MIME/Base64.pm
Running Mkbootstrap for Base64 ()
chmod 644 "Base64.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/MIME-Base64/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Base64.bs ../../lib/auto/MIME/Base64/Base64.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/MIME-Base64/../../lib/ExtUtils/typemap'  Base64.xs > Base64.xsc
mv Base64.xsc Base64.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.16\" -DXS_VERSION=\"3.16\" -fPIC -Wno-unused-function "-I../.."   Base64.c
In file included from ../../perl.h:7246,
                 from Base64.xs:30:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Base64.xs: In function 'XS_MIME__Base64_encode_base64':
Base64.xs:123:16: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  123 |         rlen = (len+2) / 3 * 4;  /* encoded bytes */
      |                ^
Base64.xs: In function 'XS_MIME__Base64_decode_base64':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Base64.xs:231:9: note: in expansion of macro 'SvCUR_set'
  231 |         SvCUR_set(RETVAL, r - SvPVX(RETVAL));
      |         ^~~~~~~~~
Base64.xs: In function 'XS_MIME__Base64_encoded_base64_length':
../../sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
Base64.xs:252:15: note: in expansion of macro 'SvCUR'
  252 |         len = SvCUR(sv);
      |               ^~~~~
Base64.xs:266:51: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  266 |             RETVAL += ((RETVAL-1) / MAX_LINE + 1) * eollen;
      |                                                   ^
Base64.xs:266:20: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  266 |             RETVAL += ((RETVAL-1) / MAX_LINE + 1) * eollen;
      |                    ^~
Base64.xs:266:23: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  266 |             RETVAL += ((RETVAL-1) / MAX_LINE + 1) * eollen;
      |                       ^
Base64.xs: In function 'XS_MIME__QuotedPrint_encode_qp':
Base64.xs:364:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  364 |             p_len = p - p_beg;
      |                     ^
Base64.xs:414:64: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  414 |                 STRLEN expected_len = (SvCUR(RETVAL) * sv_len) / (p - beg);
      |                                                                ^
Base64.xs: In function 'XS_MIME__QuotedPrint_decode_qp':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Base64.xs:500:9: note: in expansion of macro 'SvCUR_set'
  500 |         SvCUR_set(RETVAL, r - SvPVX(RETVAL));
      |         ^~~~~~~~~
In file included from ../../perl.h:4161:
Base64.c: In function 'boot_MIME__Base64':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Base64.c:730:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  730 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Base64.c:730:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  730 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/MIME/Base64/Base64.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Base64.o  -o ../../lib/auto/MIME/Base64/Base64.so  \
      \
  
chmod 755 ../../lib/auto/MIME/Base64/Base64.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/MIME-Base64'
cd cpan/Scalar-List-Utils/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for List::Util
make -C cpan/Scalar-List-Utils/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Scalar-List-Utils'
cp lib/List/Util/XS.pm ../../lib/List/Util/XS.pm
cp lib/Sub/Util.pm ../../lib/Sub/Util.pm
cp lib/Scalar/Util.pm ../../lib/Scalar/Util.pm
cp lib/List/Util.pm ../../lib/List/Util.pm
Running Mkbootstrap for Util ()
chmod 644 "Util.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Scalar-List-Utils/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Util.bs ../../lib/auto/List/Util/Util.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Scalar-List-Utils/../../lib/ExtUtils/typemap'  ListUtil.xs > ListUtil.xsc
mv ListUtil.xsc ListUtil.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.62\" -DXS_VERSION=\"1.62\" -fPIC -Wno-unused-function "-I../.."  -DPERL_EXT ListUtil.c
In file included from ../../perl.h:7246,
                 from ListUtil.xs:8:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
ListUtil.xs: In function 'XS_List__Util_first':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
ListUtil.xs: In function 'XS_List__Util_any':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from ../../perl.h:3003:
ListUtil.xs: In function 'XS_List__Util_unpairs':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
ListUtil.xs:855:5: note: in expansion of macro 'Newx'
  855 |     Newx(args_copy, items, SV *);
      |     ^~~~
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
ListUtil.xs:858:5: note: in expansion of macro 'Copy'
  858 |     Copy(&ST(0), args_copy, items, SV *);
      |     ^~~~
In file included from ../../perl.h:4170:
ListUtil.xs: In function 'XS_List__Util_pairmap':
../../av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
../../av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
ListUtil.xs:1223:17: note: in expansion of macro 'Newx'
 1223 |                 Newx(args_copy, n_args, SV *);
      |                 ^~~~
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
ListUtil.xs:1226:17: note: in expansion of macro 'Copy'
 1226 |                 Copy(&ST(argi), args_copy, n_args, SV *);
      |                 ^~~~
ListUtil.xs: In function 'XS_List__Util_sample':
ListUtil.xs:1279:16: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 1279 |     IV count = items ? SvUV(ST(0)) : 0;
      |                ^~~~~
In file included from ../../perl.h:5841:
ListUtil.xs: In function 'XS_List__Util_uniq':
ListUtil.xs:1389:35: warning: conversion from 'NV' {aka 'double'} to 'UV' {aka 'const long unsigned int'} may change value [-Wfloat-conversion]
 1389 |                     arg = newSVuv(nv);
      |                                   ^~
../../embed.h:405:52: note: in definition of macro 'newSVuv'
  405 | #define newSVuv(a)              Perl_newSVuv(aTHX_ a)
      |                                                    ^
ListUtil.xs:1392:35: warning: conversion from 'NV' {aka 'double'} to 'IV' {aka 'const long int'} may change value [-Wfloat-conversion]
 1392 |                     arg = newSViv(nv);
      |                                   ^~
../../embed.h:393:52: note: in definition of macro 'newSViv'
  393 | #define newSViv(a)              Perl_newSViv(aTHX_ a)
      |                                                    ^
ListUtil.xs: In function 'XS_List__Util_zip':
ListUtil.xs:1587:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1587 |     Size_t nlists = items; /* number of lists */
      |                     ^~~~~
In file included from ListUtil.xs:9:
../../XSUB.h:117:34: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
ListUtil.xs:1604:19: note: in expansion of macro 'ST'
 1604 |         SV *arg = ST(i);
      |                   ^~
ListUtil.xs:1655:28: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1655 |             av_extend(ret, nlists);
      |                            ^~~~~~
../../embed.h:61:56: note: in definition of macro 'av_extend'
   61 | #define av_extend(a,b)          Perl_av_extend(aTHX_ a,b)
      |                                                        ^
../../XSUB.h:326:29: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  326 |         const IV tmpXSoff = (off);                      \
      |                             ^
ListUtil.xs:1668:9: note: in expansion of macro 'XSRETURN'
 1668 |         XSRETURN(len);
      |         ^~~~~~~~
In file included from ../../perl.h:5782:
ListUtil.c: In function 'XS_Scalar__Util_refaddr':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
ListUtil.c:2150:9: note: in expansion of macro 'PUSHu'
 2150 |         PUSHu((UV)RETVAL);
      |         ^~~~~
ListUtil.xs: In function 'XS_Sub__Util_set_prototype':
../../sv.h:962:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-17409' to '4294949887' [-Wsign-conversion]
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
../../sv.h:962:46: note: in definition of macro 'SvPOK_off'
  962 | #define SvPOK_off(sv)           (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
      |                                              ^~
ListUtil.xs: In function 'XS_Sub__Util_set_subname':
ListUtil.xs:1988:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1988 |             STRLEN length = end - nameptr + quotes_seen - (*end == '\'' ? 1 : 0);
      |                             ^~~
ListUtil.xs:2005:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2005 |             stash = gv_stashpvn(nameptr, end - nameptr, GV_ADD | utf8flag);
      |                                          ~~~~^~~~~~~~~
../../embed.h:243:58: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                          ^
ListUtil.xs:2007:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2007 |         namelen -= begin - nameptr;
      |                 ^~
../../hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
ListUtil.xs:2019:44: note: in expansion of macro 'newSVpvn_flags'
 2019 |             SV* old_full_name = sv_2mortal(newSVpvn_flags(HvNAME(oldhv), HvNAMELEN_get(oldhv), HvNAMEUTF8(oldhv) ? SVf_UTF8 : 0));
      |                                            ^~~~~~~~~~~~~~
ListUtil.xs:2019:74: note: in expansion of macro 'HvNAMELEN_get'
 2019 |             SV* old_full_name = sv_2mortal(newSVpvn_flags(HvNAME(oldhv), HvNAMELEN_get(oldhv), HvNAMEUTF8(oldhv) ? SVf_UTF8 : 0));
      |                                                                          ^~~~~~~~~~~~~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
../../gv.h:67:33: note: in expansion of macro 'HEK_LEN'
   67 | #  define GvNAMELEN_get(gv)     HEK_LEN(GvNAME_HEK(gv))
      |                                 ^~~~~~~
../../gv.h:72:25: note: in expansion of macro 'GvNAMELEN_get'
   72 | #define GvNAMELEN(gv)   GvNAMELEN_get(gv)
      |                         ^~~~~~~~~~~~~
ListUtil.xs:2021:59: note: in expansion of macro 'GvNAMELEN'
 2021 |             sv_catpvn_flags(old_full_name, GvNAME(oldgv), GvNAMELEN(oldgv), GvNAMEUTF8(oldgv) ? SV_CATUTF8 : SV_CATBYTES);
      |                                                           ^~~~~~~~~
../../hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
ListUtil.xs:2028:44: note: in expansion of macro 'newSVpvn_flags'
 2028 |             SV* new_full_name = sv_2mortal(newSVpvn_flags(HvNAME(stash), HvNAMELEN_get(stash), HvNAMEUTF8(stash) ? SVf_UTF8 : 0));
      |                                            ^~~~~~~~~~~~~~
ListUtil.xs:2028:74: note: in expansion of macro 'HvNAMELEN_get'
 2028 |             SV* new_full_name = sv_2mortal(newSVpvn_flags(HvNAME(stash), HvNAMELEN_get(stash), HvNAMEUTF8(stash) ? SVf_UTF8 : 0));
      |                                                                          ^~~~~~~~~~~~~
ListUtil.xs:2030:55: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2030 |             sv_catpvn_flags(new_full_name, nameptr, s - nameptr, utf8flag ? SV_CATUTF8 : SV_CATBYTES);
      |                                                     ~~^~~~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
ListUtil.xs:2038:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2038 |     gv_init_pvn(gv, stash, nameptr, s - nameptr, GV_ADDMULTI | utf8flag);
      |                                     ~~^~~~~~~~~
../../embed.h:239:62: note: in definition of macro 'gv_init_pvn'
  239 | #define gv_init_pvn(a,b,c,d,e)  Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
      |                                                              ^
ListUtil.xs:2038:62: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2038 |     gv_init_pvn(gv, stash, nameptr, s - nameptr, GV_ADDMULTI | utf8flag);
../../embed.h:239:64: note: in definition of macro 'gv_init_pvn'
  239 | #define gv_init_pvn(a,b,c,d,e)  Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
      |                                                                ^
In file included from ../../perl.h:4165:
../../cv.h:148:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-129' to '4294967167' [-Wsign-conversion]
  148 | #define CvANON_off(cv)          (CvFLAGS(cv) &= ~CVf_ANON)
      |                                              ^~
../../cv.h:148:46: note: in definition of macro 'CvANON_off'
  148 | #define CvANON_off(cv)          (CvFLAGS(cv) &= ~CVf_ANON)
      |                                              ^~
In file included from ../../perl.h:4161:
ListUtil.c: In function 'boot_List__Util':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ListUtil.c:2621:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2621 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ListUtil.c:2621:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2621 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/List/Util/Util.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  ListUtil.o  -o ../../lib/auto/List/Util/Util.so  \
      \
  
chmod 755 ../../lib/auto/List/Util/Util.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Scalar-List-Utils'
cd cpan/Socket/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Socket
make -C cpan/Socket/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Socket'
cp Socket.pm ../../lib/Socket.pm
Running Mkbootstrap for Socket ()
chmod 644 "Socket.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Socket/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Socket.bs ../../lib/auto/Socket/Socket.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Socket/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Socket/typemap'  Socket.xs > Socket.xsc
mv Socket.xsc Socket.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.033\" -DXS_VERSION=\"2.033\" -fPIC -Wno-unused-function "-I../.."   Socket.c
In file included from ../../perl.h:7246,
                 from Socket.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Socket.xs: In function 'XS_Socket_pack_sockaddr_un':
Socket.xs:908:73: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  908 |                 addr_len = (char *)&(sun_ad.sun_path) - (char *)&sun_ad + len;
      |                                                                         ^
Socket.xs:908:28: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  908 |                 addr_len = (char *)&(sun_ad.sun_path) - (char *)&sun_ad + len;
      |                            ^
In file included from ../../perl.h:5841:
Socket.xs:915:54: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  915 |         ST(0) = sv_2mortal(newSVpvn((char *)&sun_ad, addr_len));
      |                                                      ^~~~~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
Socket.xs:915:28: note: in expansion of macro 'newSVpvn'
  915 |         ST(0) = sv_2mortal(newSVpvn((char *)&sun_ad, addr_len));
      |                            ^~~~~~~~
Socket.xs: In function 'XS_Socket_unpack_sockaddr_un':
Socket.xs:966:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  966 |                 addr_len = (char *)&addr - (char *)&(addr.sun_path) + sockaddrlen;
      |                                                                     ^
Socket.xs:966:28: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  966 |                 addr_len = (char *)&addr - (char *)&(addr.sun_path) + sockaddrlen;
      |                            ^
Socket.xs:982:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  982 |         ST(0) = sv_2mortal(newSVpvn(addr.sun_path, addr_len));
      |                                                    ^~~~~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
Socket.xs:982:28: note: in expansion of macro 'newSVpvn'
  982 |         ST(0) = sv_2mortal(newSVpvn(addr.sun_path, addr_len));
      |                            ^~~~~~~~
Socket.xs: In function 'XS_Socket_pack_sockaddr_in':
../../sv.h:1822:18: warning: conversion from 'UV' {aka 'long unsigned int'} to 'short unsigned int' may change value [-Wconversion]
 1822 | #define SvUV(sv) (SvUOK_nog(sv) ? SvUVX(sv) : sv_2uv(sv))
      |                  ^
Socket.xs:1000:24: note: in expansion of macro 'SvUV'
 1000 |                 port = SvUV(port_sv);
      |                        ^~~~
Socket.xs: In function 'XS_Socket_pack_sockaddr_in6':
../../sv.h:1822:18: warning: conversion from 'UV' {aka 'long unsigned int'} to 'short unsigned int' may change value [-Wconversion]
 1822 | #define SvUV(sv) (SvUOK_nog(sv) ? SvUVX(sv) : sv_2uv(sv))
      |                  ^
Socket.xs:1079:24: note: in expansion of macro 'SvUV'
 1079 |                 port = SvUV(port_sv);
      |                        ^~~~
Socket.xs: In function 'XS_Socket_inet_pton':
Socket.xs:1255:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1255 |                 sv_setpvn( ST(0), (char *)&ip_address, addrlen);
      |                                                        ^~~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
In file included from ../../perl.h:4161:
Socket.c: In function 'boot_Socket':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Socket.c:1884:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1884 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Socket.c:1884:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1884 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:940:32: note: in expansion of macro 'HEK_LEN'
  940 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Socket/Socket.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Socket.o  -o ../../lib/auto/Socket/Socket.so  \
      \
  
chmod 755 ../../lib/auto/Socket/Socket.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Socket'
cd cpan/Sys-Syslog/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Sys::Syslog
make -C cpan/Sys-Syslog/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Sys-Syslog'
cp Syslog.pm ../../lib/Sys/Syslog.pm
Running Mkbootstrap for Syslog ()
chmod 644 "Syslog.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Sys-Syslog/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Syslog.bs ../../lib/auto/Sys/Syslog/Syslog.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Sys-Syslog/../../lib/ExtUtils/typemap'  Syslog.xs > Syslog.xsc
mv Syslog.xsc Syslog.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.36\" -DXS_VERSION=\"0.36\" -fPIC -Wno-unused-function "-I../.."   Syslog.c
In file included from ../../perl.h:7246,
                 from Syslog.xs:13:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
Syslog.c: In function 'boot_Sys__Syslog':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Syslog.c:544:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  544 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Syslog.c:544:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  544 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
In file included from ../../perl.h:5841:
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:267:32: note: in expansion of macro 'HEK_LEN'
  267 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Sys/Syslog/Syslog.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Syslog.o  -o ../../lib/auto/Sys/Syslog/Syslog.so  \
      \
  
chmod 755 ../../lib/auto/Sys/Syslog/Syslog.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Sys-Syslog'
./miniperl_top make_ext_Makefile.pl cpan/Time-Piece/Makefile.PL
Creating cpan/Time-Piece/Makefile.PL for Time::Piece
cd cpan/Time-Piece/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Time::Piece
make -C cpan/Time-Piece/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Piece'
cp Seconds.pm ../../lib/Time/Seconds.pm
cp Piece.pm ../../lib/Time/Piece.pm
Running Mkbootstrap for Piece ()
chmod 644 "Piece.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Piece/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Piece.bs ../../lib/auto/Time/Piece/Piece.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Piece/../../lib/ExtUtils/typemap'  Piece.xs > Piece.xsc
mv Piece.xsc Piece.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.3401\" -DXS_VERSION=\"1.3401\" -fPIC -Wno-unused-function "-I../.."   Piece.c
In file included from ../../perl.h:7246,
                 from Piece.xs:6:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
Piece.c: In function 'boot_Time__Piece':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Piece.c:1430:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1430 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Piece.c:1430:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1430 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Time/Piece/Piece.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Piece.o  -o ../../lib/auto/Time/Piece/Piece.so  \
      \
  
chmod 755 ../../lib/auto/Time/Piece/Piece.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Time-Piece'
cd cpan/Unicode-Collate/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Making header files for XS...
Generating a Unix-style Makefile
Writing Makefile for Unicode::Collate
make -C cpan/Unicode-Collate/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Unicode-Collate'
cp Collate/CJK/JISX0208.pm ../../lib/Unicode/Collate/CJK/JISX0208.pm
cp Collate/Locale/as.pl ../../lib/Unicode/Collate/Locale/as.pl
cp Collate/Locale/be.pl ../../lib/Unicode/Collate/Locale/be.pl
cp Collate/Locale/af.pl ../../lib/Unicode/Collate/Locale/af.pl
cp Collate/Locale/ar.pl ../../lib/Unicode/Collate/Locale/ar.pl
cp Collate/CJK/Korean.pm ../../lib/Unicode/Collate/CJK/Korean.pm
cp Collate/Locale/fo.pl ../../lib/Unicode/Collate/Locale/fo.pl
cp Collate/Locale/et.pl ../../lib/Unicode/Collate/Locale/et.pl
cp Collate/Locale/de_at_ph.pl ../../lib/Unicode/Collate/Locale/de_at_ph.pl
cp Collate/CJK/Stroke.pm ../../lib/Unicode/Collate/CJK/Stroke.pm
cp Collate/Locale/ha.pl ../../lib/Unicode/Collate/Locale/ha.pl
cp Collate/Locale/es.pl ../../lib/Unicode/Collate/Locale/es.pl
cp Collate/Locale/de_phone.pl ../../lib/Unicode/Collate/Locale/de_phone.pl
cp Collate/CJK/Zhuyin.pm ../../lib/Unicode/Collate/CJK/Zhuyin.pm
cp Collate/Locale/eo.pl ../../lib/Unicode/Collate/Locale/eo.pl
cp Collate/Locale/cu.pl ../../lib/Unicode/Collate/Locale/cu.pl
cp Collate/CJK/GB2312.pm ../../lib/Unicode/Collate/CJK/GB2312.pm
cp Collate/Locale/ee.pl ../../lib/Unicode/Collate/Locale/ee.pl
cp Collate/Locale/da.pl ../../lib/Unicode/Collate/Locale/da.pl
cp Collate/Locale/he.pl ../../lib/Unicode/Collate/Locale/he.pl
cp Collate/Locale/fi.pl ../../lib/Unicode/Collate/Locale/fi.pl
cp Collate/Locale/ca.pl ../../lib/Unicode/Collate/Locale/ca.pl
cp Collate/Locale/cs.pl ../../lib/Unicode/Collate/Locale/cs.pl
cp Collate/CJK/Pinyin.pm ../../lib/Unicode/Collate/CJK/Pinyin.pm
cp Collate/Locale/haw.pl ../../lib/Unicode/Collate/Locale/haw.pl
cp Collate/Locale.pm ../../lib/Unicode/Collate/Locale.pm
cp Collate/Locale/fr_ca.pl ../../lib/Unicode/Collate/Locale/fr_ca.pl
cp Collate/Locale/fi_phone.pl ../../lib/Unicode/Collate/Locale/fi_phone.pl
cp Collate/Locale/cy.pl ../../lib/Unicode/Collate/Locale/cy.pl
cp Collate/Locale/es_trad.pl ../../lib/Unicode/Collate/Locale/es_trad.pl
cp Collate/Locale/bn.pl ../../lib/Unicode/Collate/Locale/bn.pl
cp Collate.pm ../../lib/Unicode/Collate.pm
cp Collate/Locale/fil.pl ../../lib/Unicode/Collate/Locale/fil.pl
cp Collate/Locale/gu.pl ../../lib/Unicode/Collate/Locale/gu.pl
cp Collate/Locale/fa.pl ../../lib/Unicode/Collate/Locale/fa.pl
cp Collate/Locale/dsb.pl ../../lib/Unicode/Collate/Locale/dsb.pl
cp Collate/Locale/az.pl ../../lib/Unicode/Collate/Locale/az.pl
cp Collate/CJK/Big5.pm ../../lib/Unicode/Collate/CJK/Big5.pm
cp Collate/Locale/sr.pl ../../lib/Unicode/Collate/Locale/sr.pl
cp Collate/Locale/sa.pl ../../lib/Unicode/Collate/Locale/sa.pl
cp Collate/Locale/lt.pl ../../lib/Unicode/Collate/Locale/lt.pl
cp Collate/Locale/ro.pl ../../lib/Unicode/Collate/Locale/ro.pl
cp Collate/Locale/hi.pl ../../lib/Unicode/Collate/Locale/hi.pl
cp Collate/Locale/nso.pl ../../lib/Unicode/Collate/Locale/nso.pl
cp Collate/Locale/sv.pl ../../lib/Unicode/Collate/Locale/sv.pl
cp Collate/Locale/kn.pl ../../lib/Unicode/Collate/Locale/kn.pl
cp Collate/Locale/si_dict.pl ../../lib/Unicode/Collate/Locale/si_dict.pl
cp Collate/Locale/or.pl ../../lib/Unicode/Collate/Locale/or.pl
cp Collate/Locale/sk.pl ../../lib/Unicode/Collate/Locale/sk.pl
cp Collate/Locale/om.pl ../../lib/Unicode/Collate/Locale/om.pl
cp Collate/Locale/kk.pl ../../lib/Unicode/Collate/Locale/kk.pl
cp Collate/Locale/hy.pl ../../lib/Unicode/Collate/Locale/hy.pl
cp Collate/Locale/nn.pl ../../lib/Unicode/Collate/Locale/nn.pl
cp Collate/Locale/lv.pl ../../lib/Unicode/Collate/Locale/lv.pl
cp Collate/Locale/si.pl ../../lib/Unicode/Collate/Locale/si.pl
cp Collate/Locale/kok.pl ../../lib/Unicode/Collate/Locale/kok.pl
cp Collate/Locale/sq.pl ../../lib/Unicode/Collate/Locale/sq.pl
cp Collate/Locale/is.pl ../../lib/Unicode/Collate/Locale/is.pl
cp Collate/Locale/ln.pl ../../lib/Unicode/Collate/Locale/ln.pl
cp Collate/Locale/hr.pl ../../lib/Unicode/Collate/Locale/hr.pl
cp Collate/Locale/ml.pl ../../lib/Unicode/Collate/Locale/ml.pl
cp Collate/Locale/pa.pl ../../lib/Unicode/Collate/Locale/pa.pl
cp Collate/Locale/hu.pl ../../lib/Unicode/Collate/Locale/hu.pl
cp Collate/Locale/mr.pl ../../lib/Unicode/Collate/Locale/mr.pl
cp Collate/Locale/ja.pl ../../lib/Unicode/Collate/Locale/ja.pl
cp Collate/Locale/ig.pl ../../lib/Unicode/Collate/Locale/ig.pl
cp Collate/Locale/pl.pl ../../lib/Unicode/Collate/Locale/pl.pl
cp Collate/Locale/nb.pl ../../lib/Unicode/Collate/Locale/nb.pl
cp Collate/Locale/mk.pl ../../lib/Unicode/Collate/Locale/mk.pl
cp Collate/Locale/lkt.pl ../../lib/Unicode/Collate/Locale/lkt.pl
cp Collate/Locale/sv_refo.pl ../../lib/Unicode/Collate/Locale/sv_refo.pl
cp Collate/Locale/ko.pl ../../lib/Unicode/Collate/Locale/ko.pl
cp Collate/Locale/sl.pl ../../lib/Unicode/Collate/Locale/sl.pl
cp Collate/Locale/mt.pl ../../lib/Unicode/Collate/Locale/mt.pl
cp Collate/Locale/kl.pl ../../lib/Unicode/Collate/Locale/kl.pl
cp Collate/Locale/se.pl ../../lib/Unicode/Collate/Locale/se.pl
cp Collate/Locale/zh_big5.pl ../../lib/Unicode/Collate/Locale/zh_big5.pl
cp Collate/Locale/th.pl ../../lib/Unicode/Collate/Locale/th.pl
cp Collate/Locale/vi.pl ../../lib/Unicode/Collate/Locale/vi.pl
cp Collate/Locale/ug_cyrl.pl ../../lib/Unicode/Collate/Locale/ug_cyrl.pl
cp Collate/Locale/zh_pin.pl ../../lib/Unicode/Collate/Locale/zh_pin.pl
cp Collate/Locale/te.pl ../../lib/Unicode/Collate/Locale/te.pl
cp Collate/Locale/zh_strk.pl ../../lib/Unicode/Collate/Locale/zh_strk.pl
cp Collate/Locale/to.pl ../../lib/Unicode/Collate/Locale/to.pl
cp Collate/Locale/ur.pl ../../lib/Unicode/Collate/Locale/ur.pl
cp Collate/Locale/vo.pl ../../lib/Unicode/Collate/Locale/vo.pl
cp Collate/Locale/zh_gb.pl ../../lib/Unicode/Collate/Locale/zh_gb.pl
cp Collate/Locale/tn.pl ../../lib/Unicode/Collate/Locale/tn.pl
cp Collate/Locale/wo.pl ../../lib/Unicode/Collate/Locale/wo.pl
cp Collate/Locale/zh_zhu.pl ../../lib/Unicode/Collate/Locale/zh_zhu.pl
cp Collate/keys.txt ../../lib/Unicode/Collate/keys.txt
cp Collate/Locale/uk.pl ../../lib/Unicode/Collate/Locale/uk.pl
cp Collate/Locale/tr.pl ../../lib/Unicode/Collate/Locale/tr.pl
cp Collate/Locale/ta.pl ../../lib/Unicode/Collate/Locale/ta.pl
cp Collate/allkeys.txt ../../lib/Unicode/Collate/allkeys.txt
cp Collate/Locale/yo.pl ../../lib/Unicode/Collate/Locale/yo.pl
cp Collate/Locale/wae.pl ../../lib/Unicode/Collate/Locale/wae.pl
cp Collate/Locale/zh.pl ../../lib/Unicode/Collate/Locale/zh.pl
Running Mkbootstrap for Collate ()
chmod 644 "Collate.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Unicode-Collate/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Collate.bs ../../lib/auto/Unicode/Collate/Collate.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Unicode-Collate/../../lib/ExtUtils/typemap'  Collate.xs > Collate.xsc
mv Collate.xsc Collate.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.31\" -DXS_VERSION=\"1.31\" -fPIC -Wno-unused-function "-I../.."   Collate.c
In file included from ../../perl.h:7246,
                 from Collate.xs:7:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:3003:
Collate.xs: In function 'XS_Unicode__Collate_mk_SortKey':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
../../handy.h:2767:25: note: in expansion of macro 'Newx'
 2767 | #define New(x,v,n,t)    Newx(v,n,t)
      |                         ^~~~
Collate.xs:501:13: note: in expansion of macro 'New'
  501 |             New(0, eachlevel[lv], 2 * (1 + buf_len) + 1, U8);
      |             ^~~
Collate.xs:567:18: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  567 |             dlen += s[lv] - eachlevel[lv];
      |                  ^~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Collate.xs:609:5: note: in expansion of macro 'SvCUR_set'
  609 |     SvCUR_set(dst, d - (U8*)SvPVX(dst));
      |     ^~~~~~~~~
Collate.xs: In function 'XS_Unicode__Collate_varCE':
Collate.xs:664:21: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  664 |             totwt = d[1] + d[2] + d[3] + d[4] + d[5] + d[6];
      |                     ^
Collate.xs: In function 'XS_Unicode__Collate_visualizeSortKey':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Collate.xs:750:5: note: in expansion of macro 'SvCUR_set'
  750 |     *d++ = ']';
      |     ^~~~~~~~~
In file included from ../../perl.h:4161:
Collate.c: In function 'boot_Unicode__Collate':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Collate.c:1094:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1094 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Collate.c:1094:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1094 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Unicode/Collate/Collate.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Collate.o  -o ../../lib/auto/Unicode/Collate/Collate.so  \
      \
  
chmod 755 ../../lib/auto/Unicode/Collate/Collate.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/cpan/Unicode-Collate'
cd dist/Data-Dumper/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Data::Dumper
cp -f dist/Devel-PPPort/ppport.h dist/Data-Dumper/ppport.h
make -C dist/Data-Dumper/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Data-Dumper'
cp Dumper.pm ../../lib/Data/Dumper.pm
Running Mkbootstrap for Dumper ()
chmod 644 "Dumper.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Data-Dumper/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Dumper.bs ../../lib/auto/Data/Dumper/Dumper.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Data-Dumper/../../lib/ExtUtils/typemap'  Dumper.xs > Dumper.xsc
mv Dumper.xsc Dumper.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.184\" -DXS_VERSION=\"2.184\" -fPIC -Wno-unused-function "-I../.."   Dumper.c
In file included from ../../perl.h:7246,
                 from Dumper.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Dumper.xs: In function 'esc_q_utf8':
Dumper.xs:413:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  413 |     j = r - rstart;
      |         ^
Dumper.xs: In function 'sv_x':
Dumper.xs:431:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  431 |         SvGROW(sv, len*n + SvCUR(sv) + 1);
      |                       ^
../../sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
In file included from ../../perl.h:5841:
Dumper.xs:431:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  431 |         SvGROW(sv, len*n + SvCUR(sv) + 1);
      |                       ^
../../embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
Dumper.xs:431:9: note: in expansion of macro 'SvGROW'
  431 |         SvGROW(sv, len*n + SvCUR(sv) + 1);
      |         ^~~~~~
Dumper.xs:434:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  434 |             SvCUR_set(sv, SvCUR(sv) + n);
      |                                     ^
../../sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
Dumper.xs: In function 'dump_regexp':
Dumper.xs:605:30: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  605 |             STRLEN to_copy = p - (U8 *) rval;
      |                              ^
Dumper.xs:636:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  636 |     rlen = rend - (U8 *) rval;
      |            ^~~~
Dumper.xs: In function 'DD_dump':
../../embed.h:84:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:84:33: note: in definition of macro 'call_method'
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
Dumper.xs:702:17: note: in expansion of macro 'perl_call_method'
  702 |             i = perl_call_method(SvPVX_const(style->freezer), G_EVAL|G_VOID|G_DISCARD);
      |                 ^~~~~~~~~~~~~~~~
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Dumper.xs:722:24: note: in expansion of macro 'hv_fetch'
  722 |             if ((svp = hv_fetch(seenhv, id, idlen, FALSE))
      |                        ^~~~~~~~
../../hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Dumper.xs:784:23: note: in expansion of macro 'hv_store'
  784 |                 (void)hv_store(seenhv, id, idlen,
      |                       ^~~~~~~~
Dumper.xs:831:50: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  831 |                 sv_x(aTHX_ apad, " ", 1, blesslen+2);
      |                                          ~~~~~~~~^~
Dumper.xs:925:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  925 |                 ilen = ilen + my_sprintf(iname+ilen, "%" IVdf, (IV)ix);
      |                             ^
Dumper.xs:1009:40: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1009 |                            av_len(keys)+1,
../../embed.h:573:53: note: in definition of macro 'sortsv'
  573 | #define sortsv(a,b,c)           Perl_sortsv(aTHX_ a,b,c)
      |                                                     ^
Dumper.xs:1016:40: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1016 |                            av_len(keys)+1,
../../embed.h:573:53: note: in definition of macro 'sortsv'
  573 | #define sortsv(a,b,c)           Perl_sortsv(aTHX_ a,b,c)
      |                                                     ^
../../embed.h:86:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   86 | #define call_sv(a,b)            Perl_call_sv(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~
../../embed.h:86:33: note: in definition of macro 'call_sv'
   86 | #define call_sv(a,b)            Perl_call_sv(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~
Dumper.xs:1024:25: note: in expansion of macro 'perl_call_sv'
 1024 |                     i = perl_call_sv(style->sortkeys, G_SCALAR | G_EVAL);
      |                         ^~~~~~~~~~~~
Dumper.xs:1063:42: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1063 |                     svp = av_fetch(keys, i, FALSE);
      |                                          ^
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
Dumper.xs:1192:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1192 |                         size_t n = nl - p;
      |                                    ^~
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Dumper.xs:1250:24: note: in expansion of macro 'hv_fetch'
 1250 |             if ((svp = hv_fetch(seenhv, id, idlen, FALSE)) &&
      |                        ^~~~~~~~
../../hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Dumper.xs:1277:23: note: in expansion of macro 'hv_store'
 1277 |                 (void)hv_store(seenhv, id, idlen, newRV_inc((SV*)seenentry), 0);
      |                       ^~~~~~~~
../../perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
Dumper.xs:1285:21: note: in expansion of macro 'my_snprintf'
 1285 |               len = my_snprintf(tmpbuf, sizeof(tmpbuf), "%" UVuf, SvUV(val));
      |                     ^~~~~~~~~~~
../../perl.h:2026:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2026 | #      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
      |                                             ^
Dumper.xs:1287:21: note: in expansion of macro 'my_snprintf'
 1287 |               len = my_snprintf(tmpbuf, sizeof(tmpbuf), "%" IVdf, SvIV(val));
      |                     ^~~~~~~~~~~
../../sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
../../sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
Dumper.xs:1390:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1390 |             sv_catpvn(retval, (const char *)mg->mg_ptr, mg->mg_len);
      |                                                         ~~^~~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Dumper.xs:1390:13: note: in expansion of macro 'sv_catpvn'
 1390 |             sv_catpvn(retval, (const char *)mg->mg_ptr, mg->mg_len);
      |             ^~~~~~~~~
In file included from ../../perl.h:3003:
../../hv.h:512:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                                                ^~~~~~
../../handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
../../hv.h:512:6: note: in expansion of macro 'MUTABLE_SV'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |      ^~~~~~~~~~
../../hv.h:512:17: note: in expansion of macro 'hv_common_key_len'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                 ^~~~~~~~~~~~~~~~~
Dumper.xs:1422:19: note: in expansion of macro 'hv_delete'
 1422 |             (void)hv_delete(seenhv, id, idlen, G_DISCARD);
      |                   ^~~~~~~~~
Dumper.xs: In function 'XS_Data__Dumper_Dumpxs':
Dumper.xs:1623:78: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1623 |                         SV * const tmpsv = sv_x(aTHX_ NULL, " ", 1, name_len + 3);
      |                                                                     ~~~~~~~~~^~~
Dumper.xs: In function 'XS_Data__Dumper__vstring':
Dumper.xs:1698:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1698 |                  ? newSVpvn((const char *)mg->mg_ptr, mg->mg_len)
      |                                                       ~~^~~~~~~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
In file included from ../../perl.h:4161:
Dumper.c: In function 'boot_Data__Dumper':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dumper.c:1886:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1886 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dumper.c:1886:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1886 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Data/Dumper/Dumper.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Dumper.o  -o ../../lib/auto/Data/Dumper/Dumper.so  \
      \
  
chmod 755 ../../lib/auto/Data/Dumper/Dumper.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Data-Dumper'
cd dist/IO/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for IO
cp -f dist/Devel-PPPort/ppport.h dist/IO/ppport.h
make -C dist/IO/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/IO'
cp lib/IO/File.pm ../../lib/IO/File.pm
cp lib/IO/Dir.pm ../../lib/IO/Dir.pm
cp IO.pm ../../lib/IO.pm
cp lib/IO/Select.pm ../../lib/IO/Select.pm
cp lib/IO/Handle.pm ../../lib/IO/Handle.pm
cp lib/IO/Seekable.pm ../../lib/IO/Seekable.pm
cp lib/IO/Socket/INET.pm ../../lib/IO/Socket/INET.pm
cp lib/IO/Socket.pm ../../lib/IO/Socket.pm
cp lib/IO/Poll.pm ../../lib/IO/Poll.pm
cp lib/IO/Socket/UNIX.pm ../../lib/IO/Socket/UNIX.pm
cp lib/IO/Pipe.pm ../../lib/IO/Pipe.pm
Running Mkbootstrap for IO ()
chmod 644 "IO.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/IO/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- IO.bs ../../lib/auto/IO/IO.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/IO/../../lib/ExtUtils/typemap'  IO.xs > IO.xsc
mv IO.xsc IO.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.50\" -DXS_VERSION=\"1.50\" -fPIC -Wno-unused-function "-I../.."   IO.c
In file included from ../../perl.h:7246,
                 from IO.xs:12:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
IO.xs: In function 'XS_IO__Poll__poll':
IO.xs:270:42: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  270 |     SV *tmpsv = sv_2mortal(NEWSV(999,nfd * sizeof(struct pollfd)));
      |                                          ^
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
../../handy.h:2623:25: note: in expansion of macro 'newSV'
 2623 | #define NEWSV(x,len)    newSV(len)
      |                         ^~~~~
IO.xs:270:28: note: in expansion of macro 'NEWSV'
  270 |     SV *tmpsv = sv_2mortal(NEWSV(999,nfd * sizeof(struct pollfd)));
      |                            ^~~~~
IO.xs:283:24: warning: conversion to 'nfds_t' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  283 |     if((ret = poll(fds,nfd,timeout)) >= 0) {
      |                        ^~~
IO.xs: In function 'XS_IO__Handle_ungetc':
IO.xs:338:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  338 |                 len = end - buf;
      |                       ^~~
In file included from ../../perl.h:4161:
IO.c: In function 'boot_IO':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IO.c:993:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  993 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IO.c:993:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  993 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.50\" -DXS_VERSION=\"1.50\" -fPIC -Wno-unused-function "-I../.."   poll.c
In file included from ../../perl.h:7246,
                 from poll.c:14:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/IO/IO.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  IO.o poll.o  -o ../../lib/auto/IO/IO.so  \
      \
  
chmod 755 ../../lib/auto/IO/IO.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/IO'
cd dist/PathTools/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Cwd
cp -f dist/Devel-PPPort/ppport.h dist/PathTools/ppport.h
make -C dist/PathTools/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/PathTools'
cp lib/File/Spec/Mac.pm ../../lib/File/Spec/Mac.pm
cp Cwd.pm ../../lib/Cwd.pm
cp lib/File/Spec/Unix.pm ../../lib/File/Spec/Unix.pm
cp lib/File/Spec/Epoc.pm ../../lib/File/Spec/Epoc.pm
cp lib/File/Spec.pm ../../lib/File/Spec.pm
cp lib/File/Spec/Cygwin.pm ../../lib/File/Spec/Cygwin.pm
cp lib/File/Spec/VMS.pm ../../lib/File/Spec/VMS.pm
cp lib/File/Spec/OS2.pm ../../lib/File/Spec/OS2.pm
cp lib/File/Spec/Win32.pm ../../lib/File/Spec/Win32.pm
cp lib/File/Spec/AmigaOS.pm ../../lib/File/Spec/AmigaOS.pm
cp lib/File/Spec/Functions.pm ../../lib/File/Spec/Functions.pm
Running Mkbootstrap for Cwd ()
chmod 644 "Cwd.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/PathTools/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Cwd.bs ../../lib/auto/Cwd/Cwd.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/PathTools/../../lib/ExtUtils/typemap'  Cwd.xs > Cwd.xsc
mv Cwd.xsc Cwd.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.84\" -DXS_VERSION=\"3.84\" -fPIC -Wno-unused-function "-I../.."  -DDOUBLE_SLASHES_SPECIAL=0 -DNO_PPPORT_H Cwd.c
In file included from ../../perl.h:7246,
                 from Cwd.xs:8:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Cwd.xs: In function 'bsd_realpath':
Cwd.xs:134:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  134 |             memcpy(next_token, remaining, s - remaining);
      |                                           ~~^~~~~~~~~~~
Cwd.xs:140:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  140 |                 remaining_len -= s - remaining;
      |                               ^~
Cwd.xs:168:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  168 |                     resolved_len = q - resolved;
      |                                    ^
Cwd.xs:223:40: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  223 |                         resolved_len = q - resolved;
      |                                        ^
Cwd.xs: In function 'THX_unix_canonpath':
Cwd.xs:501:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  501 |         q = (const char *) memchr(p+2, '/', pe-(p+2));
      |                                             ~~^~~~~~
Cwd.xs:503:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  503 |         l = q - p;
      |             ^
Cwd.xs:537:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  537 |         q = (const char *) memchr(p, '/', pe-p);
      |                                           ~~^~
Cwd.xs:539:13: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  539 |         l = q - p;
      |             ^
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Cwd.xs:557:5: note: in expansion of macro 'SvCUR_set'
  557 |     SvCUR_set(retval, o - SvPVX(retval));
      |     ^~~~~~~~~
In file included from ../../perl.h:4161:
Cwd.c: In function 'boot_Cwd':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cwd.c:1101:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1101 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cwd.c:1101:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1101 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Cwd/Cwd.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Cwd.o  -o ../../lib/auto/Cwd/Cwd.so  \
      \
  
chmod 755 ../../lib/auto/Cwd/Cwd.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/PathTools'
cd dist/Storable/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Storable
cp -f dist/Devel-PPPort/ppport.h dist/Storable/ppport.h
make -C dist/Storable/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Storable'
cp Storable.pm ../../lib/Storable.pm
Running Mkbootstrap for Storable ()
chmod 644 "Storable.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Storable/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Storable.bs ../../lib/auto/Storable/Storable.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Storable/../../lib/ExtUtils/typemap'  Storable.xs > Storable.xsc
mv Storable.xsc Storable.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"3.26\" -DXS_VERSION=\"3.26\" -fPIC -Wno-unused-function "-I../.."   Storable.c
In file included from ../../perl.h:7246,
                 from Storable.xs:16:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
Storable.xs: In function 'pkg_fetchmeth':
Storable.xs:2019:36: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2019 |     (void) hv_store(cache, hvname, strlen(hvname), sv, 0);
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Storable.xs:2019:12: note: in expansion of macro 'hv_store'
 2019 |     (void) hv_store(cache, hvname, strlen(hvname), sv, 0);
      |            ^~~~~~~~
Storable.xs: In function 'pkg_hide':
Storable.xs:2037:29: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2037 |                     hvname, strlen(hvname), newSVsv(&PL_sv_undef), 0);
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Storable.xs:2036:12: note: in expansion of macro 'hv_store'
 2036 |     (void) hv_store(cache,
      |            ^~~~~~~~
In file included from ../../perl.h:3003:
Storable.xs: In function 'pkg_uncache':
Storable.xs:2052:37: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2052 |     (void) hv_delete(cache, hvname, strlen(hvname), G_DISCARD);
../../handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
../../hv.h:512:6: note: in expansion of macro 'MUTABLE_SV'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |      ^~~~~~~~~~
../../hv.h:512:17: note: in expansion of macro 'hv_common_key_len'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                 ^~~~~~~~~~~~~~~~~
Storable.xs:2052:12: note: in expansion of macro 'hv_delete'
 2052 |     (void) hv_delete(cache, hvname, strlen(hvname), G_DISCARD);
      |            ^~~~~~~~~
Storable.xs: In function 'pkg_can':
Storable.xs:2085:35: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2085 |     svh = hv_fetch(cache, hvname, strlen(hvname), FALSE);
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Storable.xs:2085:11: note: in expansion of macro 'hv_fetch'
 2085 |     svh = hv_fetch(cache, hvname, strlen(hvname), FALSE);
      |           ^~~~~~~~
Storable.xs: In function 'store_ref':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:2344:22: note: in expansion of macro 'Gv_AMG'
 2344 |         if (stash && Gv_AMG(stash)) {
      |                      ^~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2346:13: note: in expansion of macro 'PUTMARK'
 2346 |             PUTMARK(is_weak ? SX_WEAKOVERLOAD : SX_OVERLOAD);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2346:13: note: in expansion of macro 'PUTMARK'
 2346 |             PUTMARK(is_weak ? SX_WEAKOVERLOAD : SX_OVERLOAD);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2348:13: note: in expansion of macro 'PUTMARK'
 2348 |             PUTMARK(is_weak ? SX_WEAKREF : SX_REF);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2348:13: note: in expansion of macro 'PUTMARK'
 2348 |             PUTMARK(is_weak ? SX_WEAKREF : SX_REF);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2350:9: note: in expansion of macro 'PUTMARK'
 2350 |         PUTMARK(is_weak ? SX_WEAKREF : SX_REF);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2350:9: note: in expansion of macro 'PUTMARK'
 2350 |         PUTMARK(is_weak ? SX_WEAKREF : SX_REF);
      |         ^~~~~~~
Storable.xs: In function 'store_scalar':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2407:13: note: in expansion of macro 'PUTMARK'
 2407 |             PUTMARK(SX_SV_UNDEF);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2407:13: note: in expansion of macro 'PUTMARK'
 2407 |             PUTMARK(SX_SV_UNDEF);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2410:13: note: in expansion of macro 'PUTMARK'
 2410 |             PUTMARK(SX_UNDEF);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2410:13: note: in expansion of macro 'PUTMARK'
 2410 |             PUTMARK(SX_UNDEF);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2449:13: note: in expansion of macro 'PUTMARK'
 2449 |             PUTMARK(SX_SV_YES);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2449:13: note: in expansion of macro 'PUTMARK'
 2449 |             PUTMARK(SX_SV_YES);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2452:13: note: in expansion of macro 'PUTMARK'
 2452 |             PUTMARK(SX_SV_NO);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2452:13: note: in expansion of macro 'PUTMARK'
 2452 |             PUTMARK(SX_SV_NO);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2496:13: note: in expansion of macro 'PUTMARK'
 2496 |             PUTMARK(SX_BYTE);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2496:13: note: in expansion of macro 'PUTMARK'
 2496 |             PUTMARK(SX_BYTE);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2497:13: note: in expansion of macro 'PUTMARK'
 2497 |             PUTMARK(siv);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2497:13: note: in expansion of macro 'PUTMARK'
 2497 |             PUTMARK(siv);
      |             ^~~~~~~
In file included from ../../perl.h:1482:
Storable.xs:2520:31: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2520 |             niv = (I32) htonl((I32) iv);
      |                               ^~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2522:13: note: in expansion of macro 'PUTMARK'
 2522 |             PUTMARK(SX_NETINT);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2522:13: note: in expansion of macro 'PUTMARK'
 2522 |             PUTMARK(SX_NETINT);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:2523:13: note: in expansion of macro 'WRITE_I32'
 2523 |             WRITE_I32(niv);
      |             ^~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:2523:13: note: in expansion of macro 'WRITE_I32'
 2523 |             WRITE_I32(niv);
      |             ^~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2526:13: note: in expansion of macro 'PUTMARK'
 2526 |             PUTMARK(SX_INTEGER);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2526:13: note: in expansion of macro 'PUTMARK'
 2526 |             PUTMARK(SX_INTEGER);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2527:13: note: in expansion of macro 'WRITE'
 2527 |             WRITE(&iv, sizeof(iv));
      |             ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2527:13: note: in expansion of macro 'WRITE'
 2527 |             WRITE(&iv, sizeof(iv));
      |             ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2566:9: note: in expansion of macro 'PUTMARK'
 2566 |         PUTMARK(SX_DOUBLE);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2566:9: note: in expansion of macro 'PUTMARK'
 2566 |         PUTMARK(SX_DOUBLE);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2567:9: note: in expansion of macro 'WRITE'
 2567 |         WRITE(&nv, sizeof(nv));
      |         ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2567:9: note: in expansion of macro 'WRITE'
 2567 |         WRITE(&nv, sizeof(nv));
      |         ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:2598:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2598 |                          len, SX_VSTRING, SX_LVSTRING);
      |                          ^~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:2598:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2598 |                          len, SX_VSTRING, SX_LVSTRING);
      |                          ^~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:2597:13: note: in expansion of macro 'STORE_PV_LEN'
 2597 |             STORE_PV_LEN((const char *)mg->mg_ptr,
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2604:13: note: in expansion of macro 'STORE_UTF8STR'
 2604 |             STORE_UTF8STR(pv, wlen);
      |             ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:2606:13: note: in expansion of macro 'STORE_SCALAR'
 2606 |             STORE_SCALAR(pv, wlen);
      |             ^~~~~~~~~~~~
Storable.xs: In function 'store_array':
../../embed.h:65:33: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   65 | #define av_len(a)               Perl_av_len(aTHX_ a)
      |                                 ^~~~~~~~~~~
../../embed.h:65:33: note: in definition of macro 'av_len'
   65 | #define av_len(a)               Perl_av_len(aTHX_ a)
      |                                 ^~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2652:9: note: in expansion of macro 'PUTMARK'
 2652 |         PUTMARK(SX_ARRAY);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2652:9: note: in expansion of macro 'PUTMARK'
 2652 |         PUTMARK(SX_ARRAY);
      |         ^~~~~~~
Storable.xs:2653:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2653 |         WLEN(l);
      |              ^
Storable.xs:2653:9: note: in expansion of macro 'WLEN'
 2653 |         WLEN(l);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2653:9: note: in expansion of macro 'WLEN'
 2653 |         WLEN(l);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2653:9: note: in expansion of macro 'WLEN'
 2653 |         WLEN(l);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2653:9: note: in expansion of macro 'WLEN'
 2653 |         WLEN(l);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2653:9: note: in expansion of macro 'WLEN'
 2653 |         WLEN(l);
      |         ^~~~
Storable.xs:2674:28: warning: conversion to 'ssize_t' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 2674 |         sav = av_fetch(av, i, 0);
      |                            ^
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1133:9: note: in expansion of macro 'PUTMARK'
 1133 |         PUTMARK(SX_SV_UNDEF);                                   \
      |         ^~~~~~~
Storable.xs:2677:13: note: in expansion of macro 'STORE_SV_UNDEF'
 2677 |             STORE_SV_UNDEF();
      |             ^~~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1133:9: note: in expansion of macro 'PUTMARK'
 1133 |         PUTMARK(SX_SV_UNDEF);                                   \
      |         ^~~~~~~
Storable.xs:2677:13: note: in expansion of macro 'STORE_SV_UNDEF'
 2677 |             STORE_SV_UNDEF();
      |             ^~~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2689:13: note: in expansion of macro 'PUTMARK'
 2689 |             PUTMARK(SX_SVUNDEF_ELEM);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2689:13: note: in expansion of macro 'PUTMARK'
 2689 |             PUTMARK(SX_SVUNDEF_ELEM);
      |             ^~~~~~~
Storable.xs: In function 'store_hash':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2808:13: note: in expansion of macro 'PUTMARK'
 2808 |             PUTMARK(SX_FLAG_HASH);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2808:13: note: in expansion of macro 'PUTMARK'
 2808 |             PUTMARK(SX_FLAG_HASH);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2809:13: note: in expansion of macro 'PUTMARK'
 2809 |             PUTMARK(hash_flags);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2809:13: note: in expansion of macro 'PUTMARK'
 2809 |             PUTMARK(hash_flags);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2812:13: note: in expansion of macro 'PUTMARK'
 2812 |             PUTMARK(SX_HASH);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2812:13: note: in expansion of macro 'PUTMARK'
 2812 |             PUTMARK(SX_HASH);
      |             ^~~~~~~
Storable.xs:2814:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2814 |         WLEN(l);
      |              ^
Storable.xs:2814:9: note: in expansion of macro 'WLEN'
 2814 |         WLEN(l);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2814:9: note: in expansion of macro 'WLEN'
 2814 |         WLEN(l);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2814:9: note: in expansion of macro 'WLEN'
 2814 |         WLEN(l);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2814:9: note: in expansion of macro 'WLEN'
 2814 |         WLEN(l);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2814:9: note: in expansion of macro 'WLEN'
 2814 |         WLEN(l);
      |         ^~~~
Storable.xs:2868:24: warning: conversion to 'ssize_t' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 2868 |         av_extend (av, len);
      |                        ^~~
../../embed.h:61:56: note: in definition of macro 'av_extend'
   61 | #define av_extend(a,b)          Perl_av_extend(aTHX_ a,b)
      |                                                        ^
Storable.xs:2878:26: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2878 |             av_store(av, i, hv_iterkeysv(he));
      |                          ^
../../embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
Storable.xs:2948:22: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2948 |             keylen = keylen_tmp;
      |                      ^~~~~~~~~~
Storable.xs:2965:30: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2965 |                     keylen = keylen_tmp;
      |                              ^~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2975:17: note: in expansion of macro 'PUTMARK'
 2975 |                 PUTMARK(flags);
      |                 ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:2975:17: note: in expansion of macro 'PUTMARK'
 2975 |                 PUTMARK(flags);
      |                 ^~~~~~~
Storable.xs:2987:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2987 |             WLEN(keylen);
      |                  ^~~~~~
Storable.xs:2987:13: note: in expansion of macro 'WLEN'
 2987 |             WLEN(keylen);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2987:13: note: in expansion of macro 'WLEN'
 2987 |             WLEN(keylen);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2987:13: note: in expansion of macro 'WLEN'
 2987 |             WLEN(keylen);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2987:13: note: in expansion of macro 'WLEN'
 2987 |             WLEN(keylen);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:2987:13: note: in expansion of macro 'WLEN'
 2987 |             WLEN(keylen);
      |             ^~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2989:17: note: in expansion of macro 'WRITE'
 2989 |                 WRITE(keyval, keylen);
      |                 ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2989:17: note: in expansion of macro 'WRITE'
 2989 |                 WRITE(keyval, keylen);
      |                 ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:2989:17: note: in expansion of macro 'WRITE'
 2989 |                 WRITE(keyval, keylen);
      |                 ^~~~~
Storable.xs:2989:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2989 |                 WRITE(keyval, keylen);
      |                               ^~~~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:2989:17: note: in expansion of macro 'WRITE'
 2989 |                 WRITE(keyval, keylen);
      |                 ^~~~~
Storable.xs:2989:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2989 |                 WRITE(keyval, keylen);
      |                               ^~~~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:2989:17: note: in expansion of macro 'WRITE'
 2989 |                 WRITE(keyval, keylen);
      |                 ^~~~~
Storable.xs: In function 'store_hentry':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3101:13: note: in expansion of macro 'PUTMARK'
 3101 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3101:13: note: in expansion of macro 'PUTMARK'
 3101 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:3117:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3117 |             WLEN(len);
      |                  ^~~
Storable.xs:3117:13: note: in expansion of macro 'WLEN'
 3117 |             WLEN(len);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3117:13: note: in expansion of macro 'WLEN'
 3117 |             WLEN(len);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3117:13: note: in expansion of macro 'WLEN'
 3117 |             WLEN(len);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3117:13: note: in expansion of macro 'WLEN'
 3117 |             WLEN(len);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3117:13: note: in expansion of macro 'WLEN'
 3117 |             WLEN(len);
      |             ^~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3119:17: note: in expansion of macro 'WRITE'
 3119 |                 WRITE(key, len);
      |                 ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3119:17: note: in expansion of macro 'WRITE'
 3119 |                 WRITE(key, len);
      |                 ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3119:17: note: in expansion of macro 'WRITE'
 3119 |                 WRITE(key, len);
      |                 ^~~~~
Storable.xs:3119:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3119 |                 WRITE(key, len);
      |                            ^~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:3119:17: note: in expansion of macro 'WRITE'
 3119 |                 WRITE(key, len);
      |                 ^~~~~
Storable.xs:3119:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3119 |                 WRITE(key, len);
      |                            ^~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:3119:17: note: in expansion of macro 'WRITE'
 3119 |                 WRITE(key, len);
      |                 ^~~~~
Storable.xs: In function 'store_code':
../../embed.h:84:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:84:33: note: in definition of macro 'call_method'
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:84:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:84:33: note: in definition of macro 'call_method'
   84 | #define call_method(a,b)        Perl_call_method(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3269:5: note: in expansion of macro 'PUTMARK'
 3269 |     PUTMARK(SX_CODE);
      |     ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3269:5: note: in expansion of macro 'PUTMARK'
 3269 |     PUTMARK(SX_CODE);
      |     ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:284:33: note: in expansion of macro 'STORE_PV_LEN'
  284 | #define STORE_UTF8STR(pv, len)  STORE_PV_LEN(pv, len, SX_UTF8STR, SX_LUTF8STR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3279:9: note: in expansion of macro 'STORE_UTF8STR'
 3279 |         STORE_UTF8STR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:3281:9: note: in expansion of macro 'STORE_SCALAR'
 3281 |         STORE_SCALAR(SvPV_nolen(text), len);
      |         ^~~~~~~~~~~~
Storable.xs: In function 'store_regexp':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3356:5: note: in expansion of macro 'PUTMARK'
 3356 |     PUTMARK(SX_REGEXP);
      |     ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3356:5: note: in expansion of macro 'PUTMARK'
 3356 |     PUTMARK(SX_REGEXP);
      |     ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3357:5: note: in expansion of macro 'PUTMARK'
 3357 |     PUTMARK(op_flags);
      |     ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3357:5: note: in expansion of macro 'PUTMARK'
 3357 |     PUTMARK(op_flags);
      |     ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3360:7: note: in expansion of macro 'WLEN'
 3360 |       WLEN(re_len32);
      |       ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3360:7: note: in expansion of macro 'WLEN'
 3360 |       WLEN(re_len32);
      |       ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3360:7: note: in expansion of macro 'WLEN'
 3360 |       WLEN(re_len32);
      |       ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3360:7: note: in expansion of macro 'WLEN'
 3360 |       WLEN(re_len32);
      |       ^~~~
Storable.xs:3360:12: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3360 |       WLEN(re_len32);
      |            ^~~~~~~~
Storable.xs:799:29: note: in definition of macro 'MBUF_PUTINT'
  799 |             *(int *) mptr = i;                  \
      |                             ^
Storable.xs:3360:7: note: in expansion of macro 'WLEN'
 3360 |       WLEN(re_len32);
      |       ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3363:7: note: in expansion of macro 'PUTMARK'
 3363 |       PUTMARK(re_len);
      |       ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3363:7: note: in expansion of macro 'PUTMARK'
 3363 |       PUTMARK(re_len);
      |       ^~~~~~~
Storable.xs:3363:15: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3363 |       PUTMARK(re_len);
      |               ^~~~~~
Storable.xs:1012:40: note: in definition of macro 'PUTMARK'
 1012 |         else if (PerlIO_putc(cxt->fio, x) == EOF)       \
      |                                        ^
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3364:5: note: in expansion of macro 'WRITE'
 3364 |     WRITE(re_pv, re_len);
      |     ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3364:5: note: in expansion of macro 'WRITE'
 3364 |     WRITE(re_pv, re_len);
      |     ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3365:5: note: in expansion of macro 'PUTMARK'
 3365 |     PUTMARK(flags_len);
      |     ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3365:5: note: in expansion of macro 'PUTMARK'
 3365 |     PUTMARK(flags_len);
      |     ^~~~~~~
Storable.xs:3365:13: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3365 |     PUTMARK(flags_len);
      |             ^~~~~~~~~
Storable.xs:1012:40: note: in definition of macro 'PUTMARK'
 1012 |         else if (PerlIO_putc(cxt->fio, x) == EOF)       \
      |                                        ^
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3366:5: note: in expansion of macro 'WRITE'
 3366 |     WRITE(flags_pv, flags_len);
      |     ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3366:5: note: in expansion of macro 'WRITE'
 3366 |     WRITE(flags_pv, flags_len);
      |     ^~~~~
Storable.xs: In function 'store_tied':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3401:9: note: in expansion of macro 'PUTMARK'
 3401 |         PUTMARK(SX_TIED_HASH);          /* Introduces tied hash */
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3401:9: note: in expansion of macro 'PUTMARK'
 3401 |         PUTMARK(SX_TIED_HASH);          /* Introduces tied hash */
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3404:9: note: in expansion of macro 'PUTMARK'
 3404 |         PUTMARK(SX_TIED_ARRAY);         /* Introduces tied array */
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3404:9: note: in expansion of macro 'PUTMARK'
 3404 |         PUTMARK(SX_TIED_ARRAY);         /* Introduces tied array */
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3407:9: note: in expansion of macro 'PUTMARK'
 3407 |         PUTMARK(SX_TIED_SCALAR);        /* Introduces tied scalar */
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3407:9: note: in expansion of macro 'PUTMARK'
 3407 |         PUTMARK(SX_TIED_SCALAR);        /* Introduces tied scalar */
      |         ^~~~~~~
Storable.xs: In function 'store_tied_item':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3466:9: note: in expansion of macro 'PUTMARK'
 3466 |         PUTMARK(SX_TIED_KEY);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3466:9: note: in expansion of macro 'PUTMARK'
 3466 |         PUTMARK(SX_TIED_KEY);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3480:9: note: in expansion of macro 'PUTMARK'
 3480 |         PUTMARK(SX_TIED_IDX);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3480:9: note: in expansion of macro 'PUTMARK'
 3480 |         PUTMARK(SX_TIED_IDX);
      |         ^~~~~~~
Storable.xs:3488:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3488 |         WLEN(idx);
      |              ^~~
Storable.xs:3488:9: note: in expansion of macro 'WLEN'
 3488 |         WLEN(idx);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3488:9: note: in expansion of macro 'WLEN'
 3488 |         WLEN(idx);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3488:9: note: in expansion of macro 'WLEN'
 3488 |         WLEN(idx);
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3488:9: note: in expansion of macro 'WLEN'
 3488 |         WLEN(idx);
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3488:9: note: in expansion of macro 'WLEN'
 3488 |         WLEN(idx);
      |         ^~~~
Storable.xs: In function 'store_hook':
Storable.xs:842:33: warning: conversion from 'int' to 'unsigned char' may change value [-Wconversion]
  842 | #define SHF_NEED_RECURSE        0x40
      |                                 ^~~~
Storable.xs:842:33: note: in definition of macro 'SHF_NEED_RECURSE'
  842 | #define SHF_NEED_RECURSE        0x40
      |                                 ^~~~
Storable.xs:3623:11: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3623 |     len = strlen(classname);
      |           ^~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3768:13: note: in expansion of macro 'PUTMARK'
 3768 |             PUTMARK(SX_HOOK);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3768:13: note: in expansion of macro 'PUTMARK'
 3768 |             PUTMARK(SX_HOOK);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3769:13: note: in expansion of macro 'PUTMARK'
 3769 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3769:13: note: in expansion of macro 'PUTMARK'
 3769 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3771:17: note: in expansion of macro 'PUTMARK'
 3771 |                 PUTMARK(eflags);
      |                 ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3771:17: note: in expansion of macro 'PUTMARK'
 3771 |                 PUTMARK(eflags);
      |                 ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3773:13: note: in expansion of macro 'PUTMARK'
 3773 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3773:13: note: in expansion of macro 'PUTMARK'
 3773 |             PUTMARK(flags);
      |             ^~~~~~~
Storable.xs:3853:13: warning: conversion from 'int' to 'unsigned char' may change value [-Wconversion]
 3853 |     flags = obj_type;
      |             ^~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3888:9: note: in expansion of macro 'PUTMARK'
 3888 |         PUTMARK(SX_HOOK);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3888:9: note: in expansion of macro 'PUTMARK'
 3888 |         PUTMARK(SX_HOOK);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3889:9: note: in expansion of macro 'PUTMARK'
 3889 |         PUTMARK(flags);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3889:9: note: in expansion of macro 'PUTMARK'
 3889 |         PUTMARK(flags);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3891:13: note: in expansion of macro 'PUTMARK'
 3891 |             PUTMARK(eflags);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3891:13: note: in expansion of macro 'PUTMARK'
 3891 |             PUTMARK(eflags);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3893:9: note: in expansion of macro 'PUTMARK'
 3893 |         PUTMARK(flags);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3893:9: note: in expansion of macro 'PUTMARK'
 3893 |         PUTMARK(flags);
      |         ^~~~~~~
Storable.xs:3898:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3898 |             WLEN(classnum);
      |                  ^~~~~~~~
Storable.xs:3898:13: note: in expansion of macro 'WLEN'
 3898 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3898:13: note: in expansion of macro 'WLEN'
 3898 |             WLEN(classnum);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3898:13: note: in expansion of macro 'WLEN'
 3898 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3898:13: note: in expansion of macro 'WLEN'
 3898 |             WLEN(classnum);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3898:13: note: in expansion of macro 'WLEN'
 3898 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3901:13: note: in expansion of macro 'PUTMARK'
 3901 |             PUTMARK(cnum);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3901:13: note: in expansion of macro 'PUTMARK'
 3901 |             PUTMARK(cnum);
      |             ^~~~~~~
Storable.xs:3905:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3905 |             WLEN(len);
      |                  ^~~
Storable.xs:3905:13: note: in expansion of macro 'WLEN'
 3905 |             WLEN(len);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3905:13: note: in expansion of macro 'WLEN'
 3905 |             WLEN(len);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3905:13: note: in expansion of macro 'WLEN'
 3905 |             WLEN(len);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3905:13: note: in expansion of macro 'WLEN'
 3905 |             WLEN(len);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3905:13: note: in expansion of macro 'WLEN'
 3905 |             WLEN(len);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3908:13: note: in expansion of macro 'PUTMARK'
 3908 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3908:13: note: in expansion of macro 'PUTMARK'
 3908 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3910:9: note: in expansion of macro 'WRITE'
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3910:9: note: in expansion of macro 'WRITE'
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3910:9: note: in expansion of macro 'WRITE'
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:3910:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |                          ^~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:3910:9: note: in expansion of macro 'WRITE'
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:3910:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |                          ^~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:3910:9: note: in expansion of macro 'WRITE'
 3910 |         WRITE(classname, len);          /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3922:9: note: in expansion of macro 'WLEN'
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3922:9: note: in expansion of macro 'WLEN'
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3922:9: note: in expansion of macro 'WLEN'
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |         ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3922:9: note: in expansion of macro 'WLEN'
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |         ^~~~
Storable.xs:3922:14: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |              ^~~~~
Storable.xs:799:29: note: in definition of macro 'MBUF_PUTINT'
  799 |             *(int *) mptr = i;                  \
      |                             ^
Storable.xs:3922:9: note: in expansion of macro 'WLEN'
 3922 |         WLEN(wlen2);                    /* Must write an I32 for 64-bit machines */
      |         ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3925:9: note: in expansion of macro 'PUTMARK'
 3925 |         PUTMARK(clen);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3925:9: note: in expansion of macro 'PUTMARK'
 3925 |         PUTMARK(clen);
      |         ^~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3928:9: note: in expansion of macro 'WRITE'
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3928:9: note: in expansion of macro 'WRITE'
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:3928:9: note: in expansion of macro 'WRITE'
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:3928:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |                   ^~~~~~~~~~~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:3928:9: note: in expansion of macro 'WRITE'
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:3928:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |                   ^~~~~~~~~~~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:3928:9: note: in expansion of macro 'WRITE'
 3928 |         WRITE(pv, (SSize_t)len2);       /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:3938:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3938 |             WLEN(len3);
      |                  ^~~~
Storable.xs:3938:13: note: in expansion of macro 'WLEN'
 3938 |             WLEN(len3);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3938:13: note: in expansion of macro 'WLEN'
 3938 |             WLEN(len3);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3938:13: note: in expansion of macro 'WLEN'
 3938 |             WLEN(len3);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3938:13: note: in expansion of macro 'WLEN'
 3938 |             WLEN(len3);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:3938:13: note: in expansion of macro 'WLEN'
 3938 |             WLEN(len3);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3943:13: note: in expansion of macro 'PUTMARK'
 3943 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:3943:13: note: in expansion of macro 'PUTMARK'
 3943 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:562:26: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  562 | #define LOW_32BITS(x)   ((I32) (x))
      |                         ~^~~~~~~~~~
Storable.xs:3963:36: note: in expansion of macro 'LOW_32BITS'
 3963 |                 I32 tagval = htonl(LOW_32BITS(ary[i]));
      |                                    ^~~~~~~~~~
Storable.xs:3963:30: warning: conversion to 'I32' {aka 'int'} from '__uint32_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3963 |                 I32 tagval = htonl(LOW_32BITS(ary[i]));
      |                              ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:3964:17: note: in expansion of macro 'WRITE_I32'
 3964 |                 WRITE_I32(tagval);
      |                 ^~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:3964:17: note: in expansion of macro 'WRITE_I32'
 3964 |                 WRITE_I32(tagval);
      |                 ^~~~~~~~~
Storable.xs: In function 'store_blessed':
Storable.xs:4059:11: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4059 |     len = strlen(classname);
      |           ^~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4073:9: note: in expansion of macro 'PUTMARK'
 4073 |         PUTMARK(SX_IX_BLESS);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4073:9: note: in expansion of macro 'PUTMARK'
 4073 |         PUTMARK(SX_IX_BLESS);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4076:13: note: in expansion of macro 'PUTMARK'
 4076 |             PUTMARK(cnum);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4076:13: note: in expansion of macro 'PUTMARK'
 4076 |             PUTMARK(cnum);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4079:13: note: in expansion of macro 'PUTMARK'
 4079 |             PUTMARK(flag);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4079:13: note: in expansion of macro 'PUTMARK'
 4079 |             PUTMARK(flag);
      |             ^~~~~~~
Storable.xs:4080:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4080 |             WLEN(classnum);
      |                  ^~~~~~~~
Storable.xs:4080:13: note: in expansion of macro 'WLEN'
 4080 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4080:13: note: in expansion of macro 'WLEN'
 4080 |             WLEN(classnum);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4080:13: note: in expansion of macro 'WLEN'
 4080 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4080:13: note: in expansion of macro 'WLEN'
 4080 |             WLEN(classnum);
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4080:13: note: in expansion of macro 'WLEN'
 4080 |             WLEN(classnum);
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4085:9: note: in expansion of macro 'PUTMARK'
 4085 |         PUTMARK(SX_BLESS);
      |         ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4085:9: note: in expansion of macro 'PUTMARK'
 4085 |         PUTMARK(SX_BLESS);
      |         ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4088:13: note: in expansion of macro 'PUTMARK'
 4088 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4088:13: note: in expansion of macro 'PUTMARK'
 4088 |             PUTMARK(clen);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4091:13: note: in expansion of macro 'PUTMARK'
 4091 |             PUTMARK(flag);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4091:13: note: in expansion of macro 'PUTMARK'
 4091 |             PUTMARK(flag);
      |             ^~~~~~~
Storable.xs:4092:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |                  ^~~
Storable.xs:4092:13: note: in expansion of macro 'WLEN'
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4092:13: note: in expansion of macro 'WLEN'
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4092:13: note: in expansion of macro 'WLEN'
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |             ^~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4092:13: note: in expansion of macro 'WLEN'
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |             ^~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:4092:13: note: in expansion of macro 'WLEN'
 4092 |             WLEN(len);  /* Don't BER-encode, this should be rare */
      |             ^~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4094:9: note: in expansion of macro 'WRITE'
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4094:9: note: in expansion of macro 'WRITE'
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4094:9: note: in expansion of macro 'WRITE'
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:4094:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |                          ^~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:4094:9: note: in expansion of macro 'WRITE'
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |         ^~~~~
Storable.xs:4094:26: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |                          ^~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:4094:9: note: in expansion of macro 'WRITE'
 4094 |         WRITE(classname, len);  /* Final \0 is omitted */
      |         ^~~~~
Storable.xs: In function 'store_other':
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1106:13: note: in expansion of macro 'PUTMARK'
 1106 |             PUTMARK(small);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1107:13: note: in expansion of macro 'PUTMARK'
 1107 |             PUTMARK(clen);                                      \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:1109:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1109 |                 WRITE(pv, ilen);                                \
      |                           ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1109:17: note: in expansion of macro 'WRITE'
 1109 |                 WRITE(pv, ilen);                                \
      |                 ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1111:13: note: in expansion of macro 'PUTMARK'
 1111 |             PUTMARK(SX_LOBJECT);                                \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1112:13: note: in expansion of macro 'PUTMARK'
 1112 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1114:13: note: in expansion of macro 'WRITE'
 1114 |             WRITE(pv, len);                                     \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:1117:13: note: in expansion of macro 'PUTMARK'
 1117 |             PUTMARK(large);                                     \
      |             ^~~~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:1118:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1118 |             WLEN(ilen);                                         \
      |                  ^~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1043:17: note: in expansion of macro 'MBUF_PUTINT'
 1043 |                 MBUF_PUTINT(y);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1048:17: note: in expansion of macro 'MBUF_PUTINT'
 1048 |                 MBUF_PUTINT(x);                                         \
      |                 ^~~~~~~~~~~
Storable.xs:1118:13: note: in expansion of macro 'WLEN'
 1118 |             WLEN(ilen);                                         \
      |             ^~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs:1119:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1119 |             WRITE(pv, ilen);                                    \
      |                       ^~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:1119:13: note: in expansion of macro 'WRITE'
 1119 |             WRITE(pv, ilen);                                    \
      |             ^~~~~
Storable.xs:1123:33: note: in expansion of macro 'STORE_PV_LEN'
 1123 | #define STORE_SCALAR(pv, len)   STORE_PV_LEN(pv, len, SX_SCALAR, SX_LSCALAR)
      |                                 ^~~~~~~~~~~~
Storable.xs:4145:9: note: in expansion of macro 'STORE_SCALAR'
 4145 |         STORE_SCALAR(buf, len);
      |         ^~~~~~~~~~~~
Storable.xs: In function 'store':
Storable.xs:4338:29: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4338 |             ltagval = htonl((I32)tagval);
      |                             ^~~~~~~~~~~
Storable.xs:4338:23: warning: conversion to 'I32' {aka 'int'} from '__uint32_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4338 |             ltagval = htonl((I32)tagval);
      |                       ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4343:13: note: in expansion of macro 'PUTMARK'
 4343 |             PUTMARK(SX_OBJECT);
      |             ^~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:782:13: note: in expansion of macro 'MBUF_XTEND'
  782 |             MBUF_XTEND(1);                      \
      |             ^~~~~~~~~~
Storable.xs:1011:13: note: in expansion of macro 'MBUF_PUTC'
 1011 |             MBUF_PUTC(x);                               \
      |             ^~~~~~~~~
Storable.xs:4343:13: note: in expansion of macro 'PUTMARK'
 4343 |             PUTMARK(SX_OBJECT);
      |             ^~~~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:4344:13: note: in expansion of macro 'WRITE_I32'
 4344 |             WRITE_I32(ltagval);
      |             ^~~~~~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:797:9: note: in expansion of macro 'MBUF_CHK'
  797 |         MBUF_CHK(sizeof(int));                  \
      |         ^~~~~~~~
Storable.xs:1020:13: note: in expansion of macro 'MBUF_PUTINT'
 1020 |             MBUF_PUTINT(x);                                     \
      |             ^~~~~~~~~~~
Storable.xs:4344:13: note: in expansion of macro 'WRITE_I32'
 4344 |             WRITE_I32(ltagval);
      |             ^~~~~~~~~
Storable.xs: In function 'magic_write':
Storable.xs:4475:16: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4475 |         length -= sizeof (magicstr) - 1;
      |                ^~
Storable.xs:4475:19: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 4475 |         length -= sizeof (magicstr) - 1;
      |                   ^~~~~~
Storable.xs:697:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                                              ^
Storable.xs:634:27: note: in definition of macro 'round_mgrow'
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                           ^
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4478:5: note: in expansion of macro 'WRITE'
 4478 |     WRITE( (unsigned char*) header, length);
      |     ^~~~~
Storable.xs:634:39: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-8192' to '4294959104' [-Wsign-conversion]
  634 |     ((STRLEN) (((STRLEN) (x) + MMASK) & ~MMASK))
      |                                       ^
Storable.xs:697:31: note: in expansion of macro 'round_mgrow'
  697 |         STRLEN nsz = (STRLEN) round_mgrow((x)+msiz);            \
      |                               ^~~~~~~~~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4478:5: note: in expansion of macro 'WRITE'
 4478 |     WRITE( (unsigned char*) header, length);
      |     ^~~~~
Storable.xs:627:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  627 | #define mptr    (cxt->membuf).aptr
      |                 ^
Storable.xs:698:25: note: in expansion of macro 'mptr'
  698 |         STRLEN offset = mptr - mbase;                           \
      |                         ^~~~
Storable.xs:711:13: note: in expansion of macro 'MBUF_XTEND'
  711 |             MBUF_XTEND(x);                      \
      |             ^~~~~~~~~~
Storable.xs:814:9: note: in expansion of macro 'MBUF_CHK'
  814 |         MBUF_CHK(s);                            \
      |         ^~~~~~~~
Storable.xs:1096:13: note: in expansion of macro 'MBUF_WRITE'
 1096 |             MBUF_WRITE(x,y);                                            \
      |             ^~~~~~~~~~
Storable.xs:4478:5: note: in expansion of macro 'WRITE'
 4478 |     WRITE( (unsigned char*) header, length);
      |     ^~~~~
Storable.xs:4478:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4478 |     WRITE( (unsigned char*) header, length);
      |                                     ^~~~~~
Storable.xs:815:25: note: in definition of macro 'MBUF_WRITE'
  815 |         memcpy(mptr, x, s);                     \
      |                         ^
Storable.xs:4478:5: note: in expansion of macro 'WRITE'
 4478 |     WRITE( (unsigned char*) header, length);
      |     ^~~~~
Storable.xs:4478:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4478 |     WRITE( (unsigned char*) header, length);
      |                                     ^~~~~~
../../embed.h:954:61: note: in definition of macro 'PerlIO_write'
  954 | #define PerlIO_write(a,b,c)     Perl_PerlIO_write(aTHX_ a,b,c)
      |                                                             ^
Storable.xs:4478:5: note: in expansion of macro 'WRITE'
 4478 |     WRITE( (unsigned char*) header, length);
      |     ^~~~~
Storable.xs: In function 'mbuf2sv':
Storable.xs:655:31: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  655 | #define MBUF_SIZE()     (mptr - mbase)
      |                         ~~~~~~^~~~~~~~
../../embed.h:395:54: note: in definition of macro 'newSVpv'
  395 | #define newSVpv(a,b)            Perl_newSVpv(aTHX_ a,b)
      |                                                      ^
Storable.xs:4628:27: note: in expansion of macro 'MBUF_SIZE'
 4628 |     return newSVpv(mbase, MBUF_SIZE());
      |                           ^~~~~~~~~
Storable.xs: In function 'retrieve_idx_blessed':
Storable.xs:4680:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4680 |         RLEN(idx);
      |              ^~~
Storable.xs:4680:9: note: in expansion of macro 'RLEN'
 4680 |         RLEN(idx);
      |         ^~~~
Storable.xs: In function 'retrieve_blessed':
Storable.xs:1148:29: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:4732:9: note: in expansion of macro 'RLEN'
 4732 |         RLEN(len);
      |         ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:4732:9: note: in expansion of macro 'RLEN'
 4732 |         RLEN(len);
      |         ^~~~
Storable.xs:4744:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4744 |     SAFEPVREAD(classname, (I32)len, malloced_classname);
      |                           ^~~~~~~~
Storable.xs:769:29: note: in definition of macro 'MBUF_SAFEPVREAD'
  769 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:4744:5: note: in expansion of macro 'SAFEPVREAD'
 4744 |     SAFEPVREAD(classname, (I32)len, malloced_classname);
      |     ^~~~~~~~~~
Storable.xs:4744:27: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4744 |     SAFEPVREAD(classname, (I32)len, malloced_classname);
      |                           ^~~~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:4744:5: note: in expansion of macro 'SAFEPVREAD'
 4744 |     SAFEPVREAD(classname, (I32)len, malloced_classname);
      |     ^~~~~~~~~~
Storable.xs: In function 'retrieve_hook_common':
Storable.xs:1148:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:4908:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 4908 |             RLEN(idx);
      |                  ^~~
Storable.xs:4908:13: note: in expansion of macro 'RLEN'
 4908 |             RLEN(idx);
      |             ^~~~
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:4931:13: note: in expansion of macro 'RLEN'
 4931 |             RLEN(len);
      |             ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:4931:13: note: in expansion of macro 'RLEN'
 4931 |             RLEN(len);
      |             ^~~~
Storable.xs:1148:29: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:4947:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4947 |         SAFEPVREAD(classname, (I32)len, malloced_classname);
      |                               ^~~~~~~~
Storable.xs:769:29: note: in definition of macro 'MBUF_SAFEPVREAD'
  769 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:4947:9: note: in expansion of macro 'SAFEPVREAD'
 4947 |         SAFEPVREAD(classname, (I32)len, malloced_classname);
      |         ^~~~~~~~~~
Storable.xs:4947:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4947 |         SAFEPVREAD(classname, (I32)len, malloced_classname);
      |                               ^~~~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:4947:9: note: in expansion of macro 'SAFEPVREAD'
 4947 |         SAFEPVREAD(classname, (I32)len, malloced_classname);
      |         ^~~~~~~~~~
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:4978:9: note: in expansion of macro 'RLEN'
 4978 |         RLEN(len32);
      |         ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:4978:9: note: in expansion of macro 'RLEN'
 4978 |         RLEN(len32);
      |         ^~~~
Storable.xs:1148:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:5002:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5002 |             RLEN(len3);
      |                  ^~~~
Storable.xs:5002:13: note: in expansion of macro 'RLEN'
 5002 |             RLEN(len3);
      |             ^~~~
Storable.xs:737:21: warning: conversion to 'ntag_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1157:13: note: in expansion of macro 'MBUF_GETINT'
 1157 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:5052:13: note: in expansion of macro 'READ_I32'
 5052 |             READ_I32(tag);
      |             ^~~~~~~~
Storable.xs:5056:40: warning: conversion to 'ssize_t' {aka 'int'} from 'ntag_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5056 |             svh = av_fetch(cxt->aseen, tag, FALSE);
      |                                        ^~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:5134:5: note: in expansion of macro 'BLESS'
 5134 |     BLESS(sv, stash);
      |     ^~~~~
In file included from ../../perl.h:4170:
../../av.h:86:38: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1073741825' to '3221225471' [-Wsign-conversion]
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
../../av.h:86:38: note: in definition of macro 'AvREAL_off'
   86 | #define AvREAL_off(av)  (SvFLAGS(av) &= ~SVpav_REAL)
      |                                      ^~
Storable.xs: In function 'retrieve_ref':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5299:5: note: in expansion of macro 'SEEN_NN'
 5299 |     SEEN_NN(rv, stash, 0);      /* Will return if rv is null */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_overloaded':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5382:5: note: in expansion of macro 'SEEN_NN'
 5382 |     SEEN_NN(rv, stash, 0);           /* Will return if rv is null */
      |     ^~~~~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:5408:10: note: in expansion of macro 'Gv_AMG'
 5408 |     if (!Gv_AMG(stash)) {
      |          ^~~~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:5413:14: note: in expansion of macro 'Gv_AMG'
 5413 |         if (!Gv_AMG(stash)) {
      |              ^~~~~~
Storable.xs: In function 'retrieve_tied_array':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5472:5: note: in expansion of macro 'SEEN_NN'
 5472 |     SEEN_NN(tv, stash, 0);              /* Will return if tv is null */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_tied_hash':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5506:5: note: in expansion of macro 'SEEN_NN'
 5506 |     SEEN_NN(tv, stash, 0);              /* Will return if tv is null */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_tied_scalar':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5540:5: note: in expansion of macro 'SEEN_NN'
 5540 |     SEEN_NN(tv, stash, 0);              /* Will return if rv is null */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_tied_key':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5583:5: note: in expansion of macro 'SEEN_NN'
 5583 |     SEEN_NN(tv, stash, 0);              /* Will return if tv is null */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_tied_idx':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5621:5: note: in expansion of macro 'SEEN_NN'
 5621 |     SEEN_NN(tv, stash, 0);              /* Will return if tv is null */
      |     ^~~~~~~
Storable.xs:5626:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5626 |     RLEN(idx);                          /* Retrieve <idx> */
      |          ^~~
Storable.xs:5626:5: note: in expansion of macro 'RLEN'
 5626 |     RLEN(idx);                          /* Retrieve <idx> */
      |     ^~~~
Storable.xs: In function 'get_lstring':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5653:5: note: in expansion of macro 'SEEN_NN'
 5653 |     SEEN_NN(sv, stash, 0);      /* Associate this new scalar with tag "tagnum" */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_lscalar':
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:5723:5: note: in expansion of macro 'RLEN'
 5723 |     RLEN(len);
      |     ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:5723:5: note: in expansion of macro 'RLEN'
 5723 |     RLEN(len);
      |     ^~~~
Storable.xs: In function 'retrieve_lutf8str':
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:5775:5: note: in expansion of macro 'RLEN'
 5775 |     RLEN(len);
      |     ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:5775:5: note: in expansion of macro 'RLEN'
 5775 |     RLEN(len);
      |     ^~~~
Storable.xs: In function 'retrieve_vstring':
Storable.xs:5799:13: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5799 |     READ(s, len);
      |             ^~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:5799:5: note: in expansion of macro 'READ'
 5799 |     READ(s, len);
      |     ^~~~
Storable.xs:5799:13: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5799 |     READ(s, len);
      |             ^~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:5799:5: note: in expansion of macro 'READ'
 5799 |     READ(s, len);
      |     ^~~~
Storable.xs: In function 'retrieve_lvstring':
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:5827:5: note: in expansion of macro 'RLEN'
 5827 |     RLEN(len);
      |     ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:5827:5: note: in expansion of macro 'RLEN'
 5827 |     RLEN(len);
      |     ^~~~
Storable.xs:5839:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5839 |     SAFEPVREAD(s, (I32)len, s);
      |                   ^~~~~~~~
Storable.xs:769:29: note: in definition of macro 'MBUF_SAFEPVREAD'
  769 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:5839:5: note: in expansion of macro 'SAFEPVREAD'
 5839 |     SAFEPVREAD(s, (I32)len, s);
      |     ^~~~~~~~~~
Storable.xs:5839:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5839 |     SAFEPVREAD(s, (I32)len, s);
      |                   ^~~~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:5839:5: note: in expansion of macro 'SAFEPVREAD'
 5839 |     SAFEPVREAD(s, (I32)len, s);
      |     ^~~~~~~~~~
Storable.xs:5846:43: warning: conversion to 'I32' {aka 'const int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5846 |     sv_magic(sv,NULL,PERL_MAGIC_vstring,s,len);
      |                                           ^~~
../../embed.h:636:61: note: in definition of macro 'sv_magic'
  636 | #define sv_magic(a,b,c,d,e)     Perl_sv_magic(aTHX_ a,b,c,d,e)
      |                                                             ^
Storable.xs: In function 'retrieve_integer':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5877:5: note: in expansion of macro 'SEEN_NN'
 5877 |     SEEN_NN(sv, stash, 0);      /* Associate this new scalar with tag "tagnum" */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_netint':
Storable.xs:5984:30: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5984 |     sv = newSViv((int) ntohl(iv));
      |                              ^~
../../embed.h:393:52: note: in definition of macro 'newSViv'
  393 | #define newSViv(a)              Perl_newSViv(aTHX_ a)
      |                                                    ^
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:5991:5: note: in expansion of macro 'SEEN_NN'
 5991 |     SEEN_NN(sv, stash, 0);      /* Associate this new scalar with tag "tagnum" */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_double':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6015:5: note: in expansion of macro 'SEEN_NN'
 6015 |     SEEN_NN(sv, stash, 0);      /* Associate this new scalar with tag "tagnum" */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_byte':
Storable.xs:6045:11: warning: conversion from 'int' to 'signed char' may change value [-Wconversion]
 6045 |     tmp = (unsigned char) siv - 128;
      |           ^
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6048:5: note: in expansion of macro 'SEEN_NN'
 6048 |     SEEN_NN(sv, stash, 0);      /* Associate this new scalar with tag "tagnum" */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_undef':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6070:5: note: in expansion of macro 'SEEN_NN'
 6070 |     SEEN_NN(sv, stash, 0);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_sv_undef':
Storable.xs:6091:31: warning: conversion to 'ntag_t' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 6091 |         cxt->where_is_undef = cxt->tagnum;
      |                               ^~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6094:5: note: in expansion of macro 'SEEN_NN'
 6094 |     SEEN_NN(sv, stash, 1);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_sv_yes':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6111:5: note: in expansion of macro 'SEEN_NN'
 6111 |     SEEN_NN(sv, stash, 1);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_sv_no':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6128:5: note: in expansion of macro 'SEEN_NN'
 6128 |     SEEN_NN(sv, stash, 1);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_svundef_elem':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6145:5: note: in expansion of macro 'SEEN_NN'
 6145 |     SEEN_NN(&PL_sv_undef, cname, 1);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_array':
Storable.xs:6173:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6173 |     RLEN(len);
      |          ^~~
Storable.xs:6173:5: note: in expansion of macro 'RLEN'
 6173 |     RLEN(len);
      |     ^~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6177:5: note: in expansion of macro 'SEEN_NN'
 6177 |     SEEN_NN(av, stash, 0); /* Will return if array not allocated nicely */
      |     ^~~~~~~
Storable.xs: In function 'retrieve_hash':
Storable.xs:6366:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6366 |     RLEN(len);
      |          ^~~
Storable.xs:6366:5: note: in expansion of macro 'RLEN'
 6366 |     RLEN(len);
      |     ^~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6370:5: note: in expansion of macro 'SEEN_NN'
 6370 |     SEEN_NN(hv, stash, 0);      /* Will return if table not allocated properly */
      |     ^~~~~~~
Storable.xs:6397:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6397 |         RLEN(size);             /* Get key size */
      |              ^~~~
Storable.xs:6397:9: note: in expansion of macro 'RLEN'
 6397 |         RLEN(size);             /* Get key size */
      |         ^~~~
Storable.xs:6400:24: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6400 |             READ(kbuf, size);
      |                        ^~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:6400:13: note: in expansion of macro 'READ'
 6400 |             READ(kbuf, size);
      |             ^~~~
Storable.xs:6400:24: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6400 |             READ(kbuf, size);
      |                        ^~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:6400:13: note: in expansion of macro 'READ'
 6400 |             READ(kbuf, size);
      |             ^~~~
Storable.xs:6408:32: warning: conversion to 'I32' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 6408 |         if (hv_store(hv, kbuf, (U32) size, sv, 0) == 0)
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Storable.xs:6408:13: note: in expansion of macro 'hv_store'
 6408 |         if (hv_store(hv, kbuf, (U32) size, sv, 0) == 0)
      |             ^~~~~~~~
Storable.xs: In function 'retrieve_flag_hash':
Storable.xs:6456:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6456 |     RLEN(len);
      |          ^~~
Storable.xs:6456:5: note: in expansion of macro 'RLEN'
 6456 |     RLEN(len);
      |     ^~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6460:5: note: in expansion of macro 'SEEN_NN'
 6460 |     SEEN_NN(hv, stash, 0);      /* Will return if table not allocated properly */
      |     ^~~~~~~
Storable.xs:6531:18: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6531 |             RLEN(size);         /* Get key size */
      |                  ^~~~
Storable.xs:6531:13: note: in expansion of macro 'RLEN'
 6531 |             RLEN(size);         /* Get key size */
      |             ^~~~
Storable.xs:6534:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6534 |                 READ(kbuf, size);
      |                            ^~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:6534:17: note: in expansion of macro 'READ'
 6534 |                 READ(kbuf, size);
      |                 ^~~~
Storable.xs:6534:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6534 |                 READ(kbuf, size);
      |                            ^~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:6534:17: note: in expansion of macro 'READ'
 6534 |                 READ(kbuf, size);
      |                 ^~~~
../../hv.h:492:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  492 |     ((SV**) hv_common((hv), NULL, (key), (klen), (flags),               \
      |                                          ^~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
Storable.xs:6544:17: note: in expansion of macro 'hv_store_flags'
 6544 |             if (hv_store_flags(hv, kbuf, size, sv, 0, store_flags) == 0)
      |                 ^~~~~~~~~~~~~~
Storable.xs: In function 'retrieve_code':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6589:5: note: in expansion of macro 'SEEN_NN'
 6589 |     SEEN_NN(sv, stash, 0);
      |     ^~~~~~~
Storable.xs: In function 'retrieve_regexp':
Storable.xs:737:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 |                 x = *(int *) mptr;              \
      |                     ^
Storable.xs:1168:13: note: in expansion of macro 'MBUF_GETINT'
 1168 |             MBUF_GETINT(x);                                             \
      |             ^~~~~~~~~~~
Storable.xs:6711:9: note: in expansion of macro 'RLEN'
 6711 |         RLEN(re_len);
      |         ^~~~
Storable.xs:1173:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1173 |             x = (int) ntohl(x);                                         \
      |                 ^
Storable.xs:6711:9: note: in expansion of macro 'RLEN'
 6711 |         RLEN(re_len);
      |         ^~~~
Storable.xs:1148:29: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
Storable.xs:1148:29: note: in definition of macro 'GETMARK'
 1148 |         else if ((int) (x = PerlIO_getc(cxt->fio)) == EOF)              \
      |                             ^~~~~~~~~~~
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:1280:13: note: in expansion of macro 'BLESS'
 1280 |             BLESS((SV *)(y), (HV *)(stash));                            \
      |             ^~~~~
Storable.xs:6753:5: note: in expansion of macro 'SEEN_NN'
 6753 |     SEEN_NN(sv, stash, 0);
      |     ^~~~~~~
Storable.xs: In function 'old_retrieve_array':
Storable.xs:6789:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6789 |     RLEN(len);
      |          ^~~
Storable.xs:6789:5: note: in expansion of macro 'RLEN'
 6789 |     RLEN(len);
      |     ^~~~
Storable.xs: In function 'old_retrieve_hash':
Storable.xs:6852:10: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6852 |     RLEN(len);
      |          ^~~
Storable.xs:6852:5: note: in expansion of macro 'RLEN'
 6852 |     RLEN(len);
      |     ^~~~
Storable.xs:6899:14: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6899 |         RLEN(size);                             /* Get key size */
      |              ^~~~
Storable.xs:6899:9: note: in expansion of macro 'RLEN'
 6899 |         RLEN(size);                             /* Get key size */
      |         ^~~~
Storable.xs:6902:24: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6902 |             READ(kbuf, size);
      |                        ^~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:6902:13: note: in expansion of macro 'READ'
 6902 |             READ(kbuf, size);
      |             ^~~~
Storable.xs:6902:24: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6902 |             READ(kbuf, size);
      |                        ^~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:6902:13: note: in expansion of macro 'READ'
 6902 |             READ(kbuf, size);
      |             ^~~~
Storable.xs:6910:32: warning: conversion to 'I32' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 6910 |         if (hv_store(hv, kbuf, (U32) size, sv, 0) == 0)
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Storable.xs:6910:13: note: in expansion of macro 'hv_store'
 6910 |         if (hv_store(hv, kbuf, (U32) size, sv, 0) == 0)
      |             ^~~~~~~~
Storable.xs: In function 'magic_check':
Storable.xs:6966:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6966 |         READ(buf, (SSize_t)(len));      /* Not null-terminated */
      |                   ^~~~~~~~~~~~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:6966:9: note: in expansion of macro 'READ'
 6966 |         READ(buf, (SSize_t)(len));      /* Not null-terminated */
      |         ^~~~
Storable.xs:6966:19: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6966 |         READ(buf, (SSize_t)(len));      /* Not null-terminated */
      |                   ^~~~~~~~~~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:6966:9: note: in expansion of macro 'READ'
 6966 |         READ(buf, (SSize_t)(len));      /* Not null-terminated */
      |         ^~~~
Storable.xs:6980:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6980 |             READ(current + 1, (SSize_t)(old_len - len));
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:6980:13: note: in expansion of macro 'READ'
 6980 |             READ(current + 1, (SSize_t)(old_len - len));
      |             ^~~~
Storable.xs:6980:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6980 |             READ(current + 1, (SSize_t)(old_len - len));
      |                               ^~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:6980:13: note: in expansion of macro 'READ'
 6980 |             READ(current + 1, (SSize_t)(old_len - len));
      |             ^~~~
Storable.xs:7074:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7074 |     READ(buf, length);  /* Not null-terminated */
      |               ^~~~~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:7074:5: note: in expansion of macro 'READ'
 7074 |     READ(buf, length);  /* Not null-terminated */
      |     ^~~~
Storable.xs:7074:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7074 |     READ(buf, length);  /* Not null-terminated */
      |               ^~~~~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:7074:5: note: in expansion of macro 'READ'
 7074 |     READ(buf, length);  /* Not null-terminated */
      |     ^~~~
Storable.xs:7089:39: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7089 |           || memNE(buf, byteorderstr, c))
      |                                       ^
../../handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
Storable.xs:7089:14: note: in expansion of macro 'memNE'
 7089 |           || memNE(buf, byteorderstr, c))
      |              ^~~~~
Storable.xs: In function 'retrieve':
Storable.xs:7203:21: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7203 |         tag = ntohl(tag);
      |                     ^~~
Storable.xs:7203:15: warning: conversion to 'I32' {aka 'int'} from '__uint32_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7203 |         tag = ntohl(tag);
      |               ^~~~~
Storable.xs:7216:36: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 7216 |         svh = av_fetch(cxt->aseen, (U32)tag, FALSE);
      |                                    ^~~~~~~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
Storable.xs:7269:22: warning: conversion to '__uint32_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7269 |                 RLEN(len);
      |                      ^~~
Storable.xs:7269:17: note: in expansion of macro 'RLEN'
 7269 |                 RLEN(len);
      |                 ^~~~
Storable.xs:7277:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7277 |                 READ(kbuf, len);
      |                            ^~~
Storable.xs:749:29: note: in definition of macro 'MBUF_READ'
  749 |             memcpy(x, mptr, s);                 \
      |                             ^
Storable.xs:7277:17: note: in expansion of macro 'READ'
 7277 |                 READ(kbuf, len);
      |                 ^~~~
Storable.xs:7277:28: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7277 |                 READ(kbuf, len);
      |                            ^~~
../../embed.h:944:60: note: in definition of macro 'PerlIO_read'
  944 | #define PerlIO_read(a,b,c)      Perl_PerlIO_read(aTHX_ a,b,c)
      |                                                            ^
Storable.xs:7277:17: note: in expansion of macro 'READ'
 7277 |                 READ(kbuf, len);
      |                 ^~~~
Storable.xs:7279:39: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7279 |             stash = gv_stashpvn(kbuf, len, GV_ADD);
      |                                       ^~~
../../embed.h:243:58: note: in definition of macro 'gv_stashpvn'
  243 | #define gv_stashpvn(a,b,c)      Perl_gv_stashpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:1302:48: note: in expansion of macro 'Gv_AMG'
 1302 |             if (cxt->in_retrieve_overloaded && Gv_AMG(stash)) {         \
      |                                                ^~~~~~
Storable.xs:7280:13: note: in expansion of macro 'BLESS'
 7280 |             BLESS(sv, stash);
      |             ^~~~~
Storable.xs: In function 'do_retrieve':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
Storable.xs:7503:22: note: in expansion of macro 'Gv_AMG'
 7503 |         if (stash && Gv_AMG(stash)) {
      |                      ^~~~~~
Storable.xs: In function 'dclone':
Storable.xs:655:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  655 | #define MBUF_SIZE()     (mptr - mbase)
      |                         ^
Storable.xs:7607:12: note: in expansion of macro 'MBUF_SIZE'
 7607 |     size = MBUF_SIZE();
      |            ^~~~~~~~~
In file included from ../../perl.h:4161:
Storable.c: In function 'boot_Storable':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Storable.c:8033:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 8033 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Storable.c:8033:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 8033 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Storable/Storable.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Storable.o  -o ../../lib/auto/Storable/Storable.so  \
      \
  
chmod 755 ../../lib/auto/Storable/Storable.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Storable'
./miniperl_top make_ext_Makefile.pl dist/threads/Makefile.PL
Creating dist/threads/Makefile.PL for threads
cd dist/threads/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for threads
cp -f dist/Devel-PPPort/ppport.h dist/threads/ppport.h
make -C dist/threads/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads'
cp lib/threads.pm ../../lib/threads.pm
Running Mkbootstrap for threads ()
chmod 644 "threads.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- threads.bs ../../lib/auto/threads/threads.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads/../../lib/ExtUtils/typemap'  threads.xs > threads.xsc
mv threads.xsc threads.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.27\" -DXS_VERSION=\"2.27\" -fPIC -Wno-unused-function "-I../.."   threads.c
In file included from ../../perl.h:7246,
                 from threads.xs:9:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
threads.xs: In function 'S_ithread_run':
threads.xs:675:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  675 |         my_exit(exit_code);
      |                 ^~~~~~~~~
../../embed.h:337:52: note: in definition of macro 'my_exit'
  337 | #define my_exit(a)              Perl_my_exit(aTHX_ a)
      |                                                    ^
In file included from ../../perl.h:3003:
threads.xs: In function 'S_ithread_create':
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
threads.xs:890:13: note: in expansion of macro 'Copy'
  890 |             Copy(parent_perl->Istack_base + params_start, array, num_params, SV *);
      |             ^~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
In file included from ../../perl.h:4161:
threads.c: In function 'boot_threads':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
threads.c:2199:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2199 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
threads.c:2199:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2199 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/threads/threads.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  threads.o  -o ../../lib/auto/threads/threads.so  \
   -lpthread   \
  
chmod 755 ../../lib/auto/threads/threads.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads'
./miniperl_top make_ext_Makefile.pl dist/threads-shared/Makefile.PL
Creating dist/threads-shared/Makefile.PL for threads::shared
cd dist/threads-shared/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for threads::shared
cp -f dist/Devel-PPPort/ppport.h dist/threads-shared/ppport.h
make -C dist/threads-shared/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads-shared'
cp lib/threads/shared.pm ../../lib/threads/shared.pm
Running Mkbootstrap for shared ()
chmod 644 "shared.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads-shared/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- shared.bs ../../lib/auto/threads/shared/shared.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads-shared/../../lib/ExtUtils/typemap'  shared.xs > shared.xsc
mv shared.xsc shared.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.64\" -DXS_VERSION=\"1.64\" -fPIC -Wno-unused-function "-I../.."   shared.c
In file included from ../../perl.h:7246,
                 from shared.xs:131:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
shared.xs: In function 'S_get_RV':
../../sv.h:1154:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1048577' to '4293918719' [-Wsign-conversion]
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
../../sv.h:1154:46: note: in definition of macro 'SvOBJECT_off'
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
shared.xs: In function 'sharedsv_scalar_store':
../../sv.h:1154:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1048577' to '4293918719' [-Wsign-conversion]
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
../../sv.h:1154:46: note: in definition of macro 'SvOBJECT_off'
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1154:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1048577' to '4293918719' [-Wsign-conversion]
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
../../sv.h:1154:46: note: in definition of macro 'SvOBJECT_off'
 1154 | #define SvOBJECT_off(sv)        (SvFLAGS(sv) &= ~SVs_OBJECT)
      |                                              ^~
shared.xs: In function 'sharedsv_elem_mg_FETCH':
shared.xs:975:23: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  975 |                 len = slen;
      |                       ^~~~
shared.xs: In function 'sharedsv_elem_mg_STORE':
shared.xs:1029:19: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1029 |             len = slen;
      |                   ^~~~
shared.xs: In function 'sharedsv_elem_mg_DELETE':
shared.xs:1073:19: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1073 |             len = slen;
      |                   ^~~~
In file included from ../../perl.h:5841:
shared.xs: In function 'sharedsv_array_mg_FETCHSIZE':
../../embed.h:65:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   65 | #define av_len(a)               Perl_av_len(aTHX_ a)
      |                                 ^~~~~~~~~~~
../../embed.h:65:33: note: in definition of macro 'av_len'
   65 | #define av_len(a)               Perl_av_len(aTHX_ a)
      |                                 ^~~~~~~~~~~
In file included from ../../perl.h:4168:
../../hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
shared.xs:1127:15: note: in expansion of macro 'HvUSEDKEYS'
 1127 |         val = HvUSEDKEYS((HV*) ssv);
      |               ^~~~~~~~~~
shared.xs: In function 'XS_threads__shared__tie_EXISTS':
shared.xs:1462:19: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1462 |             len = slen;
      |                   ^~~~
shared.xs: In function 'XS_threads__shared__tie_FIRSTKEY':
shared.xs:1490:41: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1490 |             ST(0) = newSVpvn_flags(key, len, SVs_TEMP | (utf8 ? SVf_UTF8 : 0));
      |                                         ^~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
shared.xs: In function 'XS_threads__shared__tie_NEXTKEY':
shared.xs:1517:41: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1517 |             ST(0) = newSVpvn_flags(key, len, SVs_TEMP | (utf8 ? SVf_UTF8 : 0));
      |                                         ^~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
shared.xs: In function 'XS_threads__shared__refcnt':
../../sv.h:344:29: warning: conversion to 'IV' {aka 'const long int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  344 | #define SvREFCNT(sv)    (sv)->sv_refcnt
      |                         ~~~~^~~~~~~~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
shared.xs:1565:28: note: in expansion of macro 'newSViv'
 1565 |         ST(0) = sv_2mortal(newSViv(SvREFCNT(ssv)));
      |                            ^~~~~~~
shared.xs:1565:36: note: in expansion of macro 'SvREFCNT'
 1565 |         ST(0) = sv_2mortal(newSViv(SvREFCNT(ssv)));
      |                                    ^~~~~~~~
In file included from ../../perl.h:4161:
shared.c: In function 'boot_threads__shared':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shared.c:2153:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2153 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shared.c:2153:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2153 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/threads/shared/shared.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  shared.o  -o ../../lib/auto/threads/shared/shared.so  \
   -lpthread   \
  
chmod 755 ../../lib/auto/threads/shared/shared.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/threads-shared'
cd dist/Time-HiRes/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Configuring Time::HiRes...
Using hints hints/linux.pl...
Extra libraries: -lrt...
Have syscall()... looking for syscall.h... found <syscall.h>.
Looking for gettimeofday()... found.
Looking for setitimer()... found.
Looking for getitimer()... found.
You have interval timers (both setitimer and getitimer).
Looking for ualarm()... found.
Looking for usleep()... found.
Looking for nanosleep()... believing $Config{d_nanosleep}... found.
You can mix subsecond sleeps with signals, if you want to.
(It's still not portable, though.)
Looking for clockid_t... found.
Looking for clock_gettime()... found.
Looking for clock_getres()... found.
Looking for clock_nanosleep()... found.
Looking for clock()... found.
Looking for working futimens()... found.
Looking for working utimensat()... found.
You seem to have subsecond timestamp setting.
Looking for stat() subsecond timestamps...
Trying struct stat st_atimespec.tv_nsec...NOT found.
Trying struct stat st_atimensec...NOT found.
Trying struct stat st_atime_n...NOT found.
Trying struct stat st_atim.tv_nsec...found.
Trying struct stat st_uatime...NOT found.
You seem to have subsecond timestamp reading.
(Your struct stat has them, but the filesystems must help.)
Generating a Unix-style Makefile
Writing Makefile for Time::HiRes
cp -f dist/Devel-PPPort/ppport.h dist/Time-HiRes/ppport.h
make -C dist/Time-HiRes/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Time-HiRes'
cp HiRes.pm ../../lib/Time/HiRes.pm
Running Mkbootstrap for HiRes ()
chmod 644 "HiRes.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Time-HiRes/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- HiRes.bs ../../lib/auto/Time/HiRes/HiRes.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Time-HiRes/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Time-HiRes/typemap'  HiRes.xs > HiRes.xsc
mv HiRes.xsc HiRes.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.9770\" -DXS_VERSION=\"1.9770\" -fPIC -Wno-unused-function "-I../.."  -DTIME_HIRES_NANOSLEEP -DTIME_HIRES_CLOCKID_T -DTIME_HIRES_CLOCK_GETTIME -DTIME_HIRES_CLOCK_GETRES -DTIME_HIRES_CLOCK_NANOSLEEP -DTIME_HIRES_CLOCK -DHAS_FUTIMENS -DHAS_UTIMENSAT -DTIME_HIRES_UTIME -DTIME_HIRES_STAT_XTIM -DTIME_HIRES_STAT=4 HiRes.c
In file included from ../../perl.h:7246,
                 from HiRes.xs:19:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
HiRes.xs: In function 'myU2time':
HiRes.xs:614:14: warning: conversion to 'UV' {aka 'long unsigned int'} from '__time_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  614 |     ret[0] = Tp.tv_sec;
      |              ^~
HiRes.xs:615:14: warning: conversion to 'UV' {aka 'long unsigned int'} from '__suseconds_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  615 |     ret[1] = Tp.tv_usec;
      |              ^~
In file included from ../../perl.h:5810:
HiRes.xs: In function 'hrstatns':
../../embedvar.h:290:33: warning: conversion to 'UV' {aka 'long unsigned int'} from '__syscall_slong_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  290 | #define PL_statcache            (vTHX->Istatcache)
      |                                 ^
HiRes.xs:650:19: note: in expansion of macro 'PL_statcache'
  650 |     *atime_nsec = PL_statcache.st_atim.tv_nsec;
      |                   ^~~~~~~~~~~~
../../embedvar.h:290:33: warning: conversion to 'UV' {aka 'long unsigned int'} from '__syscall_slong_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  290 | #define PL_statcache            (vTHX->Istatcache)
      |                                 ^
HiRes.xs:651:19: note: in expansion of macro 'PL_statcache'
  651 |     *mtime_nsec = PL_statcache.st_mtim.tv_nsec;
      |                   ^~~~~~~~~~~~
../../embedvar.h:290:33: warning: conversion to 'UV' {aka 'long unsigned int'} from '__syscall_slong_t' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  290 | #define PL_statcache            (vTHX->Istatcache)
      |                                 ^
HiRes.xs:652:19: note: in expansion of macro 'PL_statcache'
  652 |     *ctime_nsec = PL_statcache.st_ctim.tv_nsec;
      |                   ^~~~~~~~~~~~
HiRes.xs: In function 'XS_Time__HiRes_usleep':
HiRes.xs:966:27: warning: conversion to 'unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  966 |                     sleep(seconds);
      |                           ^~~~~~~
HiRes.xs: In function 'XS_Time__HiRes_alarm':
HiRes.xs:61:16: warning: conversion from 'NV' {aka 'double'} to 'IV' {aka 'long int'} may change value [-Wfloat-conversion]
   61 | #define IV_1E6 1000000
      |                ^~~~~~~
HiRes.xs:61:16: note: in definition of macro 'IV_1E6'
   61 | #define IV_1E6 1000000
      |                ^~~~~~~
HiRes.xs:61:16: warning: conversion from 'NV' {aka 'double'} to 'IV' {aka 'long int'} may change value [-Wfloat-conversion]
   61 | #define IV_1E6 1000000
      |                ^~~~~~~
HiRes.xs:61:16: note: in definition of macro 'IV_1E6'
   61 | #define IV_1E6 1000000
      |                ^~~~~~~
In file included from ../../perl.h:4161:
HiRes.c: In function 'boot_Time__HiRes':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HiRes.c:2209:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2209 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HiRes.c:2209:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2209 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Time/HiRes/HiRes.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  HiRes.o  -o ../../lib/auto/Time/HiRes/HiRes.so  \
   -lrt   \
  
chmod 755 ../../lib/auto/Time/HiRes/HiRes.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Time-HiRes'
./miniperl_top lib/unicore/mktables -w -C lib/unicore -P pod -maketest -makelist -p
Processing PropertyAliases.txt
Finishing property setup
Processing PropValueAliases.txt
Processing extracted/DGeneralCategory.txt
Processing extracted/DCombiningClass.txt
Processing extracted/DNumType.txt
Processing extracted/DEastAsianWidth.txt
Processing extracted/DLineBreak.txt
Processing extracted/DBidiClass.txt
Processing extracted/DDecompositionType.txt
Processing extracted/DBinaryProperties.txt
Processing extracted/DNumValues.txt
Processing extracted/DJoinGroup.txt
Processing extracted/DJoinType.txt
Processing Jamo.txt
Processing UnicodeData.txt
Processing ArabicShaping.txt
Processing Blocks.txt
Processing PropList.txt
Processing SpecialCasing.txt
Processing LineBreak.txt
Processing EastAsianWidth.txt
Processing CompositionExclusions.txt
Processing BidiMirroring.txt
Processing CaseFolding.txt
Processing DCoreProperties.txt
Processing Scripts.txt
Processing DNormalizationProps.txt
Processing DAge.txt
Processing HangulSyllableType.txt
Processing auxiliary/WordBreakProperty.txt
Processing auxiliary/GraphemeBreakProperty.txt
Processing auxiliary/GCBTest.txt
Processing auxiliary/SBTest.txt
Processing auxiliary/WBTest.txt
Processing auxiliary/SentenceBreakProperty.txt
Processing NamedSequences.txt
Processing NameAliases.txt
Processing auxiliary/LBTest.txt
Processing ScriptExtensions.txt
Processing IndicSyllabicCategory.txt
Processing BidiBrackets.txt
Processing IndicPositionalCategory.txt
Processing VerticalOrientation.txt
Processing EquivalentUnifiedIdeograph.txt
Processing emoji/emoji.txt
Processing IdStatus.txt
Processing IdType.txt
Finishing processing Unicode properties
Compiling Perl properties
Creating Perl synonyms
Writing tables
Making pod file
Making test script
Updating 'mktables.lst'
cd dist/Unicode-Normalize/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Making header files for XS...
Generating a Unix-style Makefile
Writing Makefile for Unicode::Normalize
cp -f dist/Devel-PPPort/ppport.h dist/Unicode-Normalize/ppport.h
make -C dist/Unicode-Normalize/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Unicode-Normalize'
cp Normalize.pm ../../lib/Unicode/Normalize.pm
Running Mkbootstrap for Normalize ()
chmod 644 "Normalize.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Unicode-Normalize/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Normalize.bs ../../lib/auto/Unicode/Normalize/Normalize.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Unicode-Normalize/../../lib/ExtUtils/typemap'  Normalize.xs > Normalize.xsc
mv Normalize.xsc Normalize.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.31\" -DXS_VERSION=\"1.31\" -fPIC -Wno-unused-function "-I../.."   Normalize.c
In file included from ../../perl.h:7246,
                 from Normalize.xs:13:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Normalize.xs: In function 'pv_utf8_decompose':
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:226:13: note: in expansion of macro 'Renew_d_if_not_enough_to'
  226 |             Renew_d_if_not_enough_to(UTF8_MAXLEN * 3)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:234:17: note: in expansion of macro 'Renew_d_if_not_enough_to'
  234 |                 Renew_d_if_not_enough_to(len)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:239:17: note: in expansion of macro 'Renew_d_if_not_enough_to'
  239 |                 Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs: In function 'pv_utf8_reorder':
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:304:17: note: in expansion of macro 'Renew_d_if_not_enough_to'
  304 |                 Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:311:13: note: in expansion of macro 'Renew_d_if_not_enough_to'
  311 |             Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs: In function 'pv_utf8_compose':
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:357:17: note: in expansion of macro 'Renew_d_if_not_enough_to'
  357 |                 Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:416:13: note: in expansion of macro 'Renew_d_if_not_enough_to'
  416 |             Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~
Normalize.xs:40:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   40 | #define Renew_d_if_not_enough_to(need)  STRLEN curlen = d - dstart;     \
      |                                                         ^
Normalize.xs:424:17: note: in expansion of macro 'Renew_d_if_not_enough_to'
  424 |                 Renew_d_if_not_enough_to(UTF8_MAXLEN)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:5841:
Normalize.xs: In function 'XS_Unicode__Normalize_decompose':
Normalize.xs:455:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  455 |     sv_setpvn(dst, (char *)d, dend - d);
      |                               ~~~~~^~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
Normalize.xs: In function 'XS_Unicode__Normalize_reorder':
Normalize.xs:477:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  477 |     sv_setpvn(dst, (char *)d, dend - d);
      |                               ~~~~~^~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
Normalize.xs: In function 'XS_Unicode__Normalize_compose':
Normalize.xs:501:36: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  501 |     sv_setpvn(dst, (char *)d, dend - d);
      |                               ~~~~~^~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
Normalize.xs: In function 'XS_Unicode__Normalize_NFD':
Normalize.xs:527:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  527 |     tlen = tend - t; /* no longer know real size of t */
      |            ^~~~
Normalize.xs:534:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  534 |     dlen = dend - d; /* no longer know real size of d */
      |            ^~~~
Normalize.xs: In function 'XS_Unicode__Normalize_NFC':
Normalize.xs:567:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  567 |     tlen = tend - t; /* no longer know real size of t */
      |            ^~~~
Normalize.xs:574:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  574 |     ulen = uend - u; /* no longer know real size of u */
      |            ^~~~
Normalize.xs:581:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  581 |     dlen = dend - d; /* no longer know real size of d */
      |            ^~~~
In file included from ../../perl.h:5782:
Normalize.c: In function 'XS_Unicode__Normalize_getCombinClass':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Normalize.c:1018:9: note: in expansion of macro 'PUSHu'
 1018 |         PUSHu((UV)RETVAL);
      |         ^~~~~
Normalize.xs: In function 'XS_Unicode__Normalize_getCanon':
Normalize.xs:858:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  858 |         RETVAL = newSVpvn((char *)t, e - t);
      |                                      ~~^~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
Normalize.xs: In function 'XS_Unicode__Normalize_splitOnLastStarter':
Normalize.xs:891:43: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  891 |     svp = sv_2mortal(newSVpvn((char*)s, p - s));
      |                                         ~~^~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
Normalize.xs:891:22: note: in expansion of macro 'newSVpvn'
  891 |     svp = sv_2mortal(newSVpvn((char*)s, p - s));
      |                      ^~~~~~~~
Normalize.xs:895:43: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  895 |     svp = sv_2mortal(newSVpvn((char*)p, e - p));
      |                                         ~~^~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
Normalize.xs:895:22: note: in expansion of macro 'newSVpvn'
  895 |     svp = sv_2mortal(newSVpvn((char*)p, e - p));
      |                      ^~~~~~~~
In file included from ../../perl.h:4161:
Normalize.c: In function 'boot_Unicode__Normalize':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Normalize.c:1269:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1269 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Normalize.c:1269:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 1269 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Unicode/Normalize/Normalize.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Normalize.o  -o ../../lib/auto/Unicode/Normalize/Normalize.so  \
      \
  
chmod 755 ../../lib/auto/Unicode/Normalize/Normalize.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/dist/Unicode-Normalize'
./miniperl_top make_ext_Makefile.pl ext/attributes/Makefile.PL
Creating ext/attributes/Makefile.PL for attributes
cd ext/attributes/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for attributes
make -C ext/attributes/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/attributes'
cp attributes.pm ../../lib/attributes.pm
Running Mkbootstrap for attributes ()
chmod 644 "attributes.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/attributes/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- attributes.bs ../../lib/auto/attributes/attributes.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/attributes/../../lib/ExtUtils/typemap'  attributes.xs > attributes.xsc
mv attributes.xsc attributes.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.34\" -DXS_VERSION=\"0.34\" -fPIC -Wno-unused-function "-I../.."   attributes.c
In file included from ../../perl.h:7246,
                 from attributes.xs:23:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4165:
attributes.xs: In function 'modify_SV_attributes':
../../cv.h:221:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-131073' to '4294836223' [-Wsign-conversion]
  221 | #define CvANONCONST_off(cv)     (CvFLAGS(cv) &= ~CVf_ANONCONST)
      |                                              ^~
../../cv.h:221:46: note: in definition of macro 'CvANONCONST_off'
  221 | #define CvANONCONST_off(cv)     (CvFLAGS(cv) &= ~CVf_ANONCONST)
      |                                              ^~
attributes.xs:71:53: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
   71 |                             CvFLAGS(MUTABLE_CV(sv)) &= ~CVf_LVALUE;
      |                                                     ^~
attributes.xs:81:53: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
   81 |                             CvFLAGS(MUTABLE_CV(sv)) &= ~CVf_METHOD;
      |                                                     ^~
In file included from ../../perl.h:4161:
attributes.c: In function 'boot_attributes':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
attributes.c:471:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  471 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
attributes.c:471:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  471 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/attributes/attributes.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  attributes.o  -o ../../lib/auto/attributes/attributes.so  \
      \
  
chmod 755 ../../lib/auto/attributes/attributes.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/attributes'
cd ext/B/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for B
make -C ext/B/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/B'
cp B.pm ../../lib/B.pm
cp B/Concise.pm ../../lib/B/Concise.pm
cp B/Xref.pm ../../lib/B/Xref.pm
cp B/Showlex.pm ../../lib/B/Showlex.pm
cp B/Terse.pm ../../lib/B/Terse.pm
cp O.pm ../../lib/O.pm
Running Mkbootstrap for B ()
chmod 644 "B.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/B/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- B.bs ../../lib/auto/B/B.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/B/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/B/typemap'  B.xs > B.xsc
mv B.xsc B.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.83\" -DXS_VERSION=\"1.83\" -fPIC -Wno-unused-function "-I../.."   B.c
In file included from ../../perl.h:7246,
                 from B.xs:13:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
B.xs: In function 'get_overlay_object':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
B.xs:137:11: note: in expansion of macro 'hv_fetch'
  137 |     svp = hv_fetch((HV*)sv, name, namelen, 0);
      |           ^~~~~~~~
In file included from ../../perl.h:5810:
B.xs: In function 'XS_B_amagic_generation':
../../embedvar.h:201:33: warning: conversion to 'long int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  201 | #define PL_na                   (vTHX->Ina)
      |                                 ^
../../perl.h:5529:32: note: in expansion of macro 'PL_na'
 5529 | #  define PL_amagic_generation PL_na
      |                                ^~~~~
B.xs:652:18: note: in expansion of macro 'PL_amagic_generation'
  652 |         RETVAL = PL_amagic_generation;
      |                  ^~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:5782:
B.c: In function 'XS_B_sub_generation':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:879:9: note: in expansion of macro 'PUSHu'
  879 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.xs: In function 'XS_B__OP_next':
B.xs:1034:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1033 |                                               (char*)(&tbl->map[tbl->size + 1])
      |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1034 |                                             - (char*)tbl,
      |                                             ^~~~~~~~~~~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
B.xs:1091:51: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1089 |                     (o->op_type == OP_METHOD_REDIR ||
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1090 |                      o->op_type == OP_METHOD_REDIR_SUPER) ?
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1091 |                       cMETHOPx(o)->op_rclass_targ : 0
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
B.xs:1088:34: note: in expansion of macro 'newSVuv'
 1088 |                 ret = sv_2mortal(newSVuv(
      |                                  ^~~~~~~
B.xs:1111:42: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1111 |                 ret = sv_2mortal(newSVuv(*((PADOFFSET*)ptr)));
      |                                          ^~~~~~~~~~~~~~~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
B.xs:1111:34: note: in expansion of macro 'newSVuv'
 1111 |                 ret = sv_2mortal(newSVuv(*((PADOFFSET*)ptr)));
      |                                  ^~~~~~~
B.xs: In function 'XS_B__UNOP_AUX_aux_list':
B.xs:1228:43: warning: conversion to 'IV' {aka 'const long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1228 |                 PUSHs(sv_2mortal(newSViv(p->params)));
      |                                          ~^~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1228:23: note: in expansion of macro 'sv_2mortal'
 1228 |                 PUSHs(sv_2mortal(newSViv(p->params)));
      |                       ^~~~~~~~~~
B.xs:1228:34: note: in expansion of macro 'newSViv'
 1228 |                 PUSHs(sv_2mortal(newSViv(p->params)));
      |                                  ^~~~~~~
B.xs:1229:43: warning: conversion to 'IV' {aka 'const long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1229 |                 PUSHs(sv_2mortal(newSViv(p->opt_params)));
      |                                          ~^~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1229:23: note: in expansion of macro 'sv_2mortal'
 1229 |                 PUSHs(sv_2mortal(newSViv(p->opt_params)));
      |                       ^~~~~~~~~~
B.xs:1229:34: note: in expansion of macro 'newSViv'
 1229 |                 PUSHs(sv_2mortal(newSViv(p->opt_params)));
      |                                  ^~~~~~~
B.xs:1254:23: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1254 |                 len = aux[PERL_MULTICONCAT_IX_PLAIN_LEN].ssize;
      |                       ^~~
B.xs:1257:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1257 |                     len = aux[PERL_MULTICONCAT_IX_UTF8_LEN].ssize;
      |                           ^~~
../../embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
B.xs:1312:42: warning: conversion to 'IV' {aka 'const long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1312 |                 PUSHs(sv_2mortal(newSViv(actions)));
      |                                          ^~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1312:23: note: in expansion of macro 'sv_2mortal'
 1312 |                 PUSHs(sv_2mortal(newSViv(actions)));
      |                       ^~~~~~~~~~
B.xs:1312:34: note: in expansion of macro 'newSViv'
 1312 |                 PUSHs(sv_2mortal(newSViv(actions)));
      |                                  ^~~~~~~
B.xs:1327:59: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1327 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                                  ~~~~~~~~~^~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1327:31: note: in expansion of macro 'sv_2mortal'
 1327 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                               ^~~~~~~~~~
B.xs:1327:42: note: in expansion of macro 'newSVuv'
 1327 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                          ^~~~~~~
B.xs:1353:59: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1353 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                                  ~~~~~~~~~^~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1353:31: note: in expansion of macro 'sv_2mortal'
 1353 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                               ^~~~~~~~~~
B.xs:1353:42: note: in expansion of macro 'newSVuv'
 1353 |                         PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                          ^~~~~~~
B.xs:1378:63: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'PADOFFSET' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1378 |                             PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                                      ~~~~~~~~~^~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1378:35: note: in expansion of macro 'sv_2mortal'
 1378 |                             PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                   ^~~~~~~~~~
B.xs:1378:46: note: in expansion of macro 'newSVuv'
 1378 |                             PUSHs(sv_2mortal(newSVuv((++items)->pad_offset)));
      |                                              ^~~~~~~
In file included from B.xs:14:
../../XSUB.h:326:29: warning: conversion to 'IV' {aka 'const long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  326 |         const IV tmpXSoff = (off);                      \
      |                             ^
B.xs:1394:17: note: in expansion of macro 'XSRETURN'
 1394 |                 XSRETURN(len);
      |                 ^~~~~~~~
B.c: In function 'XS_B__SV_REFCNT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:1790:9: note: in expansion of macro 'PUSHu'
 1790 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.xs: In function 'XS_B__IV_IVX':
B.xs:1568:38: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1568 |             ret = sv_2mortal(newSVuv(*((I32 *)ptr)));
      |                                      ^~~~~~~~~~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
B.xs:1568:30: note: in expansion of macro 'newSVuv'
 1568 |             ret = sv_2mortal(newSVuv(*((I32 *)ptr)));
      |                              ^~~~~~~
In file included from ../../perl.h:1482:
B.xs: In function 'XS_B__IV_packiv':
B.xs:1602:30: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1602 |             wp[1] = htonl(iv & 0xffffffff);
      |                              ^
B.xs: In function 'XS_B__REGEXP_REGEX':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.xs:1632:17: note: in expansion of macro 'PUSHu'
 1632 |                 PUSHu(RX_COMPFLAGS(sv));
      |                 ^~~~~
B.c: In function 'XS_B__INVLIST_array_len':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2167:9: note: in expansion of macro 'PUSHu'
 2167 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.xs: In function 'XS_B__PV_PV':
B.xs:1731:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1731 |             len = mg->mg_len;
      |                   ^~
B.xs: In function 'XS_B__MAGIC_MOREMAGIC':
B.xs:1819:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1819 |                     PUSHs(newSVpvn_flags(mg->mg_ptr, mg->mg_len, SVs_TEMP));
      |                                                      ~~^~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:1819:27: note: in expansion of macro 'newSVpvn_flags'
 1819 |                     PUSHs(newSVpvn_flags(mg->mg_ptr, mg->mg_len, SVs_TEMP));
      |                           ^~~~~~~~~~~~~~
B.c: In function 'XS_B__BM_PREVIOUS':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2458:9: note: in expansion of macro 'PUSHu'
 2458 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__BM_RARE':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2487:9: note: in expansion of macro 'PUSHu'
 2487 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__GV_LINE':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2658:9: note: in expansion of macro 'PUSHu'
 2658 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__GV_GPFLAGS':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2685:9: note: in expansion of macro 'PUSHu'
 2685 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__CV_CONST':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:2902:9: note: in expansion of macro 'PUSHu'
 2902 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__HV_FILL':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:3152:9: note: in expansion of macro 'PUSHu'
 3152 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4168:
B.xs: In function 'XS_B__HV_ARRAY':
../../hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
B.xs:2107:13: note: in expansion of macro 'HvUSEDKEYS'
 2107 |         if (HvUSEDKEYS(hv) > 0) {
      |             ^~~~~~~~~~
../../hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
B.xs:2113:36: note: in expansion of macro 'HvUSEDKEYS'
 2113 |             extend_size = (SSize_t)HvUSEDKEYS(hv) * 2;
      |                                    ^~~~~~~~~~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
B.xs:2119:27: note: in expansion of macro 'newSVpvn_flags'
 2119 |                     PUSHs(newSVpvn_flags(HeKEY(he), HeKLEN(he), SVf_UTF8|SVs_TEMP));
      |                           ^~~~~~~~~~~~~~
../../hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
B.xs:2119:53: note: in expansion of macro 'HeKLEN'
 2119 |                     PUSHs(newSVpvn_flags(HeKEY(he), HeKLEN(he), SVf_UTF8|SVs_TEMP));
      |                                                     ^~~~~~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
../../pp.h:489:31: note: in expansion of macro 'newSVpvn_flags'
  489 | #define mPUSHp(p,l)     PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
      |                               ^~~~~~~~~~~~~~
B.xs:2121:21: note: in expansion of macro 'mPUSHp'
 2121 |                     mPUSHp(HeKEY(he), HeKLEN(he));
      |                     ^~~~~~
../../hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
B.xs:2121:39: note: in expansion of macro 'HeKLEN'
 2121 |                     mPUSHp(HeKEY(he), HeKLEN(he));
      |                                       ^~~~~~
B.xs: In function 'XS_B__HE_VAL':
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
../../hv.h:412:35: note: in expansion of macro 'newSVpvn_flags'
  412 |                                   newSVpvn_flags(HeKEY(he),             \
      |                                   ^~~~~~~~~~~~~~
../../hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
../../hv.h:413:50: note: in expansion of macro 'HeKLEN'
  413 |                                                  HeKLEN(he),            \
      |                                                  ^~~~~~
B.xs:2135:41: note: in expansion of macro 'HeSVKEY_force'
 2135 |         PUSHs(make_sv_object(aTHX_ ix ? HeSVKEY_force(he) : HeVAL(he)));
      |                                         ^~~~~~~~~~~~~
B.c: In function 'XS_B__HE_HASH':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:3279:9: note: in expansion of macro 'PUSHu'
 3279 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__PADLIST_REFCNT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:3473:9: note: in expansion of macro 'PUSHu'
 3473 |         PUSHu((UV)RETVAL);
      |         ^~~~~
B.c: In function 'XS_B__PADNAME_FLAGS':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
B.c:3680:9: note: in expansion of macro 'PUSHu'
 3680 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
B.c: In function 'boot_B':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
B.c:3694:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 3694 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
B.c:3694:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 3694 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
B.c:3870:25: warning: signed conversion from 'unsigned int' to 'I32' {aka 'int'} changes value from '4294967295' to '-1' [-Wsign-conversion]
 3870 |         XSANY.any_i32 = 0xFFFFFFFF;
      |                         ^~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:450:32: note: in expansion of macro 'HEK_LEN'
  450 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/B/B.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  B.o  -o ../../lib/auto/B/B.so  \
      \
  
chmod 755 ../../lib/auto/B/B.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/B'
./miniperl_top make_ext_Makefile.pl ext/Devel-Peek/Makefile.PL
Creating ext/Devel-Peek/Makefile.PL for Devel::Peek
cd ext/Devel-Peek/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Devel::Peek
make -C ext/Devel-Peek/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Devel-Peek'
cp Peek.pm ../../lib/Devel/Peek.pm
Running Mkbootstrap for Peek ()
chmod 644 "Peek.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Devel-Peek/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Peek.bs ../../lib/auto/Devel/Peek/Peek.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Devel-Peek/../../lib/ExtUtils/typemap'  Peek.xs > Peek.xsc
mv Peek.xsc Peek.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.32\" -DXS_VERSION=\"1.32\" -fPIC -Wno-unused-function "-I../.."   Peek.c
In file included from ../../perl.h:7246,
                 from Peek.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
Peek.xs: In function 'DeadCode':
Peek.xs:71:42: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
   71 |                     levela = sizeof(SV*) * (AvMAX(argav) + 1);
      |                                          ^
Peek.xs:71:30: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
   71 |                     levela = sizeof(SV*) * (AvMAX(argav) + 1);
      |                              ^~~~~~
Peek.xs:80:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   80 |                                 levelas += SvLEN(args[j])/SvREFCNT(args[j]);
      |                                         ^~
../../sv.h:1240:21: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1240 | #  define SvLEN(sv) ((XPV*) SvANY(sv))->xpv_len
      |                     ^
Peek.xs:80:44: note: in expansion of macro 'SvLEN'
   80 |                                 levelas += SvLEN(args[j])/SvREFCNT(args[j]);
      |                                            ^~~~~
Peek.xs:101:36: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  101 |                             levelm += SvLEN(pad[j])/SvREFCNT(pad[j]);
      |                                    ^~
../../sv.h:1240:21: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1240 | #  define SvLEN(sv) ((XPV*) SvANY(sv))->xpv_len
      |                     ^
Peek.xs:101:39: note: in expansion of macro 'SvLEN'
  101 |                             levelm += SvLEN(pad[j])/SvREFCNT(pad[j]);
      |                                       ^~~~~
Peek.xs: In function 'S_do_dump':
Peek.xs:330:27: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
  330 |     const STRLEN pv_lim = pv_lim_sv ? SvIV(pv_lim_sv) : 0;
      |                           ^~~~~~~~~
Peek.xs: In function 'S_ck_dump':
Peek.xs:386:28: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-33' [-Wsign-conversion]
  386 |         first->op_flags &= ~OPf_MOD;
      |                            ^
Peek.xs: In function 'XS_Devel__Peek_DumpArray':
Peek.xs:455:27: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
  455 |     const STRLEN pv_lim = pv_lim_sv ? SvIV(pv_lim_sv) : 0;
      |                           ^~~~~~~~~
In file included from ../../perl.h:5782:
Peek.c: In function 'XS_Devel__Peek_SvREFCNT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Peek.c:769:9: note: in expansion of macro 'PUSHu'
  769 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
Peek.c: In function 'boot_Devel__Peek':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Peek.c:844:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  844 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Peek.c:844:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  844 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Devel/Peek/Peek.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Peek.o  -o ../../lib/auto/Devel/Peek/Peek.so  \
      \
  
chmod 755 ../../lib/auto/Devel/Peek/Peek.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Devel-Peek'
cd ext/Fcntl/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Fcntl
make -C ext/Fcntl/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Fcntl'
cp Fcntl.pm ../../lib/Fcntl.pm
Running Mkbootstrap for Fcntl ()
chmod 644 "Fcntl.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Fcntl/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Fcntl.bs ../../lib/auto/Fcntl/Fcntl.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Fcntl/../../lib/ExtUtils/typemap'  Fcntl.xs > Fcntl.xsc
mv Fcntl.xsc Fcntl.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."   Fcntl.c
In file included from ../../perl.h:7246,
                 from Fcntl.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5782:
Fcntl.xs: In function 'XS_Fcntl_S_IMODE':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Fcntl.xs:77:9: note: in expansion of macro 'PUSHu'
   77 |         PUSHu(SvUV(mode) & 07777);
      |         ^~~~~
Fcntl.xs: In function 'XS_Fcntl_S_IFMT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Fcntl.xs:84:9: note: in expansion of macro 'PUSHu'
   84 |         PUSHu(items ? (SvUV(ST(0)) & S_IFMT) : S_IFMT);
      |         ^~~~~
In file included from ../../perl.h:4161:
Fcntl.c: In function 'boot_Fcntl':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Fcntl.c:321:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  321 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Fcntl.c:321:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  321 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
./const-xs.inc:29:31: warning: signed conversion from 'unsigned int' to 'long int' changes value from '2147483648' to '-2147483648' [-Wsign-conversion]
   29 |         { "DN_MULTISHOT", 12, DN_MULTISHOT },
      |                               ^~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
In file included from ../../perl.h:5841:
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:528:32: note: in expansion of macro 'HEK_LEN'
  528 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Fcntl/Fcntl.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Fcntl.o  -o ../../lib/auto/Fcntl/Fcntl.so  \
      \
  
chmod 755 ../../lib/auto/Fcntl/Fcntl.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Fcntl'
./miniperl_top make_ext_Makefile.pl ext/File-DosGlob/Makefile.PL
Creating ext/File-DosGlob/Makefile.PL for File::DosGlob
cd ext/File-DosGlob/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::DosGlob
make -C ext/File-DosGlob/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-DosGlob'
cp lib/File/DosGlob.pm ../../lib/File/DosGlob.pm
Running Mkbootstrap for DosGlob ()
chmod 644 "DosGlob.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-DosGlob/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- DosGlob.bs ../../lib/auto/File/DosGlob/DosGlob.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-DosGlob/../../lib/ExtUtils/typemap'  DosGlob.xs > DosGlob.xsc
mv DosGlob.xsc DosGlob.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.12\" -DXS_VERSION=\"1.12\" -fPIC -Wno-unused-function "-I../.."   DosGlob.c
In file included from ../../perl.h:7246,
                 from DosGlob.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
DosGlob.c: In function 'boot_File__DosGlob':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DosGlob.c:214:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  214 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DosGlob.c:214:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  214 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/File/DosGlob/DosGlob.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  DosGlob.o  -o ../../lib/auto/File/DosGlob/DosGlob.so  \
      \
  
chmod 755 ../../lib/auto/File/DosGlob/DosGlob.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-DosGlob'
cd ext/File-Glob/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for File::Glob
make -C ext/File-Glob/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Glob'
cp Glob.pm ../../lib/File/Glob.pm
Running Mkbootstrap for Glob ()
chmod 644 "Glob.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Glob/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Glob.bs ../../lib/auto/File/Glob/Glob.bs 644
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.37\" -DXS_VERSION=\"1.37\" -fPIC -Wno-unused-function "-I../.."   bsd_glob.c
In file included from ../../perl.h:7246,
                 from bsd_glob.c:69:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
bsd_glob.c: In function 'bsd_glob':
bsd_glob.c:279:46: warning: conversion from 'int' to 'Char' {aka 'short unsigned int'} may change value [-Wconversion]
  279 |                                 *bufnext++ = c | M_PROTECT;
      |                                              ^
bsd_glob.c:281:46: warning: conversion from 'int' to 'Char' {aka 'short unsigned int'} may change value [-Wconversion]
  281 |                                 *bufnext++ = c;
      |                                              ^
bsd_glob.c:284:38: warning: conversion from 'int' to 'Char' {aka 'short unsigned int'} may change value [-Wconversion]
  284 |                         *bufnext++ = c;
      |                                      ^
bsd_glob.c: In function 'glob0':
bsd_glob.c:605:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  605 |                     pglob->gl_pathc - oldpathc, sizeof(char *),
      |                     ~~~~~~~~~~~~~~~~^~~~~~~~~~
bsd_glob.c: In function 'globextend':
bsd_glob.c:864:34: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  864 |         newsize = sizeof(*pathv) * (2 + pglob->gl_pathc + pglob->gl_offs);
      |                                  ^
In file included from ../../perl.h:3003:
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
bsd_glob.c:889:9: note: in expansion of macro 'Newx'
  889 |         Newx(copy, p-path, char);
      |         ^~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Glob/../../lib/ExtUtils/typemap'  Glob.xs > Glob.xsc
mv Glob.xsc Glob.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.37\" -DXS_VERSION=\"1.37\" -fPIC -Wno-unused-function "-I../.."   Glob.c
In file included from ../../perl.h:7246,
                 from Glob.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:3003:
Glob.xs: In function 'iterate':
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
Glob.xs:126:13: note: in expansion of macro 'Copy'
  126 |             Copy(AvARRAY(entries), SP+1, AvFILLp(entries)+1, SV *);
      |             ^~~~
In file included from ../../perl.h:5841:
Glob.xs: In function 'csh_glob':
Glob.xs:178:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  178 |                 if (piece) sv_catpvn(word, piece, s-piece);
      |                                                   ~^~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:178:28: note: in expansion of macro 'sv_catpvn'
  178 |                 if (piece) sv_catpvn(word, piece, s-piece);
      |                            ^~~~~~~~~
Glob.xs:186:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  186 |                             sv_catpvn(word, piece, s-piece-1), piece = s;
      |                                                    ~~~~~~~^~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:186:29: note: in expansion of macro 'sv_catpvn'
  186 |                             sv_catpvn(word, piece, s-piece-1), piece = s;
      |                             ^~~~~~~~~
Glob.xs:189:49: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  189 |                         sv_catpvn(word, piece, s-piece);
      |                                                ~^~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:189:25: note: in expansion of macro 'sv_catpvn'
  189 |                         sv_catpvn(word, piece, s-piece);
      |                         ^~~~~~~~~
Glob.xs:203:62: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |                         if (word) sv_setpvn(word, pat, patend-pat);
      |                                                        ~~~~~~^~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
Glob.xs:206:44: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  206 |                                 pat, patend-pat, SVf_UTF8*is_utf8
      |                                      ~~~~~~^~~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
Glob.xs:226:54: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  226 |                         word = newSVpvn(piece,s-piece-1);
      |                                               ~~~~~~~^~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
Glob.xs:229:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  229 |                     else sv_catpvn(word, piece, s-piece-1);
      |                                                 ~~~~~~~^~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:229:26: note: in expansion of macro 'sv_catpvn'
  229 |                     else sv_catpvn(word, piece, s-piece-1);
      |                          ^~~~~~~~~
Glob.xs:237:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  237 |                             word = newSVpvn(piece,s-piece);
      |                                                   ~^~~~~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
Glob.xs:240:54: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  240 |                         else sv_catpvn(word, piece, s-piece);
      |                                                     ~^~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:240:30: note: in expansion of macro 'sv_catpvn'
  240 |                         else sv_catpvn(word, piece, s-piece);
      |                              ^~~~~~~~~
Glob.xs:277:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  277 |                 if (piece) sv_catpvn(word, piece, s-piece);
      |                                                   ~^~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
Glob.xs:277:28: note: in expansion of macro 'sv_catpvn'
  277 |                 if (piece) sv_catpvn(word, piece, s-piece);
      |                            ^~~~~~~~~
In file included from ../../perl.h:4161:
Glob.c: In function 'boot_File__Glob':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Glob.c:713:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  713 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Glob.c:713:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  713 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:104:32: note: in expansion of macro 'HEK_LEN'
  104 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/File/Glob/Glob.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  bsd_glob.o Glob.o  -o ../../lib/auto/File/Glob/Glob.so  \
      \
  
chmod 755 ../../lib/auto/File/Glob/Glob.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/File-Glob'
cd ext/GDBM_File/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for GDBM_File
make -C ext/GDBM_File/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/GDBM_File'
cp GDBM_File.pm ../../lib/GDBM_File.pm
Running Mkbootstrap for GDBM_File ()
chmod 644 "GDBM_File.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/GDBM_File/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- GDBM_File.bs ../../lib/auto/GDBM_File/GDBM_File.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/GDBM_File/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/GDBM_File/typemap'  GDBM_File.xs > GDBM_File.xsc
mv GDBM_File.xsc GDBM_File.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.23\" -DXS_VERSION=\"1.23\" -fPIC -Wno-unused-function "-I../.."   GDBM_File.c
In file included from ../../perl.h:7246,
                 from GDBM_File.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
GDBM_File.xs: In function 'output_datum':
GDBM_File.xs:133:29: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  133 |         sv_setpvn(arg, str, size);
      |                             ^~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
GDBM_File.c: In function 'XS_GDBM_File_FETCH':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:664:9: note: in expansion of macro 'DBM_ckFilter'
  664 |         DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |         ^~~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:680:13: note: in expansion of macro 'DBM_ckFilter'
  680 |             DBM_ckFilter(RETVALSV, filter[fetch_value],"filter_fetch_value");
      |             ^~~~~~~~~~~~
GDBM_File.c: In function 'XS_GDBM_File_STORE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:722:9: note: in expansion of macro 'DBM_ckFilter'
  722 |         DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |         ^~~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:730:9: note: in expansion of macro 'DBM_ckFilter'
  730 |         DBM_ckFilter(ST(2), filter[store_value], "filter_store_value");
      |         ^~~~~~~~~~~~
GDBM_File.c: In function 'XS_GDBM_File_DELETE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:793:9: note: in expansion of macro 'DBM_ckFilter'
  793 |         DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |         ^~~~~~~~~~~~
GDBM_File.c: In function 'XS_GDBM_File_FIRSTKEY':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:850:13: note: in expansion of macro 'DBM_ckFilter'
  850 |             DBM_ckFilter(RETVALSV, filter[fetch_key],"filter_fetch_key");
      |             ^~~~~~~~~~~~
GDBM_File.c: In function 'XS_GDBM_File_NEXTKEY':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:889:9: note: in expansion of macro 'DBM_ckFilter'
  889 |         DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |         ^~~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:905:13: note: in expansion of macro 'DBM_ckFilter'
  905 |             DBM_ckFilter(RETVALSV, filter[fetch_key],"filter_fetch_key");
      |             ^~~~~~~~~~~~
GDBM_File.c: In function 'XS_GDBM_File_EXISTS':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
GDBM_File.c:945:9: note: in expansion of macro 'DBM_ckFilter'
  945 |         DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |         ^~~~~~~~~~~~
In file included from ../../perl.h:5782:
GDBM_File.c: In function 'XS_GDBM_File_count':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
GDBM_File.c:1484:9: note: in expansion of macro 'PUSHu'
 1484 |         PUSHu((UV)RETVAL);
      |         ^~~~~
GDBM_File.xs: In function 'XS_GDBM_File_flags':
GDBM_File.xs:943:48: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  943 |         if (gdbm_setopt(db->dbp, opcode, vptr, vsiz)) {
      |                                                ^~~~
GDBM_File.xs: In function 'XS_GDBM_File_latest_snapshot':
GDBM_File.xs:1041:39: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1041 |             XPUSHs(sv_2mortal(newSVuv(result)));
      |                                       ^~~~~~
../../pp.h:479:61: note: in definition of macro 'XPUSHs'
  479 | #define XPUSHs(s)       STMT_START { EXTEND(sp,1); *++sp = (s); } STMT_END
      |                                                             ^
GDBM_File.xs:1041:20: note: in expansion of macro 'sv_2mortal'
 1041 |             XPUSHs(sv_2mortal(newSVuv(result)));
      |                    ^~~~~~~~~~
GDBM_File.xs:1041:31: note: in expansion of macro 'newSVuv'
 1041 |             XPUSHs(sv_2mortal(newSVuv(result)));
      |                               ^~~~~~~
GDBM_File.xs:1043:43: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1043 |                 XPUSHs(sv_2mortal(newSVuv(syserr)));
      |                                           ^~~~~~
../../pp.h:479:61: note: in definition of macro 'XPUSHs'
  479 | #define XPUSHs(s)       STMT_START { EXTEND(sp,1); *++sp = (s); } STMT_END
      |                                                             ^
GDBM_File.xs:1043:24: note: in expansion of macro 'sv_2mortal'
 1043 |                 XPUSHs(sv_2mortal(newSVuv(syserr)));
      |                        ^~~~~~~~~~
GDBM_File.xs:1043:35: note: in expansion of macro 'newSVuv'
 1043 |                 XPUSHs(sv_2mortal(newSVuv(syserr)));
      |                                   ^~~~~~~
In file included from ../../perl.h:4161:
GDBM_File.c: In function 'boot_GDBM_File':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GDBM_File.c:2073:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2073 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GDBM_File.c:2073:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2073 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:241:32: note: in expansion of macro 'HEK_LEN'
  241 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/GDBM_File/GDBM_File.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  GDBM_File.o  -o ../../lib/auto/GDBM_File/GDBM_File.so  \
   -lgdbm   \
  
chmod 755 ../../lib/auto/GDBM_File/GDBM_File.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/GDBM_File'
cd ext/Hash-Util/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Hash::Util
make -C ext/Hash-Util/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util'
cp lib/Hash/Util.pm ../../lib/Hash/Util.pm
Running Mkbootstrap for Util ()
chmod 644 "Util.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Util.bs ../../lib/auto/Hash/Util/Util.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util/../../lib/ExtUtils/typemap'  Util.xs > Util.xsc
mv Util.xsc Util.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.28\" -DXS_VERSION=\"0.28\" -fPIC -Wno-unused-function "-I../.."  -DPERL_EXT Util.c
In file included from ../../perl.h:7246,
                 from Util.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4168:
Util.xs: In function 'XS_Hash__Util_bucket_info':
../../hv.h:351:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  351 | #define HvUSEDKEYS(hv)          (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
      |                                                  ^
Util.xs:161:25: note: in expansion of macro 'HvUSEDKEYS'
  161 |         U32 total_keys= HvUSEDKEYS(hv);
      |                         ^~~~~~~~~~
Util.xs:190:78: warning: conversion to 'long unsigned int' from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
  190 |             SvIVX( ST( BUCKET_INFO_ITEMS_ON_STACK - 1 ) ) = max_bucket_index - SvIVX( ST( BUCKET_INFO_ITEMS_ON_STACK ) ) + 1;
      |                                                                              ^
Util.xs:190:61: warning: conversion to 'IV' {aka 'long int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  190 |             SvIVX( ST( BUCKET_INFO_ITEMS_ON_STACK - 1 ) ) = max_bucket_index - SvIVX( ST( BUCKET_INFO_ITEMS_ON_STACK ) ) + 1;
      |                                                             ^~~~~~~~~~~~~~~~
Util.xs: In function 'XS_Hash__Util_bucket_array':
../../hv.h:424:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ^
../../hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
Util.xs:256:30: note: in expansion of macro 'HeKLEN'
  256 |                         len= HeKLEN(he);
      |                              ^~~~~~
In file included from ../../perl.h:4161:
Util.c: In function 'boot_Hash__Util':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Util.c:726:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  726 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Util.c:726:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  726 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Hash/Util/Util.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Util.o  -o ../../lib/auto/Hash/Util/Util.so  \
      \
  
chmod 755 ../../lib/auto/Hash/Util/Util.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util'
./miniperl_top make_ext_Makefile.pl ext/Hash-Util-FieldHash/Makefile.PL
Creating ext/Hash-Util-FieldHash/Makefile.PL for Hash::Util::FieldHash
cd ext/Hash-Util-FieldHash/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Hash::Util::FieldHash
make -C ext/Hash-Util-FieldHash/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util-FieldHash'
cp lib/Hash/Util/FieldHash.pm ../../lib/Hash/Util/FieldHash.pm
Running Mkbootstrap for FieldHash ()
chmod 644 "FieldHash.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util-FieldHash/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- FieldHash.bs ../../lib/auto/Hash/Util/FieldHash/FieldHash.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util-FieldHash/../../lib/ExtUtils/typemap'  FieldHash.xs > FieldHash.xsc
mv FieldHash.xsc FieldHash.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.26\" -DXS_VERSION=\"1.26\" -fPIC -Wno-unused-function "-I../.."   FieldHash.c
In file included from ../../perl.h:7246,
                 from FieldHash.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
FieldHash.xs: In function 'HUF_fix_objects':
../../embed.h:58:33: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
../../embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
In file included from ../../perl.h:4161:
FieldHash.c: In function 'boot_Hash__Util__FieldHash':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FieldHash.c:726:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  726 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FieldHash.c:726:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  726 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Hash/Util/FieldHash/FieldHash.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  FieldHash.o  -o ../../lib/auto/Hash/Util/FieldHash/FieldHash.so  \
      \
  
chmod 755 ../../lib/auto/Hash/Util/FieldHash/FieldHash.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Hash-Util-FieldHash'
cd ext/I18N-Langinfo/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for I18N::Langinfo
make -C ext/I18N-Langinfo/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/I18N-Langinfo'
cp Langinfo.pm ../../lib/I18N/Langinfo.pm
Running Mkbootstrap for Langinfo ()
chmod 644 "Langinfo.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/I18N-Langinfo/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Langinfo.bs ../../lib/auto/I18N/Langinfo/Langinfo.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/I18N-Langinfo/../../lib/ExtUtils/typemap'  Langinfo.xs > Langinfo.xsc
mv Langinfo.xsc Langinfo.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.21\" -DXS_VERSION=\"0.21\" -fPIC -Wno-unused-function "-I../.."   Langinfo.c
In file included from ../../perl.h:7246,
                 from Langinfo.xs:6:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
Langinfo.c: In function 'boot_I18N__Langinfo':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Langinfo.c:319:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  319 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Langinfo.c:319:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  319 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
In file included from ../../perl.h:5841:
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:232:32: note: in expansion of macro 'HEK_LEN'
  232 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/I18N/Langinfo/Langinfo.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Langinfo.o  -o ../../lib/auto/I18N/Langinfo/Langinfo.so  \
      \
  
chmod 755 ../../lib/auto/I18N/Langinfo/Langinfo.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/I18N-Langinfo'
./miniperl_top make_ext_Makefile.pl ext/mro/Makefile.PL
Creating ext/mro/Makefile.PL for mro
cd ext/mro/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for mro
make -C ext/mro/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/mro'
cp mro.pm ../../lib/mro.pm
Running Mkbootstrap for mro ()
chmod 644 "mro.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/mro/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- mro.bs ../../lib/auto/mro/mro.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/mro/../../lib/ExtUtils/typemap'  mro.xs > mro.xsc
mv mro.xsc mro.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.26\" -DXS_VERSION=\"1.26\" -fPIC -Wno-unused-function "-I../.."   mro.c
In file included from ../../perl.h:7246,
                 from mro.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:3003:
mro.xs: In function 'S_mro_get_linear_isa_c3':
mro.xs:136:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  136 |                 }
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
mro.xs:136:23: note: in expansion of macro 'Newxz'
  136 |                 }
      |                       ^    
In file included from ../../perl.h:5841:
mro.xs:245:50: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  245 |                hierarchy is not C3-incompatible */
      |                                                  ^
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
mro.xs: In function 'XS_mro__nextcan':
mro.xs:560:42: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  560 |             subname_len = fq_subname_len - (subname - fq_subname);
      |                                          ^
mro.xs:598:21: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  598 |     stashname_len = subname - fq_subname - 2;
      |                     ^~~~~~~
In file included from ../../perl.h:4161:
mro.c: In function 'boot_mro':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mro.c:926:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  926 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mro.c:926:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  926 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/mro/mro.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  mro.o  -o ../../lib/auto/mro/mro.so  \
      \
  
chmod 755 ../../lib/auto/mro/mro.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/mro'
cd ext/NDBM_File/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for NDBM_File
make -C ext/NDBM_File/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/NDBM_File'
cp NDBM_File.pm ../../lib/NDBM_File.pm
Running Mkbootstrap for NDBM_File ()
chmod 644 "NDBM_File.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/NDBM_File/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- NDBM_File.bs ../../lib/auto/NDBM_File/NDBM_File.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/NDBM_File/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/NDBM_File/typemap'  NDBM_File.xs > NDBM_File.xsc
mv NDBM_File.xsc NDBM_File.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."   NDBM_File.c
In file included from ../../perl.h:7246,
                 from NDBM_File.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
NDBM_File.c: In function 'XS_NDBM_File_FETCH':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:315:13: note: in expansion of macro 'DBM_ckFilter'
  315 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
In file included from ../../perl.h:5841:
NDBM_File.c:325:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  325 |             sv_setpvn(RETVALSV, (char *)RETVAL.dptr, RETVAL.dsize);
      |                                                      ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:326:13: note: in expansion of macro 'DBM_ckFilter'
  326 |             DBM_ckFilter(RETVALSV, filter[fetch_value], "filter_fetch_value");
      |             ^~~~~~~~~~~~
NDBM_File.c: In function 'XS_NDBM_File_STORE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:365:13: note: in expansion of macro 'DBM_ckFilter'
  365 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:371:9: note: in expansion of macro 'DBM_ckFilter'
  371 |         DBM_ckFilter(ST(2), filter[store_value], "filter_store_value");
      |         ^~~~~~~~~~~~
NDBM_File.c: In function 'XS_NDBM_File_DELETE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:436:13: note: in expansion of macro 'DBM_ckFilter'
  436 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
NDBM_File.c: In function 'XS_NDBM_File_FIRSTKEY':
NDBM_File.c:479:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  479 |             sv_setpvn(RETVALSV, (char *)RETVAL.dptr, RETVAL.dsize);
      |                                                      ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:480:13: note: in expansion of macro 'DBM_ckFilter'
  480 |             DBM_ckFilter(RETVALSV, filter[fetch_key], "filter_fetch_key");
      |             ^~~~~~~~~~~~
NDBM_File.c: In function 'XS_NDBM_File_NEXTKEY':
NDBM_File.c:518:60: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  518 |             sv_setpvn(RETVALSV, (char *)RETVAL.dptr, RETVAL.dsize);
      |                                                      ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
NDBM_File.c:519:13: note: in expansion of macro 'DBM_ckFilter'
  519 |             DBM_ckFilter(RETVALSV, filter[fetch_key], "filter_fetch_key");
      |             ^~~~~~~~~~~~
In file included from ../../perl.h:4161:
NDBM_File.c: In function 'boot_NDBM_File':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NDBM_File.c:642:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  642 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NDBM_File.c:642:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  642 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/NDBM_File/NDBM_File.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  NDBM_File.o  -o ../../lib/auto/NDBM_File/NDBM_File.so  \
   -lgdbm -lgdbm_compat   \
  
chmod 755 ../../lib/auto/NDBM_File/NDBM_File.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/NDBM_File'
./miniperl_top make_ext_Makefile.pl ext/Opcode/Makefile.PL
Creating ext/Opcode/Makefile.PL for Opcode
cd ext/Opcode/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Opcode
make -C ext/Opcode/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Opcode'
cp ops.pm ../../lib/ops.pm
cp Opcode.pm ../../lib/Opcode.pm
Running Mkbootstrap for Opcode ()
chmod 644 "Opcode.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Opcode/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Opcode.bs ../../lib/auto/Opcode/Opcode.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Opcode/../../lib/ExtUtils/typemap'  Opcode.xs > Opcode.xsc
mv Opcode.xsc Opcode.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.57\" -DXS_VERSION=\"1.57\" -fPIC -Wno-unused-function "-I../.."   Opcode.c
In file included from ../../perl.h:7246,
                 from Opcode.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
Opcode.xs: In function 'op_names_init':
Opcode.xs:63:53: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   63 |         (void) hv_store(op_named_bits, op_names[i], strlen(op_names[i]), sv, 0);
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Opcode.xs:63:16: note: in expansion of macro 'hv_store'
   63 |         (void) hv_store(op_named_bits, op_names[i], strlen(op_names[i]), sv, 0);
      |                ^~~~~~~~
Opcode.xs: In function 'put_op_bitspec':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Opcode.xs:90:11: note: in expansion of macro 'hv_fetch'
   90 |     svp = hv_fetch(op_named_bits, optag, len, 1);
      |           ^~~~~~~~
Opcode.xs: In function 'get_op_bitspec':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
Opcode.xs:110:11: note: in expansion of macro 'hv_fetch'
  110 |     svp = hv_fetch(op_named_bits, opname, len, 0);
      |           ^~~~~~~~
Opcode.xs: In function 'new_opset':
Opcode.xs:25:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
   25 | #define opset_len               (MY_CXT.x_opset_len)
      |                                 ~~~~~~~^~~~~~~~~~~~~
../../embed.h:387:50: note: in definition of macro 'newSV'
  387 | #define newSV(a)                Perl_newSV(aTHX_ a)
      |                                                  ^
Opcode.xs:138:23: note: in expansion of macro 'opset_len'
  138 |         opset = newSV(opset_len);
      |                       ^~~~~~~~~
../../handy.h:2792:97: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
Opcode.xs:139:9: note: in expansion of macro 'Zero'
  139 |         Zero(SvPVX_const(opset), opset_len + 1, char);
      |         ^~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
Opcode.xs:140:9: note: in expansion of macro 'SvCUR_set'
  140 |         SvCUR_set(opset, opset_len);
      |         ^~~~~~~~~
Opcode.xs: In function 'set_opset_bits':
Opcode.xs:181:31: warning: conversion from 'int' to 'char' may change value [-Wconversion]
  181 |             bitmap[offset] &= ~(1 << bit);
      |                               ^
Opcode.xs: In function 'opmask_add':
Opcode.xs:224:39: warning: conversion from 'int' to 'char' may change value [-Wconversion]
  224 |             PL_op_mask[myopcode++] |= bits & (1 << j++);
      |                                       ^~~~
Opcode.xs: In function 'XS_Opcode_invert_opset':
Opcode.xs:25:33: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
   25 | #define opset_len               (MY_CXT.x_opset_len)
      |                                 ^
Opcode.xs:357:18: note: in expansion of macro 'opset_len'
  357 |     STRLEN len = opset_len;
      |                  ^~~~~~~~~
Opcode.xs:365:32: warning: unsigned conversion from 'int' to 'char' changes the value of '-193' [-Wsign-conversion]
  365 |         bitmap[opset_len-1] &= ~(char)(0xFF << (PL_maxo & 0x07));
      |                                ^
Opcode.xs: In function 'XS_Opcode_opset':
Opcode.xs:415:47: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  415 |         set_opset_bits(aTHX_ bitmap, bitspec, on, opname);
      |                                               ^~
Opcode.xs: In function 'XS_Opcode_opdesc':
Opcode.xs:475:59: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  475 |     args = (SV**)SvPVX(newSVpvn_flags((char*)&ST(0), items*sizeof(SV*), SVs_TEMP));
      |                                                           ^
../../sv.h:1318:25: note: in definition of macro 'SvPVX'
 1318 | #    define SvPVX(sv) ((sv)->sv_u.svu_pv)
      |                         ^~
Opcode.xs:475:24: note: in expansion of macro 'newSVpvn_flags'
  475 |     args = (SV**)SvPVX(newSVpvn_flags((char*)&ST(0), items*sizeof(SV*), SVs_TEMP));
      |                        ^~~~~~~~~~~~~~
In file included from ../../perl.h:4161:
Opcode.c: In function 'boot_Opcode':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Opcode.c:876:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  876 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Opcode.c:876:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  876 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Opcode/Opcode.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Opcode.o  -o ../../lib/auto/Opcode/Opcode.so  \
      \
  
chmod 755 ../../lib/auto/Opcode/Opcode.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Opcode'
./miniperl_top make_ext_Makefile.pl ext/PerlIO-encoding/Makefile.PL
Creating ext/PerlIO-encoding/Makefile.PL for PerlIO::encoding
cd ext/PerlIO-encoding/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for PerlIO::encoding
make -C ext/PerlIO-encoding/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-encoding'
cp encoding.pm ../../lib/PerlIO/encoding.pm
Running Mkbootstrap for encoding ()
chmod 644 "encoding.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-encoding/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- encoding.bs ../../lib/auto/PerlIO/encoding/encoding.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-encoding/../../lib/ExtUtils/typemap'  encoding.xs > encoding.xsc
mv encoding.xsc encoding.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.30\" -DXS_VERSION=\"0.30\" -fPIC -Wno-unused-function "-I../.."   encoding.c
In file included from ../../perl.h:7246,
                 from encoding.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
encoding.xs: In function 'PerlIOEncode_fill':
encoding.xs:311:50: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  311 |                 sv_catpvn(e->dataSV, (char*)ptr, use);
      |                                                  ^~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
encoding.xs:311:17: note: in expansion of macro 'sv_catpvn'
  311 |                 sv_catpvn(e->dataSV, (char*)ptr, use);
      |                 ^~~~~~~~~
encoding.xs:321:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  321 |         if (use + SvCUR(e->dataSV) > e->base.bufsiz) {
      |                 ^
encoding.xs:324:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  324 |                 e->base.bufsiz = use + SvCUR(e->dataSV);
      |                                      ^
encoding.xs:328:23: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  328 |                 use = e->base.bufsiz - SvCUR(e->dataSV);
      |                       ^
encoding.xs:331:40: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  331 |         sv_catpvn(e->dataSV,(char*)ptr,use);
      |                                        ^~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
encoding.xs:331:9: note: in expansion of macro 'sv_catpvn'
  331 |         sv_catpvn(e->dataSV,(char*)ptr,use);
      |         ^~~~~~~~~
../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
encoding.xs:371:17: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  371 |             use -= SvCUR(e->dataSV);
      |                 ^~
../../sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
encoding.xs:371:20: note: in expansion of macro 'SvCUR'
  371 |             use -= SvCUR(e->dataSV);
      |                    ^~~~~
encoding.xs: In function 'PerlIOEncode_flush':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
encoding.xs:423:13: note: in expansion of macro 'SvCUR_set'
  423 |             SvCUR_set(e->bufsv, e->base.ptr - e->base.buf);
      |             ^~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
encoding.xs:487:17: note: in expansion of macro 'SvCUR_set'
  487 |                 SvCUR_set(str, e->base.end - e->base.ptr);
      |                 ^~~~~~~~~
encoding.xs:515:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
  515 |         PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                              ^~
encoding.xs: In function 'PerlIOEncode_close':
encoding.xs:545:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
  545 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
encoding.xs: In function 'PerlIOEncode_write':
encoding.xs:591:52: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  591 |             done = PerlIOBuf_write(aTHX_ f, ptr, nl-ptr);
      |                                                  ~~^~~~
In file included from ../../perl.h:4161:
encoding.c: In function 'boot_PerlIO__encoding':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:807:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  807 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:807:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  807 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/PerlIO/encoding/encoding.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  encoding.o  -o ../../lib/auto/PerlIO/encoding/encoding.so  \
      \
  
chmod 755 ../../lib/auto/PerlIO/encoding/encoding.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-encoding'
./miniperl_top make_ext_Makefile.pl ext/PerlIO-mmap/Makefile.PL
Creating ext/PerlIO-mmap/Makefile.PL for PerlIO::mmap
cd ext/PerlIO-mmap/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for PerlIO::mmap
make -C ext/PerlIO-mmap/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-mmap'
cp mmap.pm ../../lib/PerlIO/mmap.pm
Running Mkbootstrap for mmap ()
chmod 644 "mmap.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-mmap/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- mmap.bs ../../lib/auto/PerlIO/mmap/mmap.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-mmap/../../lib/ExtUtils/typemap'  mmap.xs > mmap.xsc
mv mmap.xsc mmap.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.017\" -DXS_VERSION=\"0.017\" -fPIC -Wno-unused-function "-I../.."   mmap.c
In file included from ../../perl.h:7246,
                 from mmap.xs:7:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from mmap.xs:12:
mmap.xs: In function 'PerlIOMmap_map':
../../perliol.h:103:28: warning: conversion to 'IV' {aka 'const long int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  103 | #define PerlIOBase(f)      (*(f))
      |                            ^
mmap.xs:30:22: note: in expansion of macro 'PerlIOBase'
   30 |     const IV flags = PerlIOBase(f)->flags;
      |                      ^~~~~~~~~~
mmap.xs:44:27: warning: conversion from 'long long int' to 'ssize_t' {aka 'int'} may change value [-Wconversion]
   44 |             SSize_t len = st.st_size - b->posn;
      |                           ^~
mmap.xs:58:23: warning: conversion from 'long long int' to 'ssize_t' {aka 'int'} may change value [-Wconversion]
   58 |                 len = st.st_size - posn;
      |                       ^~
mmap.xs:59:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   59 |                 m->mptr = (Mmap_t)mmap(NULL, len, PROT_READ, MAP_SHARED, fd, posn);
      |                                              ^~~
mmap.xs:68:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
   68 |                         (flags & ~PERLIO_F_EOF) | PERLIO_F_RDBUF;
      |                         ^
mmap.xs:72:30: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
   72 |                     m->len = len;
      |                              ^~~
mmap.xs:80:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
   80 |                     flags | PERLIO_F_EOF | PERLIO_F_RDBUF;
      |                     ^~~~~
mmap.xs: In function 'PerlIOMmap_unmap':
mmap.xs:113:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
  113 |         PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                              ^~
mmap.xs: In function 'PerlIOMmap_unread':
mmap.xs:161:30: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-257' to '4294967039' [-Wsign-conversion]
  161 |         PerlIOBase(f)->flags &= ~PERLIO_F_EOF;
      |                              ^~
mmap.xs:162:16: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  162 |         return count;
      |                ^~~~~
In file included from ../../perl.h:4161:
mmap.c: In function 'boot_PerlIO__mmap':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmap.c:454:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  454 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mmap.c:454:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  454 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/PerlIO/mmap/mmap.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  mmap.o  -o ../../lib/auto/PerlIO/mmap/mmap.so  \
      \
  
chmod 755 ../../lib/auto/PerlIO/mmap/mmap.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-mmap'
./miniperl_top make_ext_Makefile.pl ext/PerlIO-scalar/Makefile.PL
Creating ext/PerlIO-scalar/Makefile.PL for PerlIO::scalar
cd ext/PerlIO-scalar/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for PerlIO::scalar
make -C ext/PerlIO-scalar/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-scalar'
cp scalar.pm ../../lib/PerlIO/scalar.pm
Running Mkbootstrap for scalar ()
chmod 644 "scalar.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-scalar/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- scalar.bs ../../lib/auto/PerlIO/scalar/scalar.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-scalar/../../lib/ExtUtils/typemap'  scalar.xs > scalar.xsc
mv scalar.xsc scalar.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.31\" -DXS_VERSION=\"0.31\" -fPIC -Wno-unused-function "-I../.."   scalar.c
In file included from ../../perl.h:7246,
                 from scalar.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
scalar.xs: In function 'PerlIOScalar_close':
scalar.xs:103:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
  103 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
scalar.xs: In function 'PerlIOScalar_write':
scalar.xs:268:16: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  268 |         return count;
      |                ^~~~~
scalar.xs: In function 'PerlIOScalar_get_cnt':
scalar.xs:317:24: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  317 |             return len - (STRLEN)s->posn;
      |                    ~~~~^~~~~~~~~~~~~~~~~
scalar.xs: In function 'PerlIOScalar_set_ptrcnt':
scalar.xs:342:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  342 |     s->posn = len - cnt;
      |                   ^
In file included from ../../perl.h:4161:
scalar.c: In function 'boot_PerlIO__scalar':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scalar.c:607:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  607 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scalar.c:607:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  607 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/PerlIO/scalar/scalar.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  scalar.o  -o ../../lib/auto/PerlIO/scalar/scalar.so  \
      \
  
chmod 755 ../../lib/auto/PerlIO/scalar/scalar.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-scalar'
./miniperl_top make_ext_Makefile.pl ext/PerlIO-via/Makefile.PL
Creating ext/PerlIO-via/Makefile.PL for PerlIO::via
cd ext/PerlIO-via/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for PerlIO::via
make -C ext/PerlIO-via/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-via'
cp via.pm ../../lib/PerlIO/via.pm
Running Mkbootstrap for via ()
chmod 644 "via.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-via/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- via.bs ../../lib/auto/PerlIO/via/via.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-via/../../lib/ExtUtils/typemap'  via.xs > via.xsc
mv via.xsc via.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.18\" -DXS_VERSION=\"0.18\" -fPIC -Wno-unused-function "-I../.."   via.c
In file included from ../../perl.h:7246,
                 from via.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
via.xs: In function 'PerlIOVia_pushed':
via.xs:192:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-32769' to '4294934527' [-Wsign-conversion]
  192 |                     PerlIOBase(f)->flags &= ~PERLIO_F_UTF8;
      |                                          ^~
via.xs:196:42: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4194305' to '4290772991' [-Wsign-conversion]
  196 |                     PerlIOBase(f)->flags &= ~PERLIO_F_FASTGETS;
      |                                          ^~
via.xs: In function 'PerlIOVia_close':
via.xs:350:26: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-393217' to '4294574079' [-Wsign-conversion]
  350 |     PerlIOBase(f)->flags &= ~(PERLIO_F_RDBUF | PERLIO_F_WRBUF);
      |                          ^~
In file included from ../../perl.h:5841:
via.xs: In function 'PerlIOVia_read':
via.xs:432:40: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  432 |             SV *n = sv_2mortal(newSViv(count));
      |                                        ^~~~~
../../embed.h:582:55: note: in definition of macro 'sv_2mortal'
  582 | #define sv_2mortal(a)           Perl_sv_2mortal(aTHX_ a)
      |                                                       ^
via.xs:432:32: note: in expansion of macro 'newSViv'
  432 |             SV *n = sv_2mortal(newSViv(count));
      |                                ^~~~~~~
In file included from ../../perl.h:3003:
../../handy.h:2790:134: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                      ^
via.xs:438:17: note: in expansion of macro 'Move'
  438 |                 Move(SvPVX(buf), vbuf, rd, char);
      |                 ^~~~
via.xs: In function 'PerlIOVia_fill':
../../sv.h:1319:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ^
via.xs:478:22: note: in expansion of macro 'SvCUR'
  478 |             s->cnt = SvCUR(s->var);
      |                      ^~~~~
via.xs: In function 'PerlIOVia_getarg':
../../hv.h:322:63: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  321 |         ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) \
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  322 |                                  ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
../../hv.h:298:25: note: in expansion of macro 'HvNAMELEN_get'
  298 | #define HvNAMELEN(hv)   HvNAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~
via.xs:612:42: note: in expansion of macro 'HvNAMELEN'
  612 |         arg = newSVpvn(HvNAME(s->stash), HvNAMELEN(s->stash));
      |                                          ^~~~~~~~~
In file included from ../../perl.h:4161:
via.c: In function 'boot_PerlIO__via':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
via.c:849:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  849 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
via.c:849:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  849 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/PerlIO/via/via.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  via.o  -o ../../lib/auto/PerlIO/via/via.so  \
      \
  
chmod 755 ../../lib/auto/PerlIO/via/via.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/PerlIO-via'
cd ext/POSIX/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Warning (mostly harmless): No library found for -lposix
Warning (mostly harmless): No library found for -lcposix
Generating a Unix-style Makefile
Writing Makefile for POSIX
make -C ext/POSIX/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/POSIX'
cp lib/POSIX.pm ../../lib/POSIX.pm
cp lib/POSIX.pod ../../lib/POSIX.pod
Running Mkbootstrap for POSIX ()
chmod 644 "POSIX.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/POSIX/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- POSIX.bs ../../lib/auto/POSIX/POSIX.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/POSIX/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/POSIX/typemap'  POSIX.xs > POSIX.xsc
mv POSIX.xsc POSIX.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DSTRUCT_TM_HASZONE -DHINT_SC_EXIST -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"2.03\" -DXS_VERSION=\"2.03\" -fPIC -Wno-unused-function "-I../.."   POSIX.c
In file included from ../../perl.h:7246,
                 from POSIX.xs:8:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
POSIX.xs: In function 'S_setpayload':
../../perl.h:8346:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 8346 |      (NV_NAN_QS_BYTE(nvp) &= ~NV_NAN_QS_BIT) : \
      |                              ^
POSIX.xs:1278:5: note: in expansion of macro 'NV_NAN_SET_SIGNALING'
 1278 |     NV_NAN_SET_SIGNALING(nvp);
      |     ^~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:5841:
POSIX.xs: In function 'XS_POSIX_localeconv':
POSIX.xs:2223:37: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2223 |                                     strlen(strings->name),
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
POSIX.xs:2221:28: note: in expansion of macro 'hv_store'
 2221 |                     (void) hv_store(RETVAL,
      |                            ^~~~~~~~
POSIX.xs:2235:37: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2235 |                                     strlen(integers->name), newSViv(value), 0);
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
POSIX.xs:2234:28: note: in expansion of macro 'hv_store'
 2234 |                     (void) hv_store(RETVAL, integers->name,
      |                            ^~~~~~~~
POSIX.xs: In function 'XS_POSIX_sigaction':
POSIX.xs:3038:17: warning: conversion to 'I32' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3038 |             sigsvp = hv_fetch(GvHVn(siggv),
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
POSIX.xs:3036:22: note: in expansion of macro 'hv_fetch'
 3036 |             }
      |                      ^       
POSIX.xs: In function 'XS_POSIX_read':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'SysRet' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
POSIX.xs:3316:13: note: in expansion of macro 'SvCUR_set'
 3316 |             SvCUR_set(sv_buffer, RETVAL);
      |             ^~~~~~~~~
POSIX.c: In function 'XS_POSIX_mblen':
POSIX.c:4550:17: warning: unsigned conversion from 'int' to 'size_t' {aka 'unsigned int'} changes value from '-1' to '4294967295' [-Wsign-conversion]
 4550 |             n = ~0;
      |                 ^
POSIX.c: In function 'XS_POSIX_mbtowc':
POSIX.c:4623:17: warning: unsigned conversion from 'int' to 'size_t' {aka 'unsigned int'} changes value from '-1' to '4294967295' [-Wsign-conversion]
 4623 |             n = ~0;
      |                 ^
POSIX.xs:3463:38: warning: conversion to 'IV' {aka 'const long int'} from 'wchar_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3463 |                     sv_setiv_mg(pwc, wc);
      |                                      ^~
../../embed.h:682:58: note: in definition of macro 'sv_setiv_mg'
  682 | #define sv_setiv_mg(a,b)        Perl_sv_setiv_mg(aTHX_ a,b)
      |                                                          ^
POSIX.xs: In function 'XS_POSIX_wctomb':
POSIX.xs:3490:22: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3490 |             RETVAL = wcrtomb(NULL, L'\0', &PL_wcrtomb_ps);
      |                      ^~~~~~~
POSIX.xs:3500:22: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3500 |             RETVAL = wcrtomb(buffer, wchar, &PL_wcrtomb_ps);
      |                      ^~~~~~~
POSIX.xs:3509:41: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3509 |                 sv_setpvn_mg(s, buffer, RETVAL);
      |                                         ^~~~~~
../../embed.h:700:61: note: in definition of macro 'sv_setpvn_mg'
  700 | #define sv_setpvn_mg(a,b,c)     Perl_sv_setpvn_mg(aTHX_ a,b,c)
      |                                                             ^
In file included from ../../perl.h:5782:
POSIX.xs: In function 'XS_POSIX_strtod':
POSIX.xs:3535:42: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3535 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                          ^~~~~~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
POSIX.xs:3535:23: note: in expansion of macro 'sv_2mortal'
 3535 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                       ^~~~~~~~~~
POSIX.xs:3535:34: note: in expansion of macro 'newSViv'
 3535 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                  ^~~~~~~
POSIX.xs: In function 'XS_POSIX_strtold':
POSIX.xs:3557:42: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3557 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                          ^~~~~~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
POSIX.xs:3557:23: note: in expansion of macro 'sv_2mortal'
 3557 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                       ^~~~~~~~~~
POSIX.xs:3557:34: note: in expansion of macro 'newSViv'
 3557 |                 PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                  ^~~~~~~
POSIX.xs: In function 'XS_POSIX_strtol':
POSIX.xs:3583:46: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3583 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                              ^~~~~~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
POSIX.xs:3583:27: note: in expansion of macro 'sv_2mortal'
 3583 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                           ^~~~~~~~~~
POSIX.xs:3583:38: note: in expansion of macro 'newSViv'
 3583 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                      ^~~~~~~
POSIX.xs: In function 'XS_POSIX_strtoul':
POSIX.xs:3617:46: warning: conversion to 'IV' {aka 'const long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3617 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                              ^~~~~~~~~~~~~~~~
../../pp.h:472:35: note: in definition of macro 'PUSHs'
  472 | #define PUSHs(s)        (*++sp = (s))
      |                                   ^
POSIX.xs:3617:27: note: in expansion of macro 'sv_2mortal'
 3617 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                           ^~~~~~~~~~
POSIX.xs:3617:38: note: in expansion of macro 'newSViv'
 3617 |                     PUSHs(sv_2mortal(newSViv(strlen(unparsed))));
      |                                      ^~~~~~~
POSIX.xs: In function 'XS_POSIX_mkfifo':
POSIX.xs:3661:39: warning: conversion to 'int' from 'mode_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3661 |             RETVAL = access(filename, mode);
      |                                       ^~~~
POSIX.c: In function 'XS_POSIX_sleep':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
POSIX.c:5559:9: note: in expansion of macro 'PUSHu'
 5559 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4161:
POSIX.c: In function 'boot_POSIX':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POSIX.c:5747:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 5747 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POSIX.c:5747:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 5747 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:1387:32: note: in expansion of macro 'HEK_LEN'
 1387 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
./const-xs.inc:1405:21: warning: conversion to 'IV' {aka 'long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1405 |             temp0 = MB_CUR_MAX;
      |                     ^~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/POSIX/POSIX.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  POSIX.o  -o ../../lib/auto/POSIX/POSIX.so  \
   -lm   \
  
chmod 755 ../../lib/auto/POSIX/POSIX.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/POSIX'
cd ext/re/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for re
make -C ext/re/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/re'
Skip ../../lib/re.pm (unchanged)
Running Mkbootstrap for re ()
chmod 644 "re.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/re/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- re.bs ../../lib/auto/re/re.bs 644
rm -f re_exec.c
cp ../../regexec.c re_exec.c
rm -f invlist_inline.h
cp ../../invlist_inline.h invlist_inline.h
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.43\" -DXS_VERSION=\"0.43\" -fPIC -Wno-unused-function "-I../.."  -DPERL_EXT_RE_BUILD -DPERL_EXT_RE_DEBUG -DPERL_EXT re_exec.c
In file included from ../../perl.h:7246,
                 from re_exec.c:75:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
In file included from ../../perl.h:3859:
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1408:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1408 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:1992:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1992 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR_flags':
../../inline.h:2261:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2261 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_is_utf8_valid_partial_char_flags':
../../inline.h:2347:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2347 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
re_exec.c: In function 'S_regcppush':
re_exec.c:232:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  232 |                 (maxopenparen - parenfloor) * REGCP_PAREN_ELEMS;
      |                               ^
re_exec.c:232:17: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  232 |                 (maxopenparen - parenfloor) * REGCP_PAREN_ELEMS;
      |                 ^
re_exec.c:233:28: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  233 |     const UV total_elems = paren_elems_to_push + REGCP_OTHER_ELEMS;
      |                            ^~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:5841:
re_exec.c:252:24: warning: conversion to 'I32' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
  252 |     SSGROW(total_elems + REGCP_FRAME_ELEMS);
      |                        ^
../../embed.h:560:63: note: in definition of macro 'savestack_grow_cnt'
  560 | #define savestack_grow_cnt(a)   Perl_savestack_grow_cnt(aTHX_ a)
      |                                                               ^
re_exec.c:252:5: note: in expansion of macro 'SSGROW'
  252 |     SSGROW(total_elems + REGCP_FRAME_ELEMS);
      |     ^~~~~~
In file included from ../../perl.h:4172:
re_exec.c: In function 'S_regcppop':
../../scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
re_exec.c:354:27: note: in expansion of macro 'SSPOPINT'
  354 |     rex->lastcloseparen = SSPOPINT;
      |                           ^~~~~~~~
../../scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
re_exec.c:355:22: note: in expansion of macro 'SSPOPINT'
  355 |     rex->lastparen = SSPOPINT;
      |                      ^~~~~~~~
../../scope.h:145:18: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  145 | #define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
      |                  ^
re_exec.c:356:23: note: in expansion of macro 'SSPOPINT'
  356 |     *maxopenparen_p = SSPOPINT;
      |                       ^~~~~~~~
In file included from ../../perl.h:3003:
re_exec.c: In function 'S_isFOO_utf8_lc':
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
re_exec.c:516:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  516 |     else if (UTF8_IS_DOWNGRADEABLE_START(*character)) {
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../embed.h:1216:52: note: in definition of macro 'isFOO_lc'
 1216 | #define isFOO_lc(a,b)           S_isFOO_lc(aTHX_ a,b)
      |                                                    ^
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:518:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
  518 |                         EIGHT_BIT_UTF8_TO_NATIVE(*character, *(character + 1)));
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c: In function 'my_re_intuit_start':
../../sv.h:1265:9: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
      |         ^
re_exec.c:1004:32: note: in expansion of macro 'SvCUR'
 1004 |                 SSize_t slen = SvCUR(check);
      |                                ^~~~~
re_exec.c:1030:67: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1030 |                     || (slen > 1 && (memNE(SvPVX_const(check), s, slen)))))
      |                                                                   ^~~~
../../handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
re_exec.c:1030:38: note: in expansion of macro 'memNE'
 1030 |                     || (slen > 1 && (memNE(SvPVX_const(check), s, slen)))))
      |                                      ^~~~~
../../sv.h:1265:9: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
      |         ^
re_exec.c:1114:33: note: in expansion of macro 'SvCUR'
 1114 |             SSize_t check_len = SvCUR(check) - !!SvTAIL(check);
      |                                 ^~~~~
re_exec.c:1419:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1419 |             ! ( rx_origin = (char *)memchr(rx_origin, '\n', s - rx_origin)))
      |                                                             ~~^~~~~~~~~~~
re_exec.c: In function 'S_find_byclass':
re_exec.c:1914:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1914 |     REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND(memchr(s, byte, strend - s),     \
      |                                                        ~~~~~~~^~~
re_exec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
re_exec.c:2312:13: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN'
 2312 |             REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN(first_byte,
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
re_exec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
re_exec.c:1921:38: note: in expansion of macro 'ninstr'
 1921 |                                      ninstr(s, strend, substr, substr_end), \
      |                                      ^~~~~~
re_exec.c:2329:9: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_STRING_SCAN'
 2329 |         REXEC_FBC_FIND_NEXT_UTF8_STRING_SCAN(
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1914:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1914 |     REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND(memchr(s, byte, strend - s),     \
      |                                                        ~~~~~~~^~~
re_exec.c:1893:23: note: in definition of macro 'REXEC_FBC_FIND_NEXT_UTF8_SCAN_COND'
 1893 |         s = (char *) (f);                                     \
      |                       ^
re_exec.c:2364:13: note: in expansion of macro 'REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN'
 2364 |             REXEC_FBC_FIND_NEXT_UTF8_BYTE_SCAN(first_byte,
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:2432:50: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2432 |                 s = (char *) memchr(s, c1, e + 1 - s);
      |                                            ~~~~~~^~~
re_exec.c:2438:69: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2438 |                 if (   (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                  ~~~^~~
re_exec.c:2462:73: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2462 |                     if (   (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                      ~~~^~~
re_exec.c:2474:73: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2474 |                         && (ln == 1 || folder(s + 1, pat_string + 1, ln - 1))
      |                                                                      ~~~^~~
re_exec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
../../embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
re_exec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../handy.h:2140:52: note: in expansion of macro '_is_uni_FOO'
 2140 |                             (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))
      |                                                    ^~~~~~~~~~~
../../handy.h:2162:32: note: in expansion of macro '_generic_LC_invlist_uvchr'
 2162 | #define isWORDCHAR_LC_uvchr(c) _generic_LC_invlist_uvchr(isWORDCHAR_LC,         \
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1986:11: note: in expansion of macro 'isWORDCHAR_LC_uvchr'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2347:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2347 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1893:16: note: in expansion of macro 'cBOOL'
 1893 |              ? cBOOL(PL_charclass[(U8) (c)] & _CC_mask(utf8_locale_classnum))  \
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1894:16: note: in expansion of macro 'cBOOL'
 1894 |              : cBOOL(non_utf8))
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1894:16: note: in expansion of macro 'cBOOL'
 1894 |              : cBOOL(non_utf8))
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2784:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2784 |             FBC_BOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~
re_exec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
../../embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
re_exec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../handy.h:2140:52: note: in expansion of macro '_is_uni_FOO'
 2140 |                             (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))
      |                                                    ^~~~~~~~~~~
../../handy.h:2162:32: note: in expansion of macro '_generic_LC_invlist_uvchr'
 2162 | #define isWORDCHAR_LC_uvchr(c) _generic_LC_invlist_uvchr(isWORDCHAR_LC,         \
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1986:11: note: in expansion of macro 'isWORDCHAR_LC_uvchr'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2347:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2347 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1893:16: note: in expansion of macro 'cBOOL'
 1893 |              ? cBOOL(PL_charclass[(U8) (c)] & _CC_mask(utf8_locale_classnum))  \
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1894:16: note: in expansion of macro 'cBOOL'
 1894 |              : cBOOL(non_utf8))
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1894:16: note: in expansion of macro 'cBOOL'
 1894 |              : cBOOL(non_utf8))
      |                ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2798:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2798 |             FBC_NBOUND_UTF8(isWORDCHAR_LC, isWORDCHAR_LC_uvchr,
      |             ^~~~~~~~~~~~~~~
re_exec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
../../embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
re_exec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../handy.h:2078:48: note: in expansion of macro '_is_uni_FOO'
 2078 |                                              : _is_uni_FOO(classnum, c))
      |                                                ^~~~~~~~~~~
../../handy.h:2099:31: note: in expansion of macro '_generic_invlist_uvchr'
 2099 | #define isWORDCHAR_uvchr(c)   _generic_invlist_uvchr(_CC_WORDCHAR, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2125:33: note: in expansion of macro 'isWORDCHAR_uvchr'
 2125 | #define isWORDCHAR_uni(c)       isWORDCHAR_uvchr(c)
      |                                 ^~~~~~~~~~~~~~~~
re_exec.c:1986:11: note: in expansion of macro 'isWORDCHAR_uni'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2071:15: note: in expansion of macro 'FBC_UTF8'
 2071 |               FBC_UTF8(TEST_UV, TEST_UTF8, PLACEHOLDER, REXEC_FBC_TRYIT),   \
      |               ^~~~~~~~
re_exec.c:2819:13: note: in expansion of macro 'FBC_NBOUND_UTF8'
 2819 |             FBC_NBOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni,
      |             ^~~~~~~~~~~~~~~
re_exec.c:1983:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |                                 ~~~~~~~~~~~~~~~~~~~~~~^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
../../embed.h:769:33: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  769 | #define utf8n_to_uvchr_msgs     Perl_utf8n_to_uvchr_msgs
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../utf8.h:83:25: note: in expansion of macro 'utf8n_to_uvchr_msgs'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                         ^~~~~~~~~~~~~~~~~~~
../../utf8.h:81:33: note: in expansion of macro 'utf8n_to_uvchr_error'
   81 |                                 utf8n_to_uvchr_error(s, len, lenp, flags, 0)
      |                                 ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1983:15: note: in expansion of macro 'utf8n_to_uvchr'
 1983 |         tmp = utf8n_to_uvchr(r, (U8*) reginfo->strend - r,                     \
      |               ^~~~~~~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
re_exec.c:1986:19: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |                   ^~~
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
../../handy.h:2078:48: note: in expansion of macro '_is_uni_FOO'
 2078 |                                              : _is_uni_FOO(classnum, c))
      |                                                ^~~~~~~~~~~
../../handy.h:2099:31: note: in expansion of macro '_generic_invlist_uvchr'
 2099 | #define isWORDCHAR_uvchr(c)   _generic_invlist_uvchr(_CC_WORDCHAR, c)
      |                               ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2125:33: note: in expansion of macro 'isWORDCHAR_uvchr'
 2125 | #define isWORDCHAR_uni(c)       isWORDCHAR_uvchr(c)
      |                                 ^~~~~~~~~~~~~~~~
re_exec.c:1986:11: note: in expansion of macro 'isWORDCHAR_uni'
 1986 |     tmp = TEST_UV(tmp);                                                        \
      |           ^~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:2001:5: note: in definition of macro 'FBC_BOUND_COMMON_UTF8'
 2001 |     UTF8_CODE;                                                                 \
      |     ^~~~~~~~~
re_exec.c:1987:5: note: in expansion of macro 'REXEC_FBC_UTF8_SCAN'
 1987 |     REXEC_FBC_UTF8_SCAN(/* advances s while s < strend */                      \
      |     ^~~~~~~~~~~~~~~~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:1988:23: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 1988 |         if (tmp == ! (TEST_UTF8((U8 *) s, (U8 *) reginfo->strend))) {          \
      |                       ^~~~~~~~~
re_exec.c:2055:11: note: in expansion of macro 'FBC_UTF8'
 2055 |           FBC_UTF8(TEST_UV, TEST_UTF8, REXEC_FBC_TRYIT, PLACEHOLDER),       \
      |           ^~~~~~~~
re_exec.c:2838:13: note: in expansion of macro 'FBC_BOUND_UTF8'
 2838 |             FBC_BOUND_UTF8(isWORDCHAR_L1, isWORDCHAR_uni, isWORDCHAR_utf8_safe);
      |             ^~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3087:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3087 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3088:41: note: in expansion of macro 'cBOOL'
 3088 |                         to_complement ^ cBOOL(isSPACE_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2292:5: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2292 |     _generic_non_invlist_utf8_safe(_CC_SPACE, is_XPERLSPACE_high, p, e)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3088:47: note: in expansion of macro 'isSPACE_utf8_safe'
 3088 |                         to_complement ^ cBOOL(isSPACE_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3087:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3087 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3088:41: note: in expansion of macro 'cBOOL'
 3088 |                         to_complement ^ cBOOL(isSPACE_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2292:5: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2292 |     _generic_non_invlist_utf8_safe(_CC_SPACE, is_XPERLSPACE_high, p, e)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3088:47: note: in expansion of macro 'isSPACE_utf8_safe'
 3088 |                         to_complement ^ cBOOL(isSPACE_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3092:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3092 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3093:41: note: in expansion of macro 'cBOOL'
 3093 |                         to_complement ^ cBOOL(isBLANK_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2259:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2259 |         _generic_non_invlist_utf8_safe(_CC_BLANK, is_HORIZWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3093:47: note: in expansion of macro 'isBLANK_utf8_safe'
 3093 |                         to_complement ^ cBOOL(isBLANK_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3092:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3092 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3093:41: note: in expansion of macro 'cBOOL'
 3093 |                         to_complement ^ cBOOL(isBLANK_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2259:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2259 |         _generic_non_invlist_utf8_safe(_CC_BLANK, is_HORIZWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3093:47: note: in expansion of macro 'isBLANK_utf8_safe'
 3093 |                         to_complement ^ cBOOL(isBLANK_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3097:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3097 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3098:41: note: in expansion of macro 'cBOOL'
 3098 |                         to_complement ^ cBOOL(isXDIGIT_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2227:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2227 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p)))                             \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2299:20: note: in expansion of macro '_generic_utf8_safe_no_upper_latin1'
 2299 |                    _generic_utf8_safe_no_upper_latin1(_CC_XDIGIT, p, e,     \
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3098:47: note: in expansion of macro 'isXDIGIT_utf8_safe'
 3098 |                         to_complement ^ cBOOL(isXDIGIT_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3102:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3102 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3103:41: note: in expansion of macro 'cBOOL'
 3103 |                         to_complement ^ cBOOL(isVERTWS_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2295:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2295 |         _generic_non_invlist_utf8_safe(_CC_VERTSPACE, is_VERTWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3103:47: note: in expansion of macro 'isVERTWS_utf8_safe'
 3103 |                         to_complement ^ cBOOL(isVERTWS_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3102:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3102 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3103:41: note: in expansion of macro 'cBOOL'
 3103 |                         to_complement ^ cBOOL(isVERTWS_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2295:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2295 |         _generic_non_invlist_utf8_safe(_CC_VERTSPACE, is_VERTWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3103:47: note: in expansion of macro 'isVERTWS_utf8_safe'
 3103 |                         to_complement ^ cBOOL(isVERTWS_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3107:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3107 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3108:41: note: in expansion of macro 'cBOOL'
 3108 |                         to_complement ^ cBOOL(isCNTRL_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2267:37: note: in expansion of macro '_generic_utf8_safe'
 2267 | #   define isCNTRL_utf8_safe(p, e)  _generic_utf8_safe(_CC_CNTRL, p, e, 0)
      |                                     ^~~~~~~~~~~~~~~~~~
re_exec.c:3108:47: note: in expansion of macro 'isCNTRL_utf8_safe'
 3108 |                         to_complement ^ cBOOL(isCNTRL_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
re_exec.c:1827:9: note: in definition of macro 'REXEC_FBC_UTF8_CLASS_SCAN_GUTS'
 1827 |     if (COND) {                                                \
      |         ^~~~
re_exec.c:3107:13: note: in expansion of macro 'REXEC_FBC_UTF8_CLASS_SCAN'
 3107 |             REXEC_FBC_UTF8_CLASS_SCAN(
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:3108:41: note: in expansion of macro 'cBOOL'
 3108 |                         to_complement ^ cBOOL(isCNTRL_utf8_safe(s, strend)));
      |                                         ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2267:37: note: in expansion of macro '_generic_utf8_safe'
 2267 | #   define isCNTRL_utf8_safe(p, e)  _generic_utf8_safe(_CC_CNTRL, p, e, 0)
      |                                     ^~~~~~~~~~~~~~~~~~
re_exec.c:3108:47: note: in expansion of macro 'isCNTRL_utf8_safe'
 3108 |                         to_complement ^ cBOOL(isCNTRL_utf8_safe(s, strend)));
      |                                               ^~~~~~~~~~~~~~~~~
../../utf8.h:737:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 | #define UTF8_SAFE_SKIP(s, e)  (__ASSERT_((e) >= (s))                \
      |                               ^
re_exec.c:1738:19: note: in expansion of macro 'UTF8_SAFE_SKIP'
 1738 |             len = UTF8_SAFE_SKIP(uc, uc_end);                                       \
      |                   ^~~~~~~~~~~~~~
re_exec.c:3242:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 3242 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1772:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |                                                      ^
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_exec.c:1772:15: note: in expansion of macro 'utf8n_to_uvchr'
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |               ^~~~~~~~~~~~~~
re_exec.c:3242:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 3242 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
re_exec.c:3279:47: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3279 |                                  ( ((offset = base + charid
      |                                               ^~~~
re_exec.c: In function 'S_reg_set_capture_string':
re_exec.c:3477:68: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3477 |                             (char*)saferealloc(prog->subbeg, sublen+1);
      |                                                              ~~~~~~^~
re_exec.c:3480:56: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3480 |                 prog->subbeg = (char*)safemalloc(sublen+1);
      |                                                  ~~~~~~^~
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
re_exec.c:3481:13: note: in expansion of macro 'Copy'
 3481 |             Copy(strbeg + min, prog->subbeg, sublen, char);
      |             ^~~~
re_exec.c:3504:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3504 |                 prog->subcoffset = sv_pos_b2u_flags(sv, prog->subcoffset,
      |                                                         ~~~~^~~~~~~~~~~~
../../embed.h:654:63: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                                               ^
../../embed.h:654:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
../../embed.h:654:33: note: in definition of macro 'sv_pos_b2u_flags'
  654 | #define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
      |                                 ^~~~~~~~~~~~~~~~~~~~~
../../embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
In file included from ../../perl.h:4171:
re_exec.c: In function 'my_regexec':
re_exec.c:3585:56: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3585 |             ? strbeg + MgBYTEPOS(mg, sv, strbeg, strend-strbeg)
      |                                                  ~~~~~~^~~~~~~
../../mg.h:73:61: note: in definition of macro 'MgBYTEPOS'
   73 | # define MgBYTEPOS(mg,sv,pv,len) S_MgBYTEPOS(aTHX_ mg,sv,pv,len)
      |                                                             ^~~
re_exec.c:140:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |             ? reghopmaybe3((U8*)pos, (SSize_t)0-off, (U8*)(lim)) \
      |                                                ^
re_exec.c:145:36: note: in expansion of macro 'HOPBACK3'
  145 | #define HOPBACKc(pos, off) ((char*)HOPBACK3(pos, off, reginfo->strbeg))
      |                                    ^~~~~~~~
re_exec.c:3603:28: note: in expansion of macro 'HOPBACKc'
 3603 |                 startpos = HOPBACKc(reginfo->ganch, prog->gofs);
      |                            ^~~~~~~~
re_exec.c:140:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |             ? reghopmaybe3((U8*)pos, (SSize_t)0-off, (U8*)(lim)) \
      |                                                ^
re_exec.c:145:36: note: in expansion of macro 'HOPBACK3'
  145 | #define HOPBACKc(pos, off) ((char*)HOPBACK3(pos, off, reginfo->strbeg))
      |                                    ^~~~~~~~
re_exec.c:3616:24: note: in expansion of macro 'HOPBACKc'
 3616 |             startpos = HOPBACKc(startpos, prog->gofs);
      |                        ^~~~~~~~
re_exec.c:140:48: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  140 |             ? reghopmaybe3((U8*)pos, (SSize_t)0-off, (U8*)(lim)) \
      |                                                ^
re_exec.c:145:36: note: in expansion of macro 'HOPBACK3'
  145 | #define HOPBACKc(pos, off) ((char*)HOPBACK3(pos, off, reginfo->strbeg))
      |                                    ^~~~~~~~
re_exec.c:3847:28: note: in expansion of macro 'HOPBACKc'
 3847 |         assert(startpos == HOPBACKc(reginfo->ganch, prog->gofs));
      |                            ^~~~~~~~
re_exec.c:3952:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3952 |                          - (SvTAIL(must) != 0) + back_min), strbeg);
      |                                                ^
re_exec.c:147:75: note: in definition of macro 'HOP3'
  147 | #define HOP3(pos,off,lim) (reginfo->is_utf8_target  ? reghop3((U8*)(pos), off, (U8*)(lim)) : (U8*)(pos + off))
      |                                                                           ^~~
re_exec.c:3950:20: note: in expansion of macro 'HOP3c'
 3950 |             last = HOP3c(strend,        /* Cannot start after this */
      |                    ^~~~~
re_exec.c:3952:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 3952 |                          - (SvTAIL(must) != 0) + back_min), strbeg);
      |                                                ^
re_exec.c:147:106: note: in definition of macro 'HOP3'
  147 | #define HOP3(pos,off,lim) (reginfo->is_utf8_target  ? reghop3((U8*)(pos), off, (U8*)(lim)) : (U8*)(pos + off))
      |                                                                                                          ^~~
re_exec.c:3950:20: note: in expansion of macro 'HOP3c'
 3950 |             last = HOP3c(strend,        /* Cannot start after this */
      |                    ^~~~~
re_exec.c:4020:29: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4020 |                     s,strend-s,PL_dump_re_max_len);
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_exec.c:4015:9: note: in expansion of macro 'DEBUG_EXECUTE_r'
 4015 |         DEBUG_EXECUTE_r({
      |         ^~~~~~~~~~~~~~~
../../regcomp.h:1141:9: note: in expansion of macro 'pv_pretty'
 1141 |         pv_pretty((dsv), (pv), (l), (m),                            \
      |         ^~~~~~~~~
re_exec.c:4019:17: note: in expansion of macro 'RE_PV_QUOTED_DECL'
 4019 |                 RE_PV_QUOTED_DECL(quoted,utf8_target,PERL_DEBUG_PAD_ZERO(1),
      |                 ^~~~~~~~~~~~~~~~~
re_exec.c: In function 'S_regtry':
re_exec.c:4274:18: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4274 |         for (i = prog->nparens; i > (I32)prog->lastparen; i--) {
      |                  ^~~~
re_exec.c: In function 'S_debug_start_match':
re_exec.c:4348:24: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4348 |             start, end - start, PL_dump_re_max_len);
../../embed.h:477:66: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                  ^
re_exec.c:4347:9: note: in expansion of macro 'RE_PV_QUOTED_DECL'
 4347 |         RE_PV_QUOTED_DECL(s1, utf8_target, PERL_DEBUG_PAD_ZERO(1),
      |         ^~~~~~~~~~~~~~~~~
re_exec.c: In function 'S_dump_exec_pos':
../../regcomp.h:1127:32: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1127 |         pv_pretty((dsv), (pv), (l), (m),                    \
      |                                ^~~
../../embed.h:477:66: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                  ^
re_exec.c:4403:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4403 |         RE_PV_COLOR_DECL(s0,len0,is_uni,PERL_DEBUG_PAD(0),
      |         ^~~~~~~~~~~~~~~~
../../sv.h:1265:9: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
      |         ^
../../regcomp.h:1130:22: note: in expansion of macro 'SvCUR'
 1130 |     const int rlen = SvCUR(dsv)
      |                      ^~~~~
re_exec.c:4403:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4403 |         RE_PV_COLOR_DECL(s0,len0,is_uni,PERL_DEBUG_PAD(0),
      |         ^~~~~~~~~~~~~~~~
re_exec.c:4408:30: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4408 |                     pref_len - pref0_len, PL_dump_re_max_len, 2, 3);
../../embed.h:477:66: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                  ^
re_exec.c:4406:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4406 |         RE_PV_COLOR_DECL(s1,len1,is_uni,PERL_DEBUG_PAD(1),
      |         ^~~~~~~~~~~~~~~~
../../sv.h:1265:9: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
      |         ^
../../regcomp.h:1130:22: note: in expansion of macro 'SvCUR'
 1130 |     const int rlen = SvCUR(dsv)
      |                      ^~~~~
re_exec.c:4406:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4406 |         RE_PV_COLOR_DECL(s1,len1,is_uni,PERL_DEBUG_PAD(1),
      |         ^~~~~~~~~~~~~~~~
re_exec.c:4411:42: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4411 |                     locinput, loc_regeol - locinput, 10, 0, 1);
../../embed.h:477:66: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                  ^
re_exec.c:4410:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4410 |         RE_PV_COLOR_DECL(s2,len2,is_uni,PERL_DEBUG_PAD(2),
      |         ^~~~~~~~~~~~~~~~
../../sv.h:1265:9: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
      |         ^
../../regcomp.h:1130:22: note: in expansion of macro 'SvCUR'
 1130 |     const int rlen = SvCUR(dsv)
      |                      ^~~~~
re_exec.c:4410:9: note: in expansion of macro 'RE_PV_COLOR_DECL'
 4410 |         RE_PV_COLOR_DECL(s2,len2,is_uni,PERL_DEBUG_PAD(2),
      |         ^~~~~~~~~~~~~~~~
re_exec.c:4413:27: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4413 |         const STRLEN tlen=len0+len1+len2;
      |                           ^~~~
re_exec.c: In function 'S_setup_EXACTISH_ST':
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
re_exec.c:4634:30: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 4634 |                 else if (    UTF8_IS_DOWNGRADEABLE_START(*pat)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1866:33: note: in definition of macro 'toLOWER_LATIN1'
 1866 |                              ? (c)                                         \
      |                                 ^
re_exec.c:4643:34: note: in expansion of macro 'toLOWER_L1'
 4643 |                     mod_pat[0] = toLOWER_L1(EIGHT_BIT_UTF8_TO_NATIVE(pat[0],
      |                                  ^~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:4643:45: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 4643 |                     mod_pat[0] = toLOWER_L1(EIGHT_BIT_UTF8_TO_NATIVE(pat[0],
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1867:52: note: in definition of macro 'toLOWER_LATIN1'
 1867 |                              : PL_latin1_lc[ (U8) (c) ])
      |                                                    ^
re_exec.c:4643:34: note: in expansion of macro 'toLOWER_L1'
 4643 |                     mod_pat[0] = toLOWER_L1(EIGHT_BIT_UTF8_TO_NATIVE(pat[0],
      |                                  ^~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:4643:45: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 4643 |                     mod_pat[0] = toLOWER_L1(EIGHT_BIT_UTF8_TO_NATIVE(pat[0],
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
re_exec.c:4732:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 4732 |          if (UTF8_IS_DOWNGRADEABLE_START(*pat))
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:4734:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 4734 |         matches[0][0] = EIGHT_BIT_UTF8_TO_NATIVE(pat[0], pat[1]);
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
../../perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
re_exec.c:4792:18: note: in expansion of macro 'UNLIKELY'
 4792 |         else if (UNLIKELY(    op == TURKISH
      |                  ^~~~~~~~
../../handy.h:2515:24: note: in expansion of macro '__ASSERT_'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                        ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:2515:34: note: in expansion of macro 'isALPHA_A'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                                  ^~~~~~~~~
re_exec.c:4793:34: note: in expansion of macro 'isALPHA_FOLD_EQ'
 4793 |                           && (   isALPHA_FOLD_EQ(folded, 'i')
      |                                  ^~~~~~~~~~~~~~~
../../handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
../../perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
../../perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
re_exec.c:4792:18: note: in expansion of macro 'UNLIKELY'
 4792 |         else if (UNLIKELY(    op == TURKISH
      |                  ^~~~~~~~
re_exec.c:4793:34: note: in expansion of macro 'isALPHA_FOLD_EQ'
 4793 |                           && (   isALPHA_FOLD_EQ(folded, 'i')
      |                                  ^~~~~~~~~~~~~~~
re_exec.c:4822:23: warning: conversion to 'long unsigned int' from 'long int' may change the sign of the result [-Wsign-conversion]
 4822 |                       + UNLIKELY(multi_fold_from != 0); i++)
      |                       ^
../../utf8.h:455:5: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  455 |     ((OFFUNI_IS_INVARIANT(uv))                                              \
      |     ^
../../utf8.h:482:25: note: in expansion of macro 'OFFUNISKIP'
  482 | #define UVCHR_SKIP(uv)  OFFUNISKIP(NATIVE_TO_UNI(uv))
      |                         ^~~~~~~~~~
re_exec.c:4872:37: note: in expansion of macro 'UVCHR_SKIP'
 4872 |                 lengths[m->count] = UVCHR_SKIP(fold_from);
      |                                     ^~~~~~~~~~
re_exec.c:4881:40: warning: conversion from 'UV' {aka 'long unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4881 |                 matches[m->count][0] = fold_from;
      |                                        ^~~~~~~~~
re_exec.c:4892:36: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4892 |                 index_of_longest = m->count - 1;
      |                                    ^
re_exec.c:4976:20: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 4976 |         U8 shift = (which - 1) * 8;
      |                    ^
re_exec.c: In function 'S_regmatch':
../../utf8.h:737:31: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  737 | #define UTF8_SAFE_SKIP(s, e)  (__ASSERT_((e) >= (s))                \
      |                               ^
re_exec.c:1738:19: note: in expansion of macro 'UTF8_SAFE_SKIP'
 1738 |             len = UTF8_SAFE_SKIP(uc, uc_end);                                       \
      |                   ^~~~~~~~~~~~~~
re_exec.c:6659:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 6659 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
re_exec.c:1772:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |                                                      ^
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_exec.c:1772:15: note: in expansion of macro 'utf8n_to_uvchr'
 1772 |         uvc = utf8n_to_uvchr( (const U8*) uc, uc_end - uc, &len, uniflags );        \
      |               ^~~~~~~~~~~~~~
re_exec.c:6659:25: note: in expansion of macro 'REXEC_TRIE_READ_CHAR'
 6659 |                         REXEC_TRIE_READ_CHAR(trie_type, trie, widecharmap, uc,
      |                         ^~~~~~~~~~~~~~~~~~~~
re_exec.c:6668:31: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6668 |                               base + charid - 1 - trie->uniquecharcount)) >= 0)
      |                               ^~~~
re_exec.c:6808:43: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6808 |                         uc = utf8_hop(uc, chars);
      |                                           ^~~~~
In file included from re_comp.h:6,
                 from re_exec.c:78:
../../regcomp.h:326:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  326 | #define STR_LENl(p)     (__ASSERT_(OP(p) == LEXACT || OP(p) == LEXACT_REQ8)  \
      |                         ^
re_exec.c:6868:18: note: in expansion of macro 'STR_LENl'
 6868 |             ln = STR_LENl(scan);
      |                  ^~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:6924:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 6924 |                             if (EIGHT_BIT_UTF8_TO_NATIVE(*l, *(l+1)) != * (U8*) s)
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:6948:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 6948 |                             if (EIGHT_BIT_UTF8_TO_NATIVE(*s, *(s+1)) != * (U8*) l)
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:6964:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6964 |                     || (ln > 1 && memNE(s, locinput, ln)))
      |                                                      ^~
../../handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
re_exec.c:6964:35: note: in expansion of macro 'memNE'
 6964 |                     || (ln > 1 && memNE(s, locinput, ln)))
      |                                   ^~~~~
re_exec.c:7061:48: warning: conversion to 'UV' {aka 'long unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7061 |                                         s, 0,  ln, is_utf8_pat,fold_utf8_flags))
      |                                                ^~
../../embed.h:183:90: note: in definition of macro 'foldEQ_utf8_flags'
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                                                          ^
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2347:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2347 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7104:26: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7104 |                     b1 = isWORDCHAR_LC_utf8_safe(p, (U8*)(reginfo->strend));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7104:26: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7104 |                     b1 = isWORDCHAR_LC_utf8_safe(p, (U8*)(reginfo->strend));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7104:26: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7104 |                     b1 = isWORDCHAR_LC_utf8_safe(p, (U8*)(reginfo->strend));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7104:26: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7104 |                     b1 = isWORDCHAR_LC_utf8_safe(p, (U8*)(reginfo->strend));
      |                          ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2347:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2347 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7108:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7108 |                     : isWORDCHAR_LC_utf8_safe((U8*) locinput,
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7108:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7108 |                     : isWORDCHAR_LC_utf8_safe((U8*) locinput,
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7108:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7108 |                     : isWORDCHAR_LC_utf8_safe((U8*) locinput,
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1908:25: note: in expansion of macro '_generic_LC_base'
 1908 |                         _generic_LC_base(c, utf8_locale_classnum,              \
      |                         ^~~~~~~~~~~~~~~~
../../handy.h:2023:28: note: in expansion of macro '_generic_LC_underscore'
 2023 | #  define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
      |                            ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:19: note: in expansion of macro 'isWORDCHAR_LC'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                   ^~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2349:25: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2349 |                 ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1)))           \
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2355:13: note: in expansion of macro '_generic_LC_utf8_safe'
 2355 |             _generic_LC_utf8_safe(macro, p, e,                              \
      |             ^~~~~~~~~~~~~~~~~~~~~
../../handy.h:2401:13: note: in expansion of macro '_generic_LC_invlist_utf8_safe'
 2401 |             _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7108:23: note: in expansion of macro 'isWORDCHAR_LC_utf8_safe'
 7108 |                     : isWORDCHAR_LC_utf8_safe((U8*) locinput,
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7188:34: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 7188 |                             b1 = isWORDCHAR_utf8_safe(p, (U8*) reginfo->strend);
      |                                  ^~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7188:34: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 7188 |                             b1 = isWORDCHAR_utf8_safe(p, (U8*) reginfo->strend);
      |                                  ^~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7192:31: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 7192 |                             : isWORDCHAR_utf8_safe((U8*)locinput,
      |                               ^~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7192:31: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 7192 |                             : isWORDCHAR_utf8_safe((U8*)locinput,
      |                               ^~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:633:44: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  633 |                                         && UTF8_IS_DOWNGRADEABLE_START(*(s))  \
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7533:19: note: in expansion of macro 'UTF8_IS_NEXT_CHAR_DOWNGRADEABLE'
 7533 |             if (! UTF8_IS_NEXT_CHAR_DOWNGRADEABLE(locinput, reginfo->strend)) {
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
re_exec.c:7542:42: note: in expansion of macro 'isFOO_lc'
 7542 |             if (! (to_complement ^ cBOOL(isFOO_lc(FLAGS(scan),
      |                                          ^~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7543:45: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 7543 |                                             EIGHT_BIT_UTF8_TO_NATIVE(nextbyte,
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:633:44: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  633 |                                         && UTF8_IS_DOWNGRADEABLE_START(*(s))  \
      |                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7620:22: note: in expansion of macro 'UTF8_IS_NEXT_CHAR_DOWNGRADEABLE'
 7620 |             else if (UTF8_IS_NEXT_CHAR_DOWNGRADEABLE(locinput, reginfo->strend)) {
      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
re_exec.c:7622:32: note: in expansion of macro '_generic_isCC'
 7622 |                        ^ cBOOL(_generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(nextbyte,
      |                                ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7622:46: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 7622 |                        ^ cBOOL(_generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(nextbyte,
      |                                              ^~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:1222:41: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1222 | #define reg_check_named_buff_matched    S_reg_check_named_buff_matched
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:1222:41: note: in definition of macro 'reg_check_named_buff_matched'
 1222 | #define reg_check_named_buff_matched    S_reg_check_named_buff_matched
      |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:7841:57: warning: conversion to 'UV' {aka 'long unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7841 |                 if (! foldEQ_utf8_flags(s, NULL, endref - ln, utf8_target,
      |                                                  ~~~~~~~^~~~
../../embed.h:183:82: note: in definition of macro 'foldEQ_utf8_flags'
  183 | #define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i)    Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)
      |                                                                                  ^
re_exec.c:7863:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7863 |                            ? memNE(s, locinput, ln)
      |                                                 ^~
../../handy.h:686:78: note: in definition of macro 'memEQ'
  686 | #define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
      |                                                                              ^
re_exec.c:7863:30: note: in expansion of macro 'memNE'
 7863 |                            ? memNE(s, locinput, ln)
      |                              ^~~~~
../../mg.h:82:30: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
   82 |            (mg)->mg_flags &= ~MGf_BYTES))
      |                              ^
re_exec.c:8089:21: note: in expansion of macro 'MgBYTEPOS_set'
 8089 |                     MgBYTEPOS_set(reginfo->info_aux_eval->pos_magic,
      |                     ^~~~~~~~~~~~~
../../regcomp.h:368:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  368 | #define ARG2L_LOC(p)    (((struct regnode_2L *)p)->arg2)
      |                                                  ^
../../regcomp.h:263:25: note: in definition of macro 'ARG_VALUE'
  263 | #define ARG_VALUE(arg) (arg)
      |                         ^~~
../../regcomp.h:274:28: note: in expansion of macro 'ARG2L_LOC'
  274 | #define ARG2L(p) ARG_VALUE(ARG2L_LOC(p))
      |                            ^~~~~~~~~
re_exec.c:8202:37: note: in expansion of macro 'ARG2L'
 8202 |                                     ARG2L(scan),
      |                                     ^~~~~
re_exec.c:8563:30: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 8563 |                 parenfloor = rex->lastparen; /* Pessimization... */
      |                              ^~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_exec.c:8694:29: note: in expansion of macro 'Renew'
 8694 |                             Renew(aux->poscache, size, char);
      |                             ^~~~~
re_exec.c:8695:54: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8695 |                             reginfo->poscache_size = size;
      |                                                      ^~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_exec.c:8697:25: note: in expansion of macro 'Zero'
 8697 |                         Zero(aux->poscache, size, char);
      |                         ^~~~
re_exec.c:8700:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8700 |                         reginfo->poscache_size = size;
      |                                                  ^~~~
../../handy.h:2763:85: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2763 | #define Newxz(v,n,t)    (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))
      |                                                                                     ^~~
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_exec.c:8701:25: note: in expansion of macro 'Newxz'
 8701 |                         Newxz(aux->poscache, size, char);
      |                         ^~~~~
re_exec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8766:13: note: in expansion of macro 'CACHEsayNO'
 8766 |             CACHEsayNO;
      |             ^~~~~~~~~~
re_exec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8776:13: note: in expansion of macro 'CACHEsayNO'
 8776 |             CACHEsayNO;
      |             ^~~~~~~~~~
re_exec.c:8597:12: warning: conversion from 'I32' {aka 'int'} to 'char' may change value [-Wconversion]
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8597:12: note: in definition of macro 'ST'
 8597 | #define ST st->u.whilem
      |            ^~
re_exec.c:8820:17: note: in expansion of macro 'CACHEsayNO'
 8820 |                 CACHEsayNO;
      |                 ^~~~~~~~~~
In file included from ../../perl.h:4161:
../../util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
re_exec.c:9278:36: note: in expansion of macro 'ninstr'
 9278 |                         locinput = ninstr(locinput, loceol,
      |                                    ^~~~~~
../../util.h:250:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  250 |             ((char *) memmem((big), (bigend) - (big),                       \
      |                                     ~~~~~~~~~^~~~~~~
re_exec.c:9291:40: note: in expansion of macro 'ninstr'
 9291 |                             locinput = ninstr(locinput, loceol,
      |                                        ^~~~~~
re_exec.c:9331:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
 9331 |                 n = (utf8_target)
      |                     ^
re_exec.c:9478:24: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 9478 |             ST.count = scan->next_off + 1; /* next_off repurposed to be
      |                        ^~~~
re_exec.c:9834:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9834 |         state_num = st->resume_state + no_final;
      |                     ^~
re_exec.c:9891:21: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9891 |         state_num = st->resume_state + 1; /* failure = success + 1 */
      |                     ^~
re_exec.c: In function 'S_regrepeat':
re_exec.c:10004:53: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10004 |         scan = (char *) memchr(scan, '\n', this_eol - scan);
      |                                            ~~~~~~~~~^~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2292:5: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2292 |     _generic_non_invlist_utf8_safe(_CC_SPACE, is_XPERLSPACE_high, p, e)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10479:44: note: in expansion of macro 'isSPACE_utf8_safe'
10479 |                                    ^ cBOOL(isSPACE_utf8_safe(scan, this_eol))))
      |                                            ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2292:5: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2292 |     _generic_non_invlist_utf8_safe(_CC_SPACE, is_XPERLSPACE_high, p, e)
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10479:44: note: in expansion of macro 'isSPACE_utf8_safe'
10479 |                                    ^ cBOOL(isSPACE_utf8_safe(scan, this_eol))))
      |                                            ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2259:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2259 |         _generic_non_invlist_utf8_safe(_CC_BLANK, is_HORIZWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10489:41: note: in expansion of macro 'isBLANK_utf8_safe'
10489 |                                 ^ cBOOL(isBLANK_utf8_safe(scan, this_eol))))
      |                                         ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2259:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2259 |         _generic_non_invlist_utf8_safe(_CC_BLANK, is_HORIZWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10489:41: note: in expansion of macro 'isBLANK_utf8_safe'
10489 |                                 ^ cBOOL(isBLANK_utf8_safe(scan, this_eol))))
      |                                         ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2227:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2227 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p)))                             \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2299:20: note: in expansion of macro '_generic_utf8_safe_no_upper_latin1'
 2299 |                    _generic_utf8_safe_no_upper_latin1(_CC_XDIGIT, p, e,     \
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10499:40: note: in expansion of macro 'isXDIGIT_utf8_safe'
10499 |                                ^ cBOOL(isXDIGIT_utf8_safe(scan, this_eol))))
      |                                        ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2295:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2295 |         _generic_non_invlist_utf8_safe(_CC_VERTSPACE, is_VERTWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10509:40: note: in expansion of macro 'isVERTWS_utf8_safe'
10509 |                                ^ cBOOL(isVERTWS_utf8_safe(scan, this_eol))))
      |                                        ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2209:11: note: in expansion of macro '_generic_utf8_safe'
 2209 |           _generic_utf8_safe(classnum, p, e,                                \
      |           ^~~~~~~~~~~~~~~~~~
../../handy.h:2295:9: note: in expansion of macro '_generic_non_invlist_utf8_safe'
 2295 |         _generic_non_invlist_utf8_safe(_CC_VERTSPACE, is_VERTWS_high, p, e)
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
re_exec.c:10509:40: note: in expansion of macro 'isVERTWS_utf8_safe'
10509 |                                ^ cBOOL(isVERTWS_utf8_safe(scan, this_eol))))
      |                                        ^~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2267:37: note: in expansion of macro '_generic_utf8_safe'
 2267 | #   define isCNTRL_utf8_safe(p, e)  _generic_utf8_safe(_CC_CNTRL, p, e, 0)
      |                                     ^~~~~~~~~~~~~~~~~~
re_exec.c:10519:40: note: in expansion of macro 'isCNTRL_utf8_safe'
10519 |                                ^ cBOOL(isCNTRL_utf8_safe(scan, this_eol))))
      |                                        ^~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:1590:39: note: in expansion of macro 'cBOOL'
 1590 | #   define _generic_isCC(c, classnum) cBOOL(FITS_IN_8_BITS(c)    \
      |                                       ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2267:37: note: in expansion of macro '_generic_utf8_safe'
 2267 | #   define isCNTRL_utf8_safe(p, e)  _generic_utf8_safe(_CC_CNTRL, p, e, 0)
      |                                     ^~~~~~~~~~~~~~~~~~
re_exec.c:10519:40: note: in expansion of macro 'isCNTRL_utf8_safe'
10519 |                                ^ cBOOL(isCNTRL_utf8_safe(scan, this_eol))))
      |                                        ^~~~~~~~~~~~~~~~~
re_exec.c: In function 'S_reginclass':
re_exec.c:10609:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
10609 |         c = utf8n_to_uvchr(p, p_end - p, &c_len, utf8n_flags | UTF8_CHECK_ONLY);
      |                               ~~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_exec.c:10609:13: note: in expansion of macro 'utf8n_to_uvchr'
10609 |         c = utf8n_to_uvchr(p, p_end - p, &c_len, utf8n_flags | UTF8_CHECK_ONLY);
      |             ^~~~~~~~~~~~~~
../../embed.h:309:33: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  309 | #define lsbit_pos32             Perl_lsbit_pos32
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:309:33: note: in definition of macro 'lsbit_pos32'
  309 | #define lsbit_pos32             Perl_lsbit_pos32
      |                                 ^~~~~~~~~~~~~~~~
re_exec.c: In function 'S_setup_eval_state':
re_exec.c:10969:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10969 |         eval_state->sublen     = rex->sublen;
      |                                  ^~~
re_exec.c:10970:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10970 |         eval_state->suboffset  = rex->suboffset;
      |                                  ^~~
re_exec.c:10971:34: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
10971 |         eval_state->subcoffset = rex->subcoffset;
      |                                  ^~~
re_exec.c: In function 'S_cleanup_regmatch_info_aux':
re_exec.c:11004:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11004 |             rex->sublen     = eval_state->sublen;
      |                               ^~~~~~~~~~
re_exec.c:11005:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11005 |             rex->suboffset  = eval_state->suboffset;
      |                               ^~~~~~~~~~
re_exec.c:11006:31: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
11006 |             rex->subcoffset = eval_state->subcoffset;
      |                               ^~~~~~~~~~
re_exec.c:11016:18: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-65' [-Wsign-conversion]
11016 |                  (eval_state->pos_magic->mg_flags & ~MGf_BYTES)
      |                  ^
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f re_comp.c
cp ../../regcomp.c re_comp.c
rm -f dquote.c
cp ../../dquote.c dquote.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.43\" -DXS_VERSION=\"0.43\" -fPIC -Wno-unused-function "-I../.."  -DPERL_EXT_RE_BUILD -DPERL_EXT_RE_DEBUG -DPERL_EXT re_comp.c
In file included from ../../perl.h:7246,
                 from re_comp.c:132:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
In file included from ../../perl.h:3859:
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1408:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1408 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:1992:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1992 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR_flags':
../../inline.h:2261:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2261 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_is_utf8_valid_partial_char_flags':
../../inline.h:2347:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2347 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
re_comp.c: In function 'S_debug_studydata':
re_comp.c:1363:44: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1363 |         S_debug_show_study_flags(aTHX_ data->flags," [","]");
      |                                        ~~~~^~~~~~~
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:1351:5: note: in expansion of macro 'DEBUG_OPTIMISE_MORE_r'
 1351 |     DEBUG_OPTIMISE_MORE_r({
      |     ^~~~~~~~~~~~~~~~~~~~~
re_comp.c:1391:64: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1391 |                 S_debug_show_study_flags(aTHX_ data->substrs[i].flags," [","]");
      |                                                ~~~~~~~~~~~~~~~~^~~~~~
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:1351:5: note: in expansion of macro 'DEBUG_OPTIMISE_MORE_r'
 1351 |     DEBUG_OPTIMISE_MORE_r({
      |     ^~~~~~~~~~~~~~~~~~~~~
re_comp.c: In function 'S_edit_distance':
re_comp.c:1571:20: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 1571 |         IV score = scores[(x+1) * (y + 2) + (y + 1)];
      |                    ^~~~~~
In file included from re_comp.h:6,
                 from re_comp.c:136:
re_comp.c: In function 'S_ssc_and':
re_comp.c:2054:47: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2054 |                     ANYOF_POSIXL_SET(&temp, i + add);
      |                                               ^
../../regcomp.h:677:53: note: in definition of macro 'POSIXL_SET'
  677 | #define POSIXL_SET(field, c)    ((field) |= (1U << (c)))
      |                                                     ^
re_comp.c:2054:21: note: in expansion of macro 'ANYOF_POSIXL_SET'
 2054 |                     ANYOF_POSIXL_SET(&temp, i + add);
      |                     ^~~~~~~~~~~~~~~~
re_comp.c: In function 'S_ssc_clear_locale':
re_comp.c:2245:25: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-7' [-Wsign-conversion]
 2245 |     ANYOF_FLAGS(ssc) &= ~ANYOF_LOCALE_FLAGS;
      |                         ^
In file included from ../../perl.h:5841:
re_comp.c: In function 'S_dump_trie':
re_comp.c:2390:49: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2390 |         SV ** const tmp = av_fetch( revcharmap, state, 0);
      |                                                 ^~~~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
re_comp.c:2394:68: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2394 |                 pv_pretty(sv, SvPV_nolen_const(*tmp), SvCUR(*tmp), colwidth,
      |                                                                    ^~~~~~~~
../../embed.h:477:68: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                    ^
re_comp.c: In function 'S_dump_trie_interim_list':
re_comp.c:2505:31: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2505 |                               colwidth,
      |                               ^~~~~~~~
../../embed.h:477:68: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                    ^
re_comp.c: In function 'S_dump_trie_interim_table':
re_comp.c:2553:68: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2553 |                 pv_pretty(sv, SvPV_nolen_const(*tmp), SvCUR(*tmp), colwidth,
      |                                                                    ^~~~~~~~
../../embed.h:477:68: note: in definition of macro 'pv_pretty'
  477 | #define pv_pretty(a,b,c,d,e,f,g)        Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
      |                                                                    ^
re_comp.c: In function 'S_make_trie':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
re_comp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
re_comp.c:3078:25: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3078 |                         TRIE_STORE_REVCHAR( folded );
      |                         ^~~~~~~~~~~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
re_comp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
re_comp.c:3083:21: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3083 |                     TRIE_STORE_REVCHAR( uvc );
      |                     ^~~~~~~~~~~~~~~~~~
../../regcomp.h:673:33: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  673 | #define ANYOF_BIT(c)            (1U << ((c) & 7))
      |                                 ^
../../regcomp.h:950:61: note: in expansion of macro 'ANYOF_BIT'
  950 | #define TRIE_BITMAP_SET(p, c)   (TRIE_BITMAP_BYTE(p, c) |=  ANYOF_BIT((U8)c))
      |                                                             ^~~~~~~~~
re_comp.c:2839:13: note: in expansion of macro 'TRIE_BITMAP_SET'
 2839 |             TRIE_BITMAP_SET(trie, UTF8_TWO_BYTE_HI(uvc));   \
      |             ^~~~~~~~~~~~~~~
re_comp.c:3088:21: note: in expansion of macro 'TRIE_BITMAP_SET_FOLDED'
 3088 |                     TRIE_BITMAP_SET_FOLDED(trie, uvc, folder);
      |                     ^~~~~~~~~~~~~~~~~~~~~~
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
re_comp.c:2722:13: note: in expansion of macro 'SvCUR_set'
 2722 |             SvCUR_set(zlopp, kapow - flrbbbbb);                            \
      |             ^~~~~~~~~
re_comp.c:3111:21: note: in expansion of macro 'TRIE_STORE_REVCHAR'
 3111 |                     TRIE_STORE_REVCHAR(uvc);
      |                     ^~~~~~~~~~~~~~~~~~
re_comp.c:3355:28: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3355 |                         tp += ( maxid - minid + 1 );
      |                            ^~
re_comp.c:3684:57: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3684 |                             tmp = av_fetch( revcharmap, ofs, 0);
      |                                                         ^~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
../../regcomp.h:673:33: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  673 | #define ANYOF_BIT(c)            (1U << ((c) & 7))
      |                                 ^
../../regcomp.h:950:61: note: in expansion of macro 'ANYOF_BIT'
  950 | #define TRIE_BITMAP_SET(p, c)   (TRIE_BITMAP_BYTE(p, c) |=  ANYOF_BIT((U8)c))
      |                                                             ^~~~~~~~~
re_comp.c:2839:13: note: in expansion of macro 'TRIE_BITMAP_SET'
 2839 |             TRIE_BITMAP_SET(trie, UTF8_TWO_BYTE_HI(uvc));   \
      |             ^~~~~~~~~~~~~~~
re_comp.c:3701:37: note: in expansion of macro 'TRIE_BITMAP_SET_FOLDED'
 3701 |                                     TRIE_BITMAP_SET_FOLDED(trie,*ch, folder);
      |                                     ^~~~~~~~~~~~~~~~~~~~~~
../../regcomp.h:673:33: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  673 | #define ANYOF_BIT(c)            (1U << ((c) & 7))
      |                                 ^
../../regcomp.h:950:61: note: in expansion of macro 'ANYOF_BIT'
  950 | #define TRIE_BITMAP_SET(p, c)   (TRIE_BITMAP_BYTE(p, c) |=  ANYOF_BIT((U8)c))
      |                                                             ^~~~~~~~~
re_comp.c:2839:13: note: in expansion of macro 'TRIE_BITMAP_SET'
 2839 |             TRIE_BITMAP_SET(trie, UTF8_TWO_BYTE_HI(uvc));   \
      |             ^~~~~~~~~~~~~~~
re_comp.c:3708:29: note: in expansion of macro 'TRIE_BITMAP_SET_FOLDED'
 3708 |                             TRIE_BITMAP_SET_FOLDED(trie,*ch, folder);
      |                             ^~~~~~~~~~~~~~~~~~~~~~
re_comp.c:3711:37: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3711 |                         first_ofs = ofs;
      |                                     ^~~
re_comp.c:3771:64: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 3771 |                        SV ** const tmp = av_fetch( trie_words, word, 0 );
      |                                                                ^~~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
re_comp.c: In function 'S_join_exact':
../../embed.h:759:33: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
re_comp.c:4485:27: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4485 |             *min_subtract += total_count_delta;
      |                           ^~
re_comp.c:4548:31: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 4548 |                 *min_subtract += len - 1;
      |                               ^~
re_comp.c: In function 'S_rck_elide_nothing':
re_comp.c:4606:19: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 4606 |         int off = (reg_off_by_arg[OP(node)] ? ARG(node) : NEXT_OFF(node));
      |                   ^
../../regcomp.h:263:24: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
../../regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
re_comp.c:4615:51: note: in expansion of macro 'ARG'
 4615 |                 || ((OP(n) == LONGJMP) && (noff = ARG(n)))
      |                                                   ^~~
re_comp.c:4622:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 4622 |             ARG(node) = off;
      |                         ^~~
re_comp.c:4624:30: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 4624 |             NEXT_OFF(node) = off;
      |                              ^~~
re_comp.c: In function 'S_study_chunk':
../../regcomp.h:304:25: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  304 | #define OP(p)           ((p)->type)
      |                         ^
re_comp.c:4668:18: note: in expansion of macro 'OP'
 4668 |     I32 is_par = OP(scan) == OPEN ? ARG(scan) : 0; /* is this op an OPEN? */
      |                  ^~
re_comp.c:4874:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 4874 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
re_comp.c:4908:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 4908 |                         flags &= ~SCF_DO_STCLASS;
      |                               ^~
re_comp.c:4914:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 4914 |                         flags &= ~SCF_DO_STCLASS;
      |                               ^~
re_comp.c:4921:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 4921 |                         flags &= ~SCF_DO_STCLASS_AND;
      |                               ^~
re_comp.c:5235:51: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 5235 |                                         RExC_seen &=~REG_TOP_LEVEL_BRANCHES_SEEN;
      |                                                   ^~
re_comp.c:5258:60: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 5258 |                                     NEXT_OFF(startbranch)= tail - startbranch;
      |                                                            ^~~~
../../regcomp.h:263:24: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
../../regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
re_comp.c:5284:25: note: in expansion of macro 'ARG'
 5284 |                 paren = ARG(scan);
      |                         ^~~
re_comp.c:5357:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5357 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
../../regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
re_comp.c:5407:31: note: in expansion of macro 'STR_LEN'
 5407 |             SSize_t bytelen = STR_LEN(scan), charlen;
      |                               ^~~~~~~
../../embed.h:759:33: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
../../embed.h:759:33: note: in definition of macro 'utf8_length'
  759 | #define utf8_length(a,b)        Perl_utf8_length(aTHX_ a,b)
      |                                 ^~~~~~~~~~~~~~~~
re_comp.c:5429:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5429 |                 sv_catpvn(data->last_found, STRING(scan), bytelen);
      |                                                           ^~~~~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
re_comp.c:5429:17: note: in expansion of macro 'sv_catpvn'
 5429 |                 sv_catpvn(data->last_found, STRING(scan), bytelen);
      |                 ^~~~~~~~~
re_comp.c:5448:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5448 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
re_comp.c:5456:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5456 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
re_comp.c:5458:19: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5458 |             flags &= ~SCF_DO_STCLASS;
      |                   ^~
../../regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
re_comp.c:5463:31: note: in expansion of macro 'STR_LEN'
 5463 |             SSize_t bytelen = STR_LEN(scan), charlen;
      |                               ^~~~~~~
re_comp.c:5477:27: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes value from '-33' to '223' [-Wsign-conversion]
 5477 |                 U8 mask = ~ ('A' ^ 'a'); /* These differ in just one bit */
      |                           ^
re_comp.c:5497:28: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                            ^
re_comp.c:5497:17: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                 ^~
re_comp.c:5497:20: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5497 |             min += charlen - min_subtract;
      |                    ^~~~~~~
re_comp.c:5502:23: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5502 |                 delta += min_subtract;
      |                       ^~
re_comp.c:5502:26: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5502 |                 delta += min_subtract;
      |                          ^~~~~~~~~~~~
re_comp.c:5507:42: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                                          ^
re_comp.c:5507:31: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                               ^~
re_comp.c:5507:34: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5507 |                 data->pos_min += charlen - min_subtract;
      |                                  ^~~~~~~
re_comp.c:5514:37: warning: conversion to 'long unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5514 |                     data->pos_delta += min_subtract;
      |                                     ^~
re_comp.c:5514:40: warning: conversion to 'ssize_t' {aka 'int'} from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
 5514 |                     data->pos_delta += min_subtract;
      |                                        ^~~~~~~~~~~~
re_comp.c:5530:55: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5530 |                     ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                       ^
re_comp.c:5539:55: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 5539 |                     ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                       ^
re_comp.c:5541:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5541 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:5597:31: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes value from '-33' to '223' [-Wsign-conversion]
 5597 |                     U8 mask = ~ ('A' ^ 'a');
      |                               ^
re_comp.c:5661:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-4097' to '4294963199' [-Wsign-conversion]
 5661 |                     f &= ~SCF_DO_STCLASS_OR;
      |                       ^~
re_comp.c:5673:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-8193' to '4294959103' [-Wsign-conversion]
 5673 |                     f &= ~SCF_WHILEM_VISITED_POS;
      |                       ^~
re_comp.c:5680:41: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 5680 |                                    ? (f & ~SCF_DO_SUBSTR)
      |                                         ^
../../embed.h:1136:87: note: in definition of macro 'study_chunk'
 1136 | #define study_chunk(a,b,c,d,e,f,g,h,i,j,k,l)    S_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
      |                                                                                       ^
re_comp.c:5700:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 5700 |                         flags &= ~SCF_DO_STCLASS_AND;
      |                               ^~
re_comp.c:5713:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 5713 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
re_comp.c:5725:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5725 |                     _WARN_HELPER(RExC_precomp_end, packWARN(WARN_REGEXP),
      |                     ^~~~~~~~~~~~
re_comp.c:5753:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 5753 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
re_comp.c:5918:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5918 |                         l -= old;
      |                           ^~
re_comp.c:5927:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                                            ^
../../sv.h:2401:38: note: in definition of macro 'SvGROW'
 2401 |         (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
      |                                      ^~~
re_comp.c:5927:60: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                                            ^
../../embed.h:622:54: note: in definition of macro 'sv_grow'
  622 | #define sv_grow(a,b)            Perl_sv_grow(aTHX_ a,b)
      |                                                      ^
re_comp.c:5927:33: note: in expansion of macro 'SvGROW'
 5927 |                                 SvGROW(last_str, (mincount * l) + 1);
      |                                 ^~~~~~
re_comp.c:5929:66: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5929 |                                           SvPVX_const(last_str), l,
      |                                                                  ^
re_comp.c:5931:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5931 |                                 SvCUR_set(last_str, SvCUR(last_str) * mincount);
      |                                                                     ^
../../sv.h:1401:50: note: in definition of macro 'SvCUR_set'
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                  ^~~
re_comp.c:5942:65: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                                 ^
re_comp.c:5942:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                    ^~
re_comp.c:5942:55: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5942 |                                         mg->mg_len += last_chrs * (mincount-1);
      |                                                       ^~~~~~~~~
re_comp.c:5944:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5944 |                                 last_chrs *= mincount;
      |                                           ^~
re_comp.c:5945:53: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                     ^
re_comp.c:5945:48: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                ^~
re_comp.c:5945:51: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5945 |                                 data->last_end += l * (mincount - 1);
      |                                                   ^
re_comp.c:5991:66: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5991 |                             data->last_start_min = data->pos_min - last_chrs;
      |                                                                  ^
re_comp.c:5991:52: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5991 |                             data->last_start_min = data->pos_min - last_chrs;
      |                                                    ^~~~
re_comp.c:5994:67: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 5994 |                                 : data->pos_min + data->pos_delta - last_chrs;
      |                                                                   ^
re_comp.c:5992:52: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 5992 |                             data->last_start_max = is_inf
      |                                                    ^~~~~~
re_comp.c:6027:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6027 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:6038:52: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6038 |                                                 &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                    ^
re_comp.c:6049:52: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6049 |                                                 &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                    ^
re_comp.c:6051:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6051 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:6079:51: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-2' [-Wsign-conversion]
 6079 |                 ANYOF_FLAGS(data->start_class) &= ~SSC_MATCHES_EMPTY_STRING;
      |                                                   ^
re_comp.c:639:43: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  639 | #define classnum_to_namedclass(classnum)  ((classnum) * 2)
      |                                           ^
re_comp.c:6178:34: note: in expansion of macro 'classnum_to_namedclass'
 6178 |                     namedclass = classnum_to_namedclass(FLAGS(scan)) + invert;
      |                                  ^~~~~~~~~~~~~~~~~~~~~~
re_comp.c:6253:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6253 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:6335:42: warning: conversion from 'ssize_t' {aka 'int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 6335 |                         scan->next_off = deltanext;
      |                                          ^~~~~~~~~
re_comp.c:6344:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6344 |                             ckWARNexperimental_with_arg(RExC_parse,
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:6350:35: warning: conversion from 'ssize_t' {aka 'int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 6350 |                     scan->flags = (U8)minnext + deltanext;
      |                                   ^
../../regcomp.h:263:24: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  263 | #define ARG_VALUE(arg) (arg)
      |                        ^
../../regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
re_comp.c:6506:40: note: in expansion of macro 'ARG'
 6506 |                 *(data->last_closep) = ARG(scan);
      |                                        ^~~
re_comp.c:6517:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6517 |                 flags &= ~SCF_DO_SUBSTR;
      |                       ^~
re_comp.c:6521:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6521 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:6535:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6535 |                 flags &= ~SCF_DO_SUBSTR;
      |                       ^~
re_comp.c:6547:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6547 |                 flags &= ~SCF_DO_STCLASS;
      |                       ^~
re_comp.c:6556:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6556 |                     RExC_rx->gofs = min;
      |                                     ^~~
re_comp.c:6582:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6582 |                 min1= trie->minlen;
      |                       ^~~~
re_comp.c:6583:23: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6583 |                 max1= trie->maxlen;
      |                       ^~~~
re_comp.c:6631:50: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6631 |                     if (min1 > (SSize_t)(minnext + trie->minlen))
      |                                                  ^
re_comp.c:6632:40: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6632 |                         min1 = minnext + trie->minlen;
      |                                        ^
re_comp.c:6632:32: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6632 |                         min1 = minnext + trie->minlen;
      |                                ^~~~~~~
re_comp.c:6636:69: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6636 |                     } else if (max1 < (SSize_t)(minnext + deltanext + trie->maxlen))
      |                                                                     ^
re_comp.c:6637:52: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6637 |                         max1 = minnext + deltanext + trie->maxlen;
      |                                                    ^
re_comp.c:6637:32: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 6637 |                         max1 = minnext + deltanext + trie->maxlen;
      |                                ^~~~~~~
re_comp.c:6644:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-1025' to '4294966271' [-Wsign-conversion]
 6644 |                         flags &= ~SCF_DO_SUBSTR;
      |                               ^~
re_comp.c:6675:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6675 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
re_comp.c:6681:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-6145' to '4294961151' [-Wsign-conversion]
 6681 |                     flags &= ~SCF_DO_STCLASS;
      |                           ^~
re_comp.c:6688:27: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2049' to '4294965247' [-Wsign-conversion]
 6688 |                     flags &= ~SCF_DO_STCLASS_AND;
      |                           ^~
In file included from ../../perl.h:3003:
re_comp.c: In function 'S_alloc_code_blocks':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:7011:9: note: in expansion of macro 'Newx'
 7011 |         Newx(cbs->cb, ncode, struct reg_code_block);
      |         ^~~~
re_comp.c: In function 'S_pat_upgrade_to_utf8':
re_comp.c:7049:57: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7049 |                 pRExC_state->code_blocks->cb[n].start = d - dst - 1;
      |                                                         ^
re_comp.c:7054:55: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7054 |                 pRExC_state->code_blocks->cb[n].end = d - dst - 1;
      |                                                       ^
re_comp.c:7063:15: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7063 |     *plen_p = d - dst;
      |               ^
re_comp.c: In function 'S_concat_pat':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:7139:17: note: in expansion of macro 'Newx'
 7139 |                 Newx(array, maxarg, SV*);
      |                 ^~~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:7277:21: note: in expansion of macro 'Renew'
 7277 |                     Renew(pRExC_state->code_blocks->cb,
      |                     ^~~~~
re_comp.c: In function 'S_compile_runtime_code':
re_comp.c:7390:22: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7390 |         int newlen = plen + 7; /* allow for "qr''xx\0" extra chars */
      |                      ^~~~
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:7400:9: note: in expansion of macro 'Newx'
 7400 |         Newx(newpat, newlen, char);
      |         ^~~~
re_comp.c:7451:45: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 7451 |         sv = newSVpvn_flags(newpat, p-newpat-1, RExC_utf8 ? SVf_UTF8 : 0);
      |                                     ~~~~~~~~^~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:7516:9: note: in expansion of macro 'Newx'
 7516 |         Newx(new_block, r1c + r2c, struct reg_code_block);
      |         ^~~~
re_comp.c: In function 'S_setup_longest':
re_comp.c:7603:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7603 |         - longest_length
      |         ^
re_comp.c:7608:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 7608 |         + sub->lookbehind;
      |         ^
re_comp.c:7602:22: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 7602 |     rsd->end_shift = ml - sub->min_offset
      |                      ^~
re_comp.c: In function 'S_set_regex_pv':
re_comp.c:285:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  285 | #define RExC_precomp_end (pRExC_state->precomp_end)
      |                          ^
re_comp.c:7638:22: note: in expansion of macro 'RExC_precomp_end'
 7638 |     STRLEN pat_len = RExC_precomp_end - RExC_precomp;
      |                      ^~~~~~~~~~~~~~~~
re_comp.c:7693:27: warning: conversion from 'int' to 'unsigned char:4' may change value [-Wconversion]
 7693 |     RExC_rx->pre_prefix = p - RX_WRAPPED(Rx);
      |                           ^
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
re_comp.c:7703:5: note: in expansion of macro 'SvCUR_set'
 7703 |     SvCUR_set(Rx, p - RX_WRAPPED(Rx));
      |     ^~~~~~~~~
re_comp.c: In function 'my_re_op_compile':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:7842:9: note: in expansion of macro 'Newx'
 7842 |         Newx(new_patternp, n, SV*);
      |         ^~~~
re_comp.c:7966:9: warning: the comparison will always evaluate as 'true' for the pointer operand in '*__builtin_memcpy(&<U15a0>, &({...})) + (sizetype)Perl_ReANY((const REGEXP *)old_re)->pre_prefix' must not be NULL [-Waddress]
 7966 |         && RX_PRECOMP(old_re)
      |         ^~
../../regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
re_comp.c:8065:21: note: in expansion of macro 'STR_SZ'
 8065 |         RExC_size = STR_SZ(RExC_end - RExC_start);
      |                     ^~~~~~
../../regcomp.h:340:25: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
re_comp.c:8065:21: note: in expansion of macro 'STR_SZ'
 8065 |         RExC_size = STR_SZ(RExC_end - RExC_start);
      |                     ^~~~~~
re_comp.c:8068:45: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8068 |     Newxc(RExC_rxi, sizeof(regexp_internal) + RExC_size, char, regexp_internal);
      |                                             ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:8068:5: note: in expansion of macro 'Newxc'
 8068 |     Newxc(RExC_rxi, sizeof(regexp_internal) + RExC_size, char, regexp_internal);
      |     ^~~~~
re_comp.c:8072:44: warning: conversion to 'unsigned int' from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8072 |     Zero(RExC_rxi, sizeof(regexp_internal) + RExC_size, char);
      |                                            ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:8072:5: note: in expansion of macro 'Zero'
 8072 |     Zero(RExC_rxi, sizeof(regexp_internal) + RExC_size, char);
      |     ^~~~
re_comp.c:8083:30: warning: conversion from 'U32' {aka 'unsigned int'} to 'short unsigned int:9' may change value [-Wconversion]
 8083 |     RXp_COMPFLAGS(RExC_rx) = orig_rx_flags & RXf_PMf_FLAGCOPYMASK;
      |                              ^~~~~~~~~~~~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:8164:13: note: in expansion of macro 'Renew'
 8164 |             Renew(RExC_open_parens, RExC_total_parens, regnode_offset);
      |             ^~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:8165:13: note: in expansion of macro 'Zero'
 8165 |             Zero(RExC_open_parens, RExC_total_parens, regnode_offset);
      |             ^~~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:8168:13: note: in expansion of macro 'Renew'
 8168 |             Renew(RExC_close_parens, RExC_total_parens, regnode_offset);
      |             ^~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:8169:13: note: in expansion of macro 'Zero'
 8169 |             Zero(RExC_close_parens, RExC_total_parens, regnode_offset);
      |             ^~~~
re_comp.c:304:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  304 | #define RExC_total_parens       (pRExC_state->total_par)
      |                                 ^
re_comp.c:8197:24: note: in expansion of macro 'RExC_total_parens'
 8197 |     RExC_rx->nparens = RExC_total_parens - 1;
      |                        ^~~~~~~~~~~~~~~~~
re_comp.c:301:25: warning: conversion to 'U32' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  301 | #define RExC_size       (pRExC_state->size)
      |                         ^
re_comp.c:1240:40: note: in definition of macro 'SetProgLen'
 1240 | #define SetProgLen(ri,x) ri->proglen = x
      |                                        ^
re_comp.c:8210:25: note: in expansion of macro 'RExC_size'
 8210 |     SetProgLen(RExC_rxi,RExC_size);
      |                         ^~~~~~~~~
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:8230:9: note: in expansion of macro 'Newx'
 8230 |         Newx(RExC_recurse, RExC_recurse_count, regnode *);
      |         ^~~~
re_comp.c:8237:42: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8237 |         RExC_study_chunk_recursed_bytes= (RExC_total_parens >> 3) +
      |                                          ^
re_comp.c:8240:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8240 |              RExC_study_chunk_recursed_bytes * RExC_total_parens, U8);
      |                                              ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:8239:9: note: in expansion of macro 'Newx'
 8239 |         Newx(RExC_study_chunk_recursed,
      |         ^~~~
re_comp.c:8252:46: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 8252 |              RExC_study_chunk_recursed_bytes * RExC_total_parens, U8);
      |                                              ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:8251:9: note: in expansion of macro 'Zero'
 8251 |         Zero(RExC_study_chunk_recursed,
      |         ^~~~
re_comp.c:8269:23: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 8269 |             RExC_seen &= ~REG_TOP_LEVEL_BRANCHES_SEEN;
      |                       ^~
re_comp.c:8389:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8389 |             RExC_rx->intflags |= (type | PREGf_IMPLICIT);
      |                               ^~
re_comp.c:8454:27: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 8454 |                           | (restudied ? SCF_TRIE_DOING_RESTUDY : 0),
      |                           ^
../../embed.h:1136:87: note: in definition of macro 'study_chunk'
 1136 | #define study_chunk(a,b,c,d,e,f,g,h,i,j,k,l)    S_study_chunk(aTHX_ a,b,c,d,e,f,g,h,i,j,k,l)
      |                                                                                       ^
re_comp.c:8529:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 8529 |             RExC_rx->intflags &= ~PREGf_SKIP;   /* Used in find_byclass(). */
      |                               ^~
re_comp.c:8541:38: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
 8541 |         RExC_rx->substrs->check_ix = i;
      |                                      ^
re_comp.c:8613:31: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
 8613 |             RExC_rx->intflags &= ~PREGf_SKIP;   /* Used in find_byclass(). */
      |                               ^~
re_comp.c:304:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  304 | #define RExC_total_parens       (pRExC_state->total_par)
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:8741:5: note: in expansion of macro 'Newxz'
 8741 |     Newxz(RExC_rx->offs, RExC_total_parens, regexp_paren_pair);
      |     ^~~~~
re_comp.c:8741:26: note: in expansion of macro 'RExC_total_parens'
 8741 |     Newxz(RExC_rx->offs, RExC_total_parens, regexp_paren_pair);
      |                          ^~~~~~~~~~~~~~~~~
re_comp.c: In function 'my_reg_named_buff_firstkey':
re_comp.c:8892:58: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-65' to '4294967231' [-Wsign-conversion]
 8892 |         return CALLREG_NAMED_BUFF_NEXTKEY(r, NULL, flags & ~RXapif_FIRSTKEY);
      |                                                          ^
../../perl.h:280:61: note: in definition of macro 'CALLREG_NAMED_BUFF_NEXTKEY'
  280 |     RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), (lastkey), ((flags) | RXapif_NEXTKEY))
      |                                                             ^~~~~
re_comp.c: In function 'my_reg_named_buff_scalar':
../../hv.h:352:54: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  352 | #define HvTOTALKEYS(hv)         (((XPVHV*) SvANY(hv))->xhv_keys)
      |                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
../../embed.h:393:52: note: in definition of macro 'newSViv'
  393 | #define newSViv(a)              Perl_newSViv(aTHX_ a)
      |                                                    ^
re_comp.c:8943:28: note: in expansion of macro 'HvTOTALKEYS'
 8943 |             return newSViv(HvTOTALKEYS(RXp_PAREN_NAMES(rx)));
      |                            ^~~~~~~~~~~
../../embed.h:58:33: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
../../embed.h:58:33: note: in definition of macro 'av_count'
   58 | #define av_count(a)             Perl_av_count(aTHX_ a)
      |                                 ^~~~~~~~~~~~~
re_comp.c: In function 'my_reg_numbered_buff_fetch':
re_comp.c:9066:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9066 |         sv_setpvn(sv, s, i);
      |                          ^
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:957:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-536870913' to '3758096383' [-Wsign-conversion]
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
../../sv.h:957:46: note: in definition of macro 'SvUTF8_off'
  957 | #define SvUTF8_off(sv)          (SvFLAGS(sv) &= ~(SVf_UTF8))
      |                                              ^~
re_comp.c: In function 'my_reg_numbered_buff_length':
re_comp.c:9188:43: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 9188 |         if (is_utf8_string_loclen((U8*)s, i, &ep, &el))
      |                                           ^
re_comp.c:9189:17: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 9189 |             i = el;
      |                 ^~
re_comp.c: In function 'S_reg_scan_name':
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2207:21: note: in expansion of macro '_generic_utf8_safe'
 2207 |                     _generic_utf8_safe(classnum, p, e, above_latin1(p, e))
      |                     ^~~~~~~~~~~~~~~~~~
../../handy.h:2284:5: note: in expansion of macro '_generic_func_utf8_safe'
 2284 |     _generic_func_utf8_safe(_CC_IDFIRST,                                    \
      |     ^~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:835:24: note: in expansion of macro 'isIDFIRST_utf8_safe'
  835 |                      : isIDFIRST_utf8_safe(p, e))
      |                        ^~~~~~~~~~~~~~~~~~~
re_comp.c:9227:14: note: in expansion of macro 'isIDFIRST_lazy_if_safe'
 9227 |     else if (isIDFIRST_lazy_if_safe(RExC_parse, RExC_end, UTF)) {
      |              ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2207:21: note: in expansion of macro '_generic_utf8_safe'
 2207 |                     _generic_utf8_safe(classnum, p, e, above_latin1(p, e))
      |                     ^~~~~~~~~~~~~~~~~~
../../handy.h:2284:5: note: in expansion of macro '_generic_func_utf8_safe'
 2284 |     _generic_func_utf8_safe(_CC_IDFIRST,                                    \
      |     ^~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:835:24: note: in expansion of macro 'isIDFIRST_utf8_safe'
  835 |                      : isIDFIRST_utf8_safe(p, e))
      |                        ^~~~~~~~~~~~~~~~~~~
re_comp.c:9227:14: note: in expansion of macro 'isIDFIRST_lazy_if_safe'
 9227 |     else if (isIDFIRST_lazy_if_safe(RExC_parse, RExC_end, UTF)) {
      |              ^~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../handy.h:2197:14: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
 2197 |           : (UTF8_IS_DOWNGRADEABLE_START(*(p))                              \
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:9234:25: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 9234 |                      && isWORDCHAR_utf8_safe((U8*)RExC_parse, (U8*) RExC_end));
      |                         ^~~~~~~~~~~~~~~~~~~~
../../handy.h:1444:28: warning: conversion to 'long long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                            ^
../../handy.h:125:31: note: in definition of macro 'cBOOL'
  125 | #define cBOOL(cbool) ((bool) (cbool))
      |                               ^~~~~
../../handy.h:2199:19: note: in expansion of macro '_generic_isCC'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                   ^~~~~~~~~~~~~
../../utf8.h:649:7: note: in expansion of macro '__ASSERT_'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |       ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:559:17: note: in expansion of macro 'inRANGE_helper_'
  559 |                 inRANGE_helper_(U8, NATIVE_UTF8_TO_I8(c),                   \
      |                 ^~~~~~~~~~~~~~~
../../utf8.h:649:17: note: in expansion of macro 'UTF8_IS_DOWNGRADEABLE_START'
  649 |     ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI))                                \
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2199:33: note: in expansion of macro 'EIGHT_BIT_UTF8_TO_NATIVE'
 2199 |                 ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )),  \
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:2217:13: note: in expansion of macro '_generic_utf8_safe'
 2217 |             _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))
      |             ^~~~~~~~~~~~~~~~~~
../../handy.h:2297:30: note: in expansion of macro '_generic_invlist_utf8_safe'
 2297 |                              _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:9234:25: note: in expansion of macro 'isWORDCHAR_utf8_safe'
 9234 |                      && isWORDCHAR_utf8_safe((U8*)RExC_parse, (U8*) RExC_end));
      |                         ^~~~~~~~~~~~~~~~~~~~
re_comp.c:9244:42: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9244 |     sv_name = newSVpvn_flags(name_start, (int)(RExC_parse - name_start),
      |                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
re_comp.c: In function 'S_make_exactf_invlist':
../../regcomp.h:332:25: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  332 | #define STR_LEN(p)      ((OP(p) == LEXACT || OP(p) == LEXACT_REQ8)           \
      |                         ^
re_comp.c:10875:23: note: in expansion of macro 'STR_LEN'
10875 |     SSize_t bytelen = STR_LEN(node);
      |                       ^~~~~~~
re_comp.c:10931:14: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10931 |         fc = uc = utf8_to_uvchr_buf(s, s + bytelen, NULL);
      |              ^~
re_comp.c:10956:30: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
10956 |                         fc = fold;
      |                              ^~~~
re_comp.c:10987:50: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10987 |             invlist = add_cp_to_invlist(invlist, fc);
      |                                                  ^~
../../embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
re_comp.c:10991:42: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
10991 |             folds_count = _inverse_folds(fc, &first_fold,
      |                                          ^~
../../embed.h:963:59: note: in definition of macro '_inverse_folds'
  963 | #define _inverse_folds(a,b,c)   Perl__inverse_folds(aTHX_ a,b,c)
      |                                                           ^
re_comp.c: In function 'S_parse_lparen_question_flags':
re_comp.c:11198:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11198 |                         vWARN5(
      |                         ^~~~~~
re_comp.c:11218:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11218 |                         vWARN3(
      |                         ^~~~~~
re_comp.c:11232:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11232 |                     ckWARNreg(RExC_parse + 1,"Useless use of (?-p)");
      |                     ^~~~~~~~~
re_comp.c: In function 'S_reg':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:11551:5: note: in expansion of macro 'DEBUG_PARSE'
11551 |     DEBUG_PARSE("reg ");
      |     ^~~~~~~~~~~
re_comp.c:291:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  291 | #define RExC_parse      (pRExC_state->parse)
      |                         ^
re_comp.c:11628:24: note: in expansion of macro 'RExC_parse'
11628 |             verb_len = RExC_parse - start_verb;
      |                        ^~~~~~~~~~
re_comp.c:11888:58: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
11888 |                 SV *sv = newSVpvn( start_arg, RExC_parse - start_arg);
      |                                                          ^
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
re_comp.c:12212:54: warning: conversion to 'U32' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12212 |                 ret = reg2Lanode(pRExC_state, GOSUB, num, RExC_recurse_count);
      |                                                      ^~~
../../embed.h:1104:56: note: in definition of macro 'reg2Lanode'
 1104 | #define reg2Lanode(a,b,c,d)     S_reg2Lanode(aTHX_ a,b,c,d)
      |                                                        ^
re_comp.c:12410:57: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12410 |                     ret = reganode(pRExC_state, INSUBP, parno);
      |                                                         ^~~~~
../../embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
re_comp.c:12427:57: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12427 |                     ret = reganode(pRExC_state, GROUPP, parno);
      |                                                         ^~~~~
../../embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
re_comp.c:12524:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
12524 |                     ckWARNreg(RExC_parse, "Empty (?) without any modifiers");
      |                     ^~~~~~~~~
re_comp.c:305:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  305 | #define RExC_parens_buf_size    (pRExC_state->parens_buf_size)
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:12562:21: note: in expansion of macro 'Newxz'
12562 |                     Newxz(RExC_open_parens, RExC_parens_buf_size,
      |                     ^~~~~
re_comp.c:12562:45: note: in expansion of macro 'RExC_parens_buf_size'
12562 |                     Newxz(RExC_open_parens, RExC_parens_buf_size,
      |                                             ^~~~~~~~~~~~~~~~~~~~
re_comp.c:305:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  305 | #define RExC_parens_buf_size    (pRExC_state->parens_buf_size)
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:12570:21: note: in expansion of macro 'Newxz'
12570 |                     Newxz(RExC_close_parens, RExC_parens_buf_size,
      |                     ^~~~~
re_comp.c:12570:46: note: in expansion of macro 'RExC_parens_buf_size'
12570 |                     Newxz(RExC_close_parens, RExC_parens_buf_size,
      |                                              ^~~~~~~~~~~~~~~~~~~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:12581:21: note: in expansion of macro 'Renew'
12581 |                     Renew(RExC_open_parens, RExC_parens_buf_size,
      |                     ^~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:12583:21: note: in expansion of macro 'Zero'
12583 |                     Zero(RExC_open_parens + old_size,
      |                     ^~~~
../../handy.h:2773:104: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2773 |           (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                        ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:12586:21: note: in expansion of macro 'Renew'
12586 |                     Renew(RExC_close_parens, RExC_parens_buf_size,
      |                     ^~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:12588:21: note: in expansion of macro 'Zero'
12588 |                     Zero(RExC_close_parens + old_size,
      |                     ^~~~
re_comp.c:12593:47: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12593 |             ret = reganode(pRExC_state, OPEN, parno);
      |                                               ^~~~~
../../embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
re_comp.c:12687:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
12687 |             ender = reganode(pRExC_state, CLOSE, parno);
      |                                                  ^~~~~
../../embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:12735:9: note: in expansion of macro 'DEBUG_PARSE_r'
12735 |         DEBUG_PARSE_r({
      |         ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:12736:13: note: in expansion of macro 'DEBUG_PARSE_MSG'
12736 |             DEBUG_PARSE_MSG("lsbr");
      |             ^~~~~~~~~~~~~~~
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:12787:17: note: in expansion of macro 'DEBUG_PARSE_r'
12787 |                 DEBUG_PARSE_r({
      |                 ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:12788:21: note: in expansion of macro 'DEBUG_PARSE_MSG'
12788 |                     DEBUG_PARSE_MSG("NADA");
      |                     ^~~~~~~~~~~~~~~
re_comp.c:1236:30: warning: conversion from 'int' to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
 1236 | #define REGNODE_p(offset)    (RExC_emit_start + (offset))
      |                              ^
re_comp.c:12809:35: note: in expansion of macro 'REGNODE_p'
12809 |                     NEXT_OFF(br)= REGNODE_p(ender) - br;
      |                                   ^~~~~~~~~
re_comp.c:12830:37: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
12830 |             FLAGS(REGNODE_p(ret)) = flag;
      |                                     ^~~~
re_comp.c: In function 'S_regbranch':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:12893:5: note: in expansion of macro 'DEBUG_PARSE'
12893 |     DEBUG_PARSE("brnc");
      |     ^~~~~~~~~~~
re_comp.c: In function 'S_regpiece':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:13144:5: note: in expansion of macro 'DEBUG_PARSE'
13144 |     DEBUG_PARSE("piec");
      |     ^~~~~~~~~~~
../../embed.h:1082:41: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
../../embed.h:1082:41: note: in definition of macro 'get_quantifier_value'
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
../../embed.h:1082:41: warning: conversion to 'I32' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
../../embed.h:1082:41: note: in definition of macro 'get_quantifier_value'
 1082 | #define get_quantifier_value(a,b,c)     S_get_quantifier_value(aTHX_ a,b,c)
      |                                         ^~~~~~~~~~~~~~~~~~~~~~
re_comp.c:13204:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13204 |                 ckWARNreg(RExC_parse, "Quantifier {n,m} with n > m can't match");
      |                 ^~~~~~~~~
re_comp.c:13210:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13210 |                 ckWARN2reg(RExC_parse + 1,
      |                 ^~~~~~~~~~
re_comp.c:13241:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13241 |                 ckWARN2reg(RExC_parse,
      |                 ^~~~~~~~~~
re_comp.c: In function 'S_grok_bslash_N':
re_comp.c:13523:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13523 |     endbrace = (char *) memchr(RExC_parse, '}', RExC_end - RExC_parse);
      |                                                          ^
re_comp.c:13568:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13568 |         const STRLEN name_len = e - RExC_parse;
      |                                 ^
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
re_comp.c:13586:26: note: in expansion of macro 'hv_fetch'
13586 |         if ((value_svp = hv_fetch(RExC_unlexed_names, RExC_parse,
      |                          ^~~~~~~~
../../hv.h:497:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  497 |     ((SV**) hv_common_key_len((hv), (key), (klen),                      \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
re_comp.c:13605:19: note: in expansion of macro 'hv_store'
13605 |             if (! hv_store(RExC_unlexed_names, RExC_parse, name_len,
      |                   ^~~~~~~~
re_comp.c:13644:25: warning: conversion to 'int' from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13644 |             *cp_count = (SvUTF8(value_sv))
      |                         ^
re_comp.c:13692:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13692 |             STRLEN len = e - RExC_parse;
      |                          ^
re_comp.c:13767:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
13767 |                                             RExC_parse - start_digit);
      |                                                        ^
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
re_comp.c:13766:17: note: in expansion of macro 'sv_catpvn'
13766 |                 sv_catpvn(substitute_parse, start_digit,
      |                 ^~~~~~~~~
re_comp.c:13781:25: warning: conversion to 'int' from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
13781 |             *cp_count = count;
      |                         ^~~~~
re_comp.c: In function 'S_regatom':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:13958:5: note: in expansion of macro 'DEBUG_PARSE'
13958 |     DEBUG_PARSE("atom");
      |     ^~~~~~~~~~~
In file included from ../../regcomp.h:766:
../../regnodes.h:111:39: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  111 | #define BOUND                         8        /* 0x08 Like BOUNDA for
      |                                       ^
re_comp.c:14141:18: note: in expansion of macro 'BOUND'
14141 |             op = BOUND + charset;
      |                  ^~~~~
re_comp.c:14153:61: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14153 |                                                    RExC_end - RExC_parse);
      |                                                             ^
re_comp.c:14175:26: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14175 |                 length = e - RExC_parse;
      |                          ^
re_comp.c:14224:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14224 |                     ckWARN4reg(RExC_parse + 1,  /* Include the '}' in msg */
      |                     ^~~~~~~~~~
re_comp.c:14380:69: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14380 |                         endbrace = (char *) memchr(s, '}', RExC_end - s);
      |                                                                     ^
re_comp.c:14513:33: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
14513 |                                 num);
      |                                 ^~~
../../embed.h:1110:54: note: in definition of macro 'reganode'
 1110 | #define reganode(a,b,c)         S_reganode(aTHX_ a,b,c)
      |                                                      ^
re_comp.c:14589:50: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14589 |                                                  + ((! FOLD)
      |                                                  ^
../../regcomp.h:340:28: note: in definition of macro 'STR_SZ'
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                            ^
../../regcomp.h:340:25: warning: conversion to 'ptrdiff_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
re_comp.c:14588:46: note: in expansion of macro 'STR_SZ'
14588 |             Ptrdiff_t current_string_nodes = STR_SZ(max_string_len
      |                                              ^~~~~~
re_comp.c:14631:56: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
14631 |             ret = REGNODE_GUTS(pRExC_state, node_type, current_string_nodes);
      |                                                        ^~~~~~~~~~~~~~~~~~~~
../../embed.h:1039:72: note: in definition of macro 'regnode_guts_debug'
 1039 | #define regnode_guts_debug(a,b,c)       S_regnode_guts_debug(aTHX_ a,b,c)
      |                                                                        ^
re_comp.c:14631:19: note: in expansion of macro 'REGNODE_GUTS'
14631 |             ret = REGNODE_GUTS(pRExC_state, node_type, current_string_nodes);
      |                   ^~~~~~~~~~~~
re_comp.c:14825:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14825 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:14844:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14844 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:14872:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14872 |                             warn_non_literal_string(p, packed_warn, message);
      |                             ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:14919:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14919 |                                 reg_warn_non_literal_string(
      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:14936:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14936 |                                 ckWARN2reg(p + 1, "Unrecognized escape \\%.1s"
      |                                 ^~~~~~~~~~
re_comp.c:14969:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14969 |                         ckWARNreg(p + 1, "Unescaped left brace in regex is"
      |                         ^~~~~~~~~
re_comp.c:14976:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14976 |                         ckWARN2reg(p + 1, "Unescaped literal '%c'", *p);
      |                         ^~~~~~~~~~
re_comp.c:14983:65: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
14983 |                         ender = utf8n_to_uvchr((U8*)p, RExC_end - p,
      |                                                                 ^
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_comp.c:14983:33: note: in expansion of macro 'utf8n_to_uvchr'
14983 |                         ender = utf8n_to_uvchr((U8*)p, RExC_end - p,
      |                                 ^~~~~~~~~~~~~~
re_comp.c:15001:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15001 |                         ckWARN2_non_literal_string(p,
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:15050:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15050 |                         added_len = (char *) new_s - s;
      |                                     ^
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
../../perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
re_comp.c:15218:37: note: in expansion of macro 'UNLIKELY'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~
../../handy.h:2515:24: note: in expansion of macro '__ASSERT_'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                        ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:2515:34: note: in expansion of macro 'isALPHA_A'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                                  ^~~~~~~~~
re_comp.c:15218:46: note: in expansion of macro 'isALPHA_FOLD_EQ'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                              ^~~~~~~~~~~~~~~
../../handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
../../perl.h:3871:62: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                                              ^~~~
../../perl.h:3892:52: note: in expansion of macro 'cBOOL'
 3892 | #define UNLIKELY(cond)                      EXPECT(cBOOL(cond),FALSE)
      |                                                    ^~~~~
re_comp.c:15218:37: note: in expansion of macro 'UNLIKELY'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~
re_comp.c:15218:46: note: in expansion of macro 'isALPHA_FOLD_EQ'
15218 |                         else if (   UNLIKELY(isALPHA_FOLD_EQ(ender, 's'))
      |                                              ^~~~~~~~~~~~~~~
re_comp.c:15303:31: warning: conversion to 'size_t' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15303 |                     RExC_emit += overhead_expansion;
      |                               ^~
re_comp.c:15303:34: warning: conversion to 'regnode_offset' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15303 |                     RExC_emit += overhead_expansion;
      |                                  ^~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:1115:
../../regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
re_comp.c:15316:57: note: in expansion of macro 'STR_SZ'
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                         ^~~~~~
re_comp.c:15316:55: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                       ^
../../regcomp.h:340:31: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                               ^
re_comp.c:15316:57: note: in expansion of macro 'STR_SZ'
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                         ^~~~~~
re_comp.c:15316:55: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15316 |                                  current_string_nodes + STR_SZ(RExC_end - p));
      |                                                       ^
re_comp.c:15317:36: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15317 |                 delta = achievable - current_string_nodes;
      |                                    ^
re_comp.c:15317:25: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15317 |                 delta = achievable - current_string_nodes;
      |                         ^~~~~~~~~~
re_comp.c:15325:55: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15325 |                 change_engine_size(pRExC_state, delta + overhead_expansion);
      |                                                       ^
../../embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
re_comp.c:15325:55: warning: conversion to 'ptrdiff_t' {aka 'const int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15325 |                 change_engine_size(pRExC_state, delta + overhead_expansion);
      |                                                 ~~~~~~^~~~~~~~~~~~~~~~~~~~
../../embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
re_comp.c:15328:53: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15328 |                            = sizeof(struct regnode) * current_string_nodes;
      |                                                     ^
re_comp.c:15447:59: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15447 |                                                         = redo_p - RExC_parse;
      |                                                           ^~~~~~
re_comp.c:15490:45: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15490 |                                             + (oldp - redo_p)
      |                                             ^
re_comp.c:15741:42: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15741 |                             upper_fill = s - s0;
      |                                          ^
re_comp.c:15750:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15750 |                     len = old_s - s0;
      |                           ^~~~~
re_comp.c:15769:61: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15769 |                         - (Ptrdiff_t) (current_string_nodes - STR_SZ(len)));
      |                                                             ^
../../embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:2515:24: note: in expansion of macro '__ASSERT_'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                        ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:2515:34: note: in expansion of macro 'isALPHA_A'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                                  ^~~~~~~~~
re_comp.c:15843:37: note: in expansion of macro 'isALPHA_FOLD_EQ'
15843 |                                  || isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~~~~~~~~
../../handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
re_comp.c:15843:37: note: in expansion of macro 'isALPHA_FOLD_EQ'
15843 |                                  || isALPHA_FOLD_EQ(ender, 's'))
      |                                     ^~~~~~~~~~~~~~~
../../regcomp.h:351:55: warning: conversion from 'STRLEN' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  351 |             ((struct regnode_string *)(p))->str_len = (v);                  \
      |                                                       ^
re_comp.c:15867:17: note: in expansion of macro 'setSTR_LEN'
15867 |                 setSTR_LEN(REGNODE_p(ret), len);
      |                 ^~~~~~~~~~
re_comp.c:15868:27: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
15868 |                 RExC_emit += STR_SZ(len);
      |                           ^~
../../regcomp.h:340:25: warning: conversion to 'regnode_offset' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  340 | #define STR_SZ(l)       (((l) + sizeof(regnode) - 1) / sizeof(regnode))
      |                         ^
re_comp.c:15868:30: note: in expansion of macro 'STR_SZ'
15868 |                 RExC_emit += STR_SZ(len);
      |                              ^~~~~~
re_comp.c:15882:25: warning: conversion to 'IV' {aka 'long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
15882 |                 IV iv = len;
      |                         ^~~
re_comp.c:15901:9: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
15901 |         ckWARNreg(RExC_parse + 1, "Unescaped left brace in regex is"
      |         ^~~~~~~~~
re_comp.c: In function 'S_populate_ANYOF_from_invlist':
re_comp.c:15954:22: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
15954 |             for (i = start; i <= (int) high; i++) {
      |                      ^~~~~
re_comp.c: In function 'S_handle_possible_posix':
re_comp.c:16779:58: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
16779 |             CLEAR_POSIX_WARNINGS_AND_RETURN(class_number + complement);
      |                                                          ^
re_comp.c:16017:16: note: in definition of macro 'CLEAR_POSIX_WARNINGS_AND_RETURN'
16017 |         return ret;                                                         \
      |                ^~~
re_comp.c:16779:58: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
16779 |             CLEAR_POSIX_WARNINGS_AND_RETURN(class_number + complement);
      |                                             ~~~~~~~~~~~~~^~~~~~~~~~~~
re_comp.c:16017:16: note: in definition of macro 'CLEAR_POSIX_WARNINGS_AND_RETURN'
16017 |         return ret;                                                         \
      |                ^~~
re_comp.c: In function 'S_handle_regex_sets':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:16859:5: note: in expansion of macro 'DEBUG_PARSE'
16859 |     DEBUG_PARSE("xcls");
      |     ^~~~~~~~~~~
re_comp.c: In function 'S_add_above_Latin1_folds':
re_comp.c:17638:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17638 |                 ckWARN2reg_d(RExC_parse,
      |                 ^~~~~~~~~~~~
re_comp.c: In function 'S_output_posix_warnings':
re_comp.c:17688:5: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17688 |     UPDATE_WARNINGS_LOC(RExC_parse);
      |     ^~~~~~~~~~~~~~~~~~~
re_comp.c: In function 'S_find_first_differing_byte_pos':
re_comp.c:17703:15: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17703 |     return s1 - start;
      |            ~~~^~~~~~~
re_comp.c: In function 'S_add_multi_match':
re_comp.c:17740:39: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17740 |     if (av_exists(multi_char_matches, cp_count)) {
      |                                       ^~~~~~~~
../../embed.h:60:56: note: in definition of macro 'av_exists'
   60 | #define av_exists(a,b)          Perl_av_exists(aTHX_ a,b)
      |                                                        ^
re_comp.c:17741:62: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17741 |         this_array_ptr = (AV**) av_fetch(multi_char_matches, cp_count, FALSE);
      |                                                              ^~~~~~~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
re_comp.c:17746:38: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
17746 |         av_store(multi_char_matches, cp_count,
      |                                      ^~~~~~~~
../../embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
re_comp.c: In function 'S_regclass':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9306:35: note: in expansion of macro 'DEBUG_PARSE_r'
 9306 | #define DEBUG_PARSE(funcname)     DEBUG_PARSE_r({           \
      |                                   ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9307:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9307 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:17930:5: note: in expansion of macro 'DEBUG_PARSE'
17930 |     DEBUG_PARSE("clas");
      |     ^~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
re_comp.c:17964:13: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
17964 |             ckWARN4reg(not_posix_region_end,
      |             ^~~~~~~~~~
re_comp.c:18023:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18023 |                                    RExC_end - RExC_parse,
      |                                             ^
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_comp.c:18022:21: note: in expansion of macro 'utf8n_to_uvchr'
18022 |             value = utf8n_to_uvchr((U8*)RExC_parse,
      |                     ^~~~~~~~~~~~~~
re_comp.c:18087:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18087 |                                    RExC_end - RExC_parse,
      |                                             ^
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
re_comp.c:18086:25: note: in expansion of macro 'utf8n_to_uvchr'
18086 |                 value = utf8n_to_uvchr((U8*)RExC_parse,
      |                         ^~~~~~~~~~~~~~
re_comp.c:18144:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18144 |                             ckWARNreg(RExC_parse,
      |                             ^~~~~~~~~
re_comp.c:18159:37: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18159 |                                     ckWARNreg(RExC_parse, "Using just the first character returned by \\N{} in character class");
      |                                     ^~~~~~~~~
re_comp.c:18166:61: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18166 |                                                  RExC_parse - backslash_N_beg);
      |                                                             ^
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
re_comp.c:18170:59: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18170 |                                                           cp_count);
      |                                                           ^~~~~~~~
../../embed.h:1072:61: note: in definition of macro 'add_multi_match'
 1072 | #define add_multi_match(a,b,c)  S_add_multi_match(aTHX_ a,b,c)
      |                                                             ^
re_comp.c:18208:67: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18208 |                     e = (char *) memchr(RExC_parse, '}', RExC_end - RExC_parse);
      |                                                                   ^
re_comp.c:18238:25: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18238 |                     n = e - RExC_parse;
      |                         ^
re_comp.c:18300:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18300 |                                 ckWARNreg(e + 1,
      |                                 ^~~~~~~~~
re_comp.c:18441:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18441 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18463:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18463 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18483:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18483 |                     warn_non_literal_string(RExC_parse, packed_warn, message);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18507:29: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18507 |                             reg_warn_non_literal_string(
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18526:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18526 |                         ckWARN2reg(RExC_parse,
      |                         ^~~~~~~~~~
re_comp.c:18553:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18553 |                     ckWARN2reg(RExC_parse,
      |                     ^~~~~~~~~~
re_comp.c:638:40: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  638 | #define namedclass_to_classnum(class)  ((int) ((class) / 2))
      |                                        ^
re_comp.c:18565:24: note: in expansion of macro 'namedclass_to_classnum'
18565 |             classnum = namedclass_to_classnum(namedclass);
      |                        ^~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18591:44: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
18591 |                     has_runtime_dependency &= ~HAS_L_RUNTIME_DEPENDENCY;
      |                                            ^~
re_comp.c:18592:36: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-3' [-Wsign-conversion]
18592 |                     anyof_flags &= ~ANYOF_MATCHES_POSIXL;
      |                                    ^
re_comp.c:18753:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18753 |                                 vWARN4(RExC_parse,
      |                                 ^~~~~~
re_comp.c:18787:17: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18787 |                 ckWARN2_non_literal_string(RExC_parse,
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
re_comp.c:18864:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18864 |                     vWARN(RExC_parse, "Both or neither range ends should be Unicode");
      |                     ^~~~~
re_comp.c:18881:25: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18881 |                         vWARN(RExC_parse, "Ranges of ASCII printables should"
      |                         ^~~~~
re_comp.c:18952:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18952 |                                 vWARN(RExC_parse, "Ranges of digits should be"
      |                                 ^~~~~
re_comp.c:18964:45: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
18964 |                     if (isBACKSLASHED_PUNCT(value)) {
      |                                             ^~~~~
../../handy.h:718:70: note: in definition of macro 'memCHRs'
  718 | #define memCHRs(s1,c) ((const char *) memchr(ASSERT_IS_LITERAL(s1) , c, sizeof(s1)-1))
      |                                                                      ^
re_comp.c:18964:25: note: in expansion of macro 'isBACKSLASHED_PUNCT'
18964 |                     if (isBACKSLASHED_PUNCT(value)) {
      |                         ^~~~~~~~~~~~~~~~~~~
re_comp.c:18970:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18970 |                     vWARN4(RExC_parse,
      |                     ^~~~~~
re_comp.c:18978:21: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
18978 |                     vWARN4(RExC_parse,
      |                     ^~~~~~
re_comp.c:19099:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
19099 |             sv_catpvn(substitute_parse, orig_parse, RExC_parse - orig_parse);
      |                                                                ^
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
re_comp.c:19099:13: note: in expansion of macro 'sv_catpvn'
19099 |             sv_catpvn(substitute_parse, orig_parse, RExC_parse - orig_parse);
      |             ^~~~~~~~~
re_comp.c: In function 'S_optimize_regclass':
../../embed.h:572:33: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  572 | #define single_1bit_pos32       Perl_single_1bit_pos32
      |                                 ^~~~~~~~~~~~~~~~~~~~~~
../../embed.h:572:33: note: in definition of macro 'single_1bit_pos32'
  572 | #define single_1bit_pos32       Perl_single_1bit_pos32
      |                                 ^~~~~~~~~~~~~~~~~~~~~~
re_comp.c:638:40: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  638 | #define namedclass_to_classnum(class)  ((int) ((class) / 2))
      |                                        ^
re_comp.c:19749:24: note: in expansion of macro 'namedclass_to_classnum'
19749 |             classnum = namedclass_to_classnum(namedclass);
      |                        ^~~~~~~~~~~~~~~~~~~~~~
../../regnodes.h:349:38: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
  349 | #define POSIXL                       31        /* 0x1f Some [[:class:]] under
      |                                      ^~
../../regnodes.h:349:38: note: in definition of macro 'POSIXL'
  349 | #define POSIXL                       31        /* 0x1f Some [[:class:]] under
      |                                      ^~
re_comp.c:19895:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
19895 |         else if (  ! (has_runtime_dependency & ~HAS_D_RUNTIME_DEPENDENCY)
      |                                              ^
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:1821:22: note: in expansion of macro 'isALPHA_A'
 1821 | #define isALPHA(c)   isALPHA_A(c)
      |                      ^~~~~~~~~
re_comp.c:19913:24: note: in expansion of macro 'isALPHA'
19913 |                 assert(isALPHA(lowest_cp));
      |                        ^~~~~~~
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:2515:24: note: in expansion of macro '__ASSERT_'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                        ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:2515:34: note: in expansion of macro 'isALPHA_A'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                                  ^~~~~~~~~
re_comp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:2515:24: note: in expansion of macro '__ASSERT_'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                        ^~~~~~~~~
../../handy.h:1461:21: note: in expansion of macro 'withinCOUNT_KNOWN_VALID_'
 1461 |                     withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:2515:51: note: in expansion of macro 'isALPHA_A'
 2515 |                       (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2))        \
      |                                                   ^~~~~~~~~
re_comp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
../../handy.h:2516:29: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                             ^
re_comp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
../../handy.h:2516:55: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 2516 |                       ((c1) & ~('A' ^ 'a')) ==  ((c2) & ~('A' ^ 'a')))
      |                                                       ^
re_comp.c:19916:24: note: in expansion of macro 'isALPHA_FOLD_EQ'
19916 |                     && isALPHA_FOLD_EQ(start[0], start[1]))
      |                        ^~~~~~~~~~~~~~~
re_comp.c:19994:47: warning: conversion to 'IV' {aka 'long int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
19994 |                 SV * fold_list = _new_invlist(folds_count);
      |                                               ^~~~~~~~~~~
../../embed.h:1152:57: note: in definition of macro '_new_invlist'
 1152 | #define _new_invlist(a)         Perl__new_invlist(aTHX_ a)
      |                                                         ^
re_comp.c:20121:19: warning: conversion from 'unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20121 |             len = (UTF) ? UVCHR_SKIP(value) : 1;
      |                   ^
re_comp.c:20125:23: warning: conversion to 'unsigned int' from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
20125 |             RExC_emit += 1 + STR_SZ(len);
      |                       ^~
re_comp.c:20125:26: warning: conversion to 'regnode_offset' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
20125 |             RExC_emit += 1 + STR_SZ(len);
      |                          ^
re_comp.c:20207:40: warning: conversion from 'long unsigned int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20207 |                     bits_differing  |= i ^ lowest_cp;
      |                                        ^
re_comp.c:20363:50: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20363 |                         FLAGS(REGNODE_p(*ret)) = posix_class;
      |                                                  ^~~~~~~~~~~
../../embed.h:773:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:773:49: note: in definition of macro 'uvoffuni_to_utf8_flags_msgs'
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:75:37: note: in expansion of macro 'uvchr_to_utf8_flags_msgs'
   75 |                                     uvchr_to_utf8_flags_msgs(d,uv,flags, 0)
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:73:37: note: in expansion of macro 'uvchr_to_utf8_flags'
   73 | #define uvchr_to_utf8(a,b)          uvchr_to_utf8_flags(a,b,0)
      |                                     ^~~~~~~~~~~~~~~~~~~
re_comp.c:20434:26: note: in expansion of macro 'uvchr_to_utf8'
20434 |         Size_t low_len = uvchr_to_utf8(low_utf8, MIN(lowest_cp, IV_MAX))
      |                          ^~~~~~~~~~~~~
../../embed.h:773:49: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../embed.h:773:49: note: in definition of macro 'uvoffuni_to_utf8_flags_msgs'
  773 | #define uvoffuni_to_utf8_flags_msgs(a,b,c,d)    Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
      |                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:75:37: note: in expansion of macro 'uvchr_to_utf8_flags_msgs'
   75 |                                     uvchr_to_utf8_flags_msgs(d,uv,flags, 0)
      |                                     ^~~~~~~~~~~~~~~~~~~~~~~~
../../utf8.h:73:37: note: in expansion of macro 'uvchr_to_utf8_flags'
   73 | #define uvchr_to_utf8(a,b)          uvchr_to_utf8_flags(a,b,0)
      |                                     ^~~~~~~~~~~~~~~~~~~
re_comp.c:20451:31: note: in expansion of macro 'uvchr_to_utf8'
20451 |             Size_t high_len = uvchr_to_utf8(high_utf8, highest_cp) - high_utf8;
      |                               ^~~~~~~~~~~~~
re_comp.c:20474:71: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20474 |                                                                     = len;
      |                                                                       ^~~
re_comp.c:20478:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
20478 |                     RExC_emit += NODE_SZ_STR(REGNODE_p(*ret));
      |                               ^~
../../regcomp.h:344:25: warning: conversion to 'regnode_offset' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  344 | #define NODE_SZ_STR(p)  (STR_SZ(STR_LEN(p)) + 1 + regarglen[(p)->type])
      |                         ^
re_comp.c:20478:34: note: in expansion of macro 'NODE_SZ_STR'
20478 |                     RExC_emit += NODE_SZ_STR(REGNODE_p(*ret));
      |                                  ^~~~~~~~~~~
re_comp.c:20507:32: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
20507 |                 *anyof_flags = (*anyof_flags - 0xC0) << 2 | bits;
      |                                ^
re_comp.c: In function 'Perl_get_re_gclass_nonbitmap_data':
../../sv.h:1247:9: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1247 |         (*({ SV *const _svpvx = MUTABLE_SV(sv);                         \
      |         ^
re_comp.c:20730:29: note: in expansion of macro 'SvPVX'
20730 |                 remaining = SvPVX(si) + SvCUR(si) - si_string;
      |                             ^~~~~
re_comp.c: In function 'S_change_engine_size':
re_comp.c:20965:54: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
20965 |            sizeof(regexp_internal) + (RExC_size + 1) * sizeof(regnode),
      |                                                      ^
../../handy.h:2755:35: note: in definition of macro 'MEM_LOG_REALLOC'
 2755 | #define MEM_LOG_REALLOC(n,t,v,a) (a)
      |                                   ^
re_comp.c:20964:5: note: in expansion of macro 'Renewc'
20964 |     Renewc(RExC_rxi,
      |     ^~~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'ptrdiff_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:20975:9: note: in expansion of macro 'Zero'
20975 |         Zero(REGNODE_p(RExC_emit), size, regnode);
      |         ^~~~
re_comp.c: In function 'S_regnode_guts':
re_comp.c:20993:51: warning: conversion to 'ptrdiff_t' {aka 'const int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
20993 |     change_engine_size(pRExC_state, (Ptrdiff_t) 1 + extra_size);
      |                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~
../../embed.h:1073:62: note: in definition of macro 'change_engine_size'
 1073 | #define change_engine_size(a,b) S_change_engine_size(aTHX_ a,b)
      |                                                              ^
re_comp.c: In function 'S_reginsert':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:9310:48: note: in expansion of macro 'DEBUG_PARSE_r'
 9310 | #define DEBUG_PARSE_FMT(funcname,fmt,args)     DEBUG_PARSE_r({\
      |                                                ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:9311:5: note: in expansion of macro 'DEBUG_PARSE_MSG'
 9311 |     DEBUG_PARSE_MSG((funcname));                            \
      |     ^~~~~~~~~~~~~~~
re_comp.c:21110:5: note: in expansion of macro 'DEBUG_PARSE_FMT'
21110 |     DEBUG_PARSE_FMT("inst"," - %s", PL_reg_name[op]);
      |     ^~~~~~~~~~~~~~~
../../handy.h:2792:97: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2792 | #define Zero(d,n,t)     (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))
      |                                                                                                 ^
../../perl.h:1478:36: note: in definition of macro 'memzero'
 1478 | #   define memzero(d,l) memset(d,0,l)
      |                                    ^
re_comp.c:21159:5: note: in expansion of macro 'Zero'
21159 |     Zero(src, offset, regnode);
      |     ^~~~
re_comp.c: In function 'S_regtail':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:21188:9: note: in expansion of macro 'DEBUG_PARSE_r'
21188 |         DEBUG_PARSE_r({
      |         ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:21189:13: note: in expansion of macro 'DEBUG_PARSE_MSG'
21189 |             DEBUG_PARSE_MSG((scan==p ? "tail" : ""));
      |             ^~~~~~~~~~~~~~~
../../regcomp.h:264:36: warning: conversion to 'U32' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  264 | #define ARG__SET(arg,val) ((arg) = (val))
      |                                    ^
../../regcomp.h:276:25: note: in expansion of macro 'ARG__SET'
  276 | #define ARG_SET(p, val) ARG__SET(ARG_LOC(p), (val))
      |                         ^~~~~~~~
re_comp.c:21206:9: note: in expansion of macro 'ARG_SET'
21206 |         ARG_SET(REGNODE_p(scan), val - scan);
      |         ^~~~~~~
re_comp.c:21216:37: warning: conversion from 'regnode_offset' {aka 'int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
21216 |         NEXT_OFF(REGNODE_p(scan)) = val - scan;
      |                                     ^~~
re_comp.c: In function 'S_regtail_study':
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:21281:9: note: in expansion of macro 'DEBUG_PARSE_r'
21281 |         DEBUG_PARSE_r({
      |         ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:21282:13: note: in expansion of macro 'DEBUG_PARSE_MSG'
21282 |             DEBUG_PARSE_MSG((scan==p ? "tsdy" : ""));
      |             ^~~~~~~~~~~~~~~
re_comp.c:9280:26: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 9280 |                 RExC_end - RExC_parse, 16,                      \
      |                          ^
../../perl.h:4614:45: note: in definition of macro 'DEBUG_r'
 4614 |                             DEBUG_PRE_STMTS a; DEBUG_POST_STMTS         \
      |                                             ^
re_comp.c:21293:5: note: in expansion of macro 'DEBUG_PARSE_r'
21293 |     DEBUG_PARSE_r({
      |     ^~~~~~~~~~~~~
../../regcomp.h:1040:26: note: in expansion of macro 'DEBUG_r'
 1040 | #define DEBUG_PARSE_r(x) DEBUG_r( \
      |                          ^~~~~~~
re_comp.c:9276:39: note: in expansion of macro 'DEBUG_PARSE_r'
 9276 | #define DEBUG_PARSE_MSG(funcname)     DEBUG_PARSE_r({           \
      |                                       ^~~~~~~~~~~~~
re_comp.c:21294:9: note: in expansion of macro 'DEBUG_PARSE_MSG'
21294 |         DEBUG_PARSE_MSG("");
      |         ^~~~~~~~~~~~~~~
../../regcomp.h:264:36: warning: conversion to 'U32' {aka 'unsigned int'} from 'regnode_offset' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  264 | #define ARG__SET(arg,val) ((arg) = (val))
      |                                    ^
../../regcomp.h:276:25: note: in expansion of macro 'ARG__SET'
  276 | #define ARG_SET(p, val) ARG__SET(ARG_LOC(p), (val))
      |                         ^~~~~~~~
re_comp.c:21305:9: note: in expansion of macro 'ARG_SET'
21305 |         ARG_SET(REGNODE_p(scan), val - scan);
      |         ^~~~~~~
re_comp.c:21315:37: warning: conversion from 'regnode_offset' {aka 'int'} to 'U16' {aka 'short unsigned int'} may change value [-Wconversion]
21315 |         NEXT_OFF(REGNODE_p(scan)) = val - scan;
      |                                     ^~~
re_comp.c: In function 'my_regprop':
re_comp.c:21682:48: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
21682 |                 SV **name= av_fetch(name_list, parno, 0 );
      |                                                ^~~~~
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
re_comp.c:21718:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
21718 |                 Perl_pv_pretty( aTHX_ sv, s, prog->offs[n].end - prog->offs[n].start, 32, 0, 0,
      |                                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
../../regcomp.h:364:49: warning: conversion to 'ssize_t' {aka 'int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  364 | #define ARG_LOC(p)      (((struct regnode_1 *)p)->arg1)
      |                                                 ^
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
../../regcomp.h:270:16: note: in expansion of macro 'ARG_VALUE'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                ^~~~~~~~~
../../regcomp.h:270:26: note: in expansion of macro 'ARG_LOC'
  270 | #define ARG(p) ARG_VALUE(ARG_LOC(p))
      |                          ^~~~~~~
re_comp.c:21734:44: note: in expansion of macro 'ARG'
21734 |             SV **name= av_fetch(name_list, ARG(o), 0 );
      |                                            ^~~
re_comp.c:21941:26: warning: conversion from 'int' to 'U8' {aka 'unsigned char'} may change value [-Wconversion]
21941 |             U8 highest = (OP(o) == ANYOFHr)
      |                          ^
re_comp.c: In function 'my_regfree':
re_comp.c:22287:17: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22287 |         int n = ri->data->count;
      |                 ^~
re_comp.c: In function 'my_regdupe':
re_comp.c:22505:19: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22505 |     len = ProgLen(ri);
      |                   ^~
re_comp.c:1239:21: note: in definition of macro 'ProgLen'
 1239 | #define ProgLen(ri) ri->proglen
      |                     ^~
re_comp.c:22507:46: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
22507 |     Newxc(reti, sizeof(regexp_internal) + len*sizeof(regnode),
      |                                              ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:22507:5: note: in expansion of macro 'Newxc'
22507 |     Newxc(reti, sizeof(regexp_internal) + len*sizeof(regnode),
      |     ^~~~~
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
re_comp.c:22509:5: note: in expansion of macro 'Copy'
22509 |     Copy(ri->program, reti->program, len+1, regnode);
      |     ^~~~
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:22515:9: note: in expansion of macro 'Newx'
22515 |         Newx(reti->code_blocks->cb, ri->code_blocks->count,
      |         ^~~~
../../handy.h:2791:133: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2791 | #define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                     ^
re_comp.c:22517:9: note: in expansion of macro 'Copy'
22517 |         Copy(ri->code_blocks->cb, reti->code_blocks->cb,
      |         ^~~~
re_comp.c:22532:27: warning: conversion to 'int' from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
22532 |         const int count = ri->data->count;
      |                           ^~
re_comp.c:22535:49: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
22535 |         Newxc(d, sizeof(struct reg_data) + count*sizeof(void *),
      |                                                 ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:22535:9: note: in expansion of macro 'Newxc'
22535 |         Newxc(d, sizeof(struct reg_data) + count*sizeof(void *),
      |         ^~~~~
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
re_comp.c:22537:9: note: in expansion of macro 'Newx'
22537 |         Newx(d->what, count, U8);
      |         ^~~~
re_comp.c:22539:20: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
22539 |         d->count = count;
      |                    ^~~~~
re_comp.c:22607:22: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
22607 |     SetProgLen(reti, len);
      |                      ^~~
re_comp.c:1240:40: note: in definition of macro 'SetProgLen'
 1240 | #define SetProgLen(ri,x) ri->proglen = x
      |                                        ^
re_comp.c: In function 'S_put_code_point':
re_comp.c:22724:33: warning: conversion to 'int' from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
22724 |         if (isBACKSLASHED_PUNCT(c) || c == '{' || c == '}')
      |                                 ^
../../handy.h:718:70: note: in definition of macro 'memCHRs'
  718 | #define memCHRs(s1,c) ((const char *) memchr(ASSERT_IS_LITERAL(s1) , c, sizeof(s1)-1))
      |                                                                      ^
re_comp.c:22724:13: note: in expansion of macro 'isBACKSLASHED_PUNCT'
22724 |         if (isBACKSLASHED_PUNCT(c) || c == '{' || c == '}')
      |             ^~~~~~~~~~~~~~~~~~~
re_comp.c: In function 'S_put_charclass_bitmap_innards':
re_comp.c:23182:58: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23182 |                 invlist = _add_range_to_invlist(invlist, start, i-1);
      |                                                          ^~~~~
../../embed.h:1148:76: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                            ^
re_comp.c:23182:66: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23182 |                 invlist = _add_range_to_invlist(invlist, start, i-1);
      |                                                                 ~^~
../../embed.h:1148:78: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                              ^
re_comp.c:23290:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23290 |                 || (  SvCUR(inverted_display) + inverted_bias
      |                                               ^
re_comp.c:23291:47: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23291 |                     < SvCUR(as_is_display)    + as_is_bias)))
      |                                               ^
re_comp.c: In function 'S_dumpuntil':
re_comp.c:23414:27: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23414 |                     indent+3,
      |                     ~~~~~~^~
re_comp.c: In function 'S_execute_wildcard':
re_comp.c:23745:18: warning: unsigned conversion from 'int' to 'unsigned int' changes value from '-513' to '4294966783' [-Wsign-conversion]
23745 |         PL_debug &= ~ DEBUG_r_FLAG;
      |                  ^~
re_comp.c: In function 'S_handle_user_defined_property':
re_comp.c:23948:66: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
23948 |         this_definition = _add_range_to_invlist(this_definition, min, max);
      |                                                                  ^~~
../../embed.h:1148:76: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                            ^
re_comp.c:23948:71: warning: conversion to 'UV' {aka 'long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
23948 |         this_definition = _add_range_to_invlist(this_definition, min, max);
      |                                                                       ^~~
../../embed.h:1148:78: note: in definition of macro '_add_range_to_invlist'
 1148 | #define _add_range_to_invlist(a,b,c)    Perl__add_range_to_invlist(aTHX_ a,b,c)
      |                                                                              ^
re_comp.c:23968:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
23968 |         this_definition = parse_uniprop_string(s0, s - s0,
      |                                                    ~~^~~~
../../embed.h:1100:88: note: in definition of macro 'parse_uniprop_string'
 1100 | #define parse_uniprop_string(a,b,c,d,e,f,g,h,i,j)       S_parse_uniprop_string(aTHX_ a,b,c,d,e,f,g,h,i,j)
      |                                                                                        ^
re_comp.c: In function 'S_delete_recursion_entry':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
re_comp.c:24086:21: note: in expansion of macro 'hv_fetch'
24086 |     current_entry = hv_fetch(PL_user_def_props, (const char *) key, key_len, 0);
      |                     ^~~~~~~~
../../hv.h:512:48: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                                                ^~~~~~
../../handy.h:97:41: note: in definition of macro 'MUTABLE_PTR'
   97 | #  define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })
      |                                         ^
../../hv.h:512:6: note: in expansion of macro 'MUTABLE_SV'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |      ^~~~~~~~~~
../../hv.h:512:17: note: in expansion of macro 'hv_common_key_len'
  512 |     (MUTABLE_SV(hv_common_key_len((hv), (key), (klen),                  \
      |                 ^~~~~~~~~~~~~~~~~
re_comp.c:24091:16: note: in expansion of macro 'hv_delete'
24091 |         (void) hv_delete(PL_user_def_props, (const char *) key, key_len,
      |                ^~~~~~~~~
re_comp.c: In function 'S_parse_uniprop_string':
re_comp.c:24266:26: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24266 |             equals_pos = j; /* Note where it occurred in the input */
      |                          ^
re_comp.c:24317:20: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
24317 |         equals_pos -=  STRLENs("utf8::");
      |                    ^~
re_comp.c:24308:23: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24308 | #  define STRLENs(s)  (sizeof("" s "") - 1)
      |                       ^
re_comp.c:24317:24: note: in expansion of macro 'STRLENs'
24317 |         equals_pos -=  STRLENs("utf8::");
      |                        ^~~~~~~
re_comp.c:24351:61: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
24351 |                 table_index = do_uniprop_match(lookup_name, j);
      |                                                             ^
re_comp.c:24550:67: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
24550 |             character_name = newSVpvn(lookup_name + equals_pos, j - equals_pos);
      |                                                                   ^
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
re_comp.c:24779:21: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
24779 |         slash_pos = j;
      |                     ^
../../sv.h:1265:10: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1265 |         (*({ const SV *const _svcur = (const SV *)(sv);                 \
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
re_comp.c:24969:35: note: in expansion of macro 'hv_fetch'
24969 |             saved_user_prop_ptr = hv_fetch(PL_user_def_props,
      |                                   ^~~~~~~~
re_comp.c:24970:64: note: in expansion of macro 'SvCUR'
24970 |                                                    SvPVX(key), SvCUR(key), 0);
      |                                                                ^~~~~
../../perl.h:2188:33: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 2188 | #  define INT2PTR(any,d)        (any)(d)
      |                                 ^~~~~~~~
../../embed.h:405:52: note: in definition of macro 'newSVuv'
  405 | #define newSVuv(a)              Perl_newSVuv(aTHX_ a)
      |                                                    ^
../../perl.h:2213:25: note: in expansion of macro 'INT2PTR'
 2213 | #define PTR2IV(p)       INT2PTR(IV,p)
      |                         ^~~~~~~
re_comp.c:25044:34: note: in expansion of macro 'PTR2IV'
25044 |             placeholder= newSVuv(PTR2IV(ORIGINAL_CONTEXT));
      |                                  ^~~~~~
re_comp.c:25189:49: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25189 |     table_index = do_uniprop_match(lookup_name, lookup_len);
      |                                                 ^~~~~~~~~~
re_comp.c:25206:57: warning: conversion from 'unsigned int' to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25206 |             table_index = do_uniprop_match(lookup_name, lookup_len);
      |                                                         ^~~~~~~~~~
re_comp.c:25241:48: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25241 |                 SSize_t value_len = lookup_len - equals_pos;
      |                                                ^
re_comp.c:25241:37: warning: conversion to 'ssize_t' {aka 'int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
25241 |                 SSize_t value_len = lookup_len - equals_pos;
      |                                     ^~~~~~~~~~
re_comp.c:25246:33: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
25246 |                                 value_len)
      |                                 ^~~~~~~~~
../../embed.h:335:57: note: in definition of macro 'my_atof3'
  335 | #define my_atof3(a,b,c)         Perl_my_atof3(aTHX_ a,b,c)
      |                                                         ^
re_comp.c:25272:55: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
25272 |                         SSize_t excess_exponent_len = strlen(cur_ptr) - 2;
      |                                                       ^~~~~~
re_comp.c:25277:53: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
25277 |                             SSize_t leading_zeros = strspn(cur_ptr, "0");
      |                                                     ^~~~~~
re_comp.c:25283:54: warning: conversion to 'size_t' {aka 'unsigned int'} from 'ssize_t' {aka 'int'} may change the sign of the result [-Wsign-conversion]
25283 |                                      strlen(cur_ptr) - excess_leading_zeros
      |                                                      ^
../../handy.h:2790:131: note: in definition of macro 'Move'
 2790 | #define Move(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
      |                                                                                                                                   ^
re_comp.c:25304:28: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25304 |                 lookup_len -= equals_pos;
      |                            ^~
re_comp.c:25328:28: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
25328 |                 lookup_len -= slash_pos;
      |                            ^~
re_comp.c:25370:55: warning: conversion from 'size_t' {aka 'unsigned int'} to 'U16' {aka 'const short unsigned int'} may change value [-Wconversion]
25370 |             table_index = do_uniprop_match(canonical, strlen(canonical));
      |                                                       ^~~~~~~~~~~~~~~~~
re_comp.c:25390:33: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25390 |         Size_t warning_offset = table_index / MAX_UNI_KEYWORD_INDEX;
      |                                 ^~~~~~~~~~~
re_comp.c:25450:65: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25450 |                 pu_definition = newSVpvn(pos, strchr(pos, '\a') - pos);
      |                                               ~~~~~~~~~~~~~~~~~~^~~~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
re_comp.c: In function 'S_handle_names_wildcard':
re_comp.c:25689:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25689 |                                           SvEND(names_string) - this_name_end);
re_comp.c:25698:63: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25698 |                                           SvEND(names_string) - this_name_end);
re_comp.c:25704:58: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25704 |                                          this_name_start - all_names_start);
      |                                          ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
re_comp.c:25733:57: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25733 |                                                cp_start - all_names_start);
      |                                                ~~~~~~~~~^~~~~~~~~~~~~~~~~
re_comp.c:25754:22: warning: conversion to 'UV' {aka 'long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25754 |                 cp = (XDIGIT_VALUE(cp_start[0]) << 16)
      |                      ^
re_comp.c:25856:62: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
25856 |                                                              cp);
      |                                                              ^~
../../embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
re_comp.c:25912:76: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'IV' {aka 'long int'} may change the sign of the result [-Wsign-conversion]
25912 |                     *prop_definition = add_cp_to_invlist(*prop_definition, j);
      |                                                                            ^
../../embed.h:1142:61: note: in definition of macro 'add_cp_to_invlist'
 1142 | #define add_cp_to_invlist(a,b)  S_add_cp_to_invlist(aTHX_ a,b)
      |                                                             ^
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp" -noprototypes -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/re/../../lib/ExtUtils/typemap'  re.xs > re.xsc
mv re.xsc re.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.43\" -DXS_VERSION=\"0.43\" -fPIC -Wno-unused-function "-I../.."  -DPERL_EXT_RE_BUILD -DPERL_EXT_RE_DEBUG -DPERL_EXT re.c
In file included from ../../perl.h:7246,
                 from re.xs:8:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
In file included from ../../perl.h:3859:
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1408:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1408 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:1992:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 1992 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR_flags':
../../inline.h:2261:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2261 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_is_utf8_valid_partial_char_flags':
../../inline.h:2347:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-21761' to '4294945535' [-Wsign-conversion]
 2347 |     assert(0 == (flags & ~(UTF8_DISALLOW_ILLEGAL_INTERCHANGE
      |                        ^
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:5841:
re.xs: In function 'XS_re_optimization':
re.xs:185:36: warning: conversion to 'IV' {aka 'const long int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  185 |     hv_stores(hv, "gofs", newSViv(r->gofs));
      |                                   ~^~~~~~
../../embed.h:249:78: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                              ^
../../hv.h:531:5: note: in expansion of macro 'hv_store'
  531 |     hv_store((hv), ASSERT_IS_LITERAL(key), (sizeof(key)-1), (val), 0)
      |     ^~~~~~~~
re.xs:185:5: note: in expansion of macro 'hv_stores'
  185 |     hv_stores(hv, "gofs", newSViv(r->gofs));
      |     ^~~~~~~~~
re.xs:185:27: note: in expansion of macro 'newSViv'
  185 |     hv_stores(hv, "gofs", newSViv(r->gofs));
      |                           ^~~~~~~
In file included from ../../perl.h:4161:
re.c: In function 'boot_re':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:396:23: note: in expansion of macro 'HS_KEY'
  396 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)
      |                       ^~~~~~
../../XSUB.h:186:18: note: in expansion of macro 'XS_SETXSUBFN_POPMARK'
  186 |         I32 ax = XS_SETXSUBFN_POPMARK;  \
      |                  ^~~~~~~~~~~~~~~~~~~~
re.xs:15:32: note: in expansion of macro 'dXSBOOTARGSNOVERCHK'
   15 | #define dXSBOOTARGSXSAPIVERCHK dXSBOOTARGSNOVERCHK
      |                                ^~~~~~~~~~~~~~~~~~~
re.c:440:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  440 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:396:23: note: in expansion of macro 'HS_KEY'
  396 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "", "") | HSf_NOCHK, HS_CXT, __FILE__)
      |                       ^~~~~~
../../XSUB.h:186:18: note: in expansion of macro 'XS_SETXSUBFN_POPMARK'
  186 |         I32 ax = XS_SETXSUBFN_POPMARK;  \
      |                  ^~~~~~~~~~~~~~~~~~~~
re.xs:15:32: note: in expansion of macro 'dXSBOOTARGSNOVERCHK'
   15 | #define dXSBOOTARGSXSAPIVERCHK dXSBOOTARGSNOVERCHK
      |                                ^~~~~~~~~~~~~~~~~~~
re.c:440:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  440 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/re/re.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  re_exec.o re_comp.o re.o  -o ../../lib/auto/re/re.so  \
      \
  
chmod 755 ../../lib/auto/re/re.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/re'
cd ext/SDBM_File/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for SDBM_File
make -C ext/SDBM_File/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/SDBM_File'
cp SDBM_File.pm ../../lib/SDBM_File.pm
Running Mkbootstrap for SDBM_File ()
chmod 644 "SDBM_File.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/SDBM_File/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- SDBM_File.bs ../../lib/auto/SDBM_File/SDBM_File.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/SDBM_File/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/SDBM_File/typemap'  SDBM_File.xs > SDBM_File.xsc
mv SDBM_File.xsc SDBM_File.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I../.. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."  -DSDBM -DDUFF SDBM_File.c
In file included from ../../perl.h:7246,
                 from SDBM_File.xs:3:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
SDBM_File.c: In function 'XS_SDBM_File_FETCH':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:299:13: note: in expansion of macro 'DBM_ckFilter'
  299 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
In file included from ../../perl.h:5841:
SDBM_File.c:309:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  309 |             sv_setpvn(RETVALSV, RETVAL.dptr, RETVAL.dsize);
      |                                              ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:310:13: note: in expansion of macro 'DBM_ckFilter'
  310 |             DBM_ckFilter(RETVALSV, filter[fetch_value],"filter_fetch_value");
      |             ^~~~~~~~~~~~
SDBM_File.c: In function 'XS_SDBM_File_STORE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:348:13: note: in expansion of macro 'DBM_ckFilter'
  348 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:354:9: note: in expansion of macro 'DBM_ckFilter'
  354 |         DBM_ckFilter(ST(2), filter[store_value], "filter_store_value");
      |         ^~~~~~~~~~~~
SDBM_File.c: In function 'XS_SDBM_File_DELETE':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:418:13: note: in expansion of macro 'DBM_ckFilter'
  418 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
SDBM_File.c: In function 'XS_SDBM_File_EXISTS':
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:460:13: note: in expansion of macro 'DBM_ckFilter'
  460 |             DBM_ckFilter(ST(1), filter[store_key], "filter_store_key");
      |             ^~~~~~~~~~~~
SDBM_File.c: In function 'XS_SDBM_File_FIRSTKEY':
SDBM_File.c:502:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  502 |             sv_setpvn(RETVALSV, RETVAL.dptr, RETVAL.dsize);
      |                                              ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:503:13: note: in expansion of macro 'DBM_ckFilter'
  503 |             DBM_ckFilter(RETVALSV, filter[fetch_key],"filter_fetch_key");
      |             ^~~~~~~~~~~~
SDBM_File.c: In function 'XS_SDBM_File_NEXTKEY':
SDBM_File.c:539:52: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  539 |             sv_setpvn(RETVALSV, RETVAL.dptr, RETVAL.dsize);
      |                                              ~~~~~~^~~~~~
../../embed.h:698:58: note: in definition of macro 'sv_setpvn'
  698 | #define sv_setpvn(a,b,c)        Perl_sv_setpvn(aTHX_ a,b,c)
      |                                                          ^
../../sv.h:1150:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-524289' to '4294443007' [-Wsign-conversion]
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
../../sv.h:1150:46: note: in definition of macro 'SvTEMP_off'
 1150 | #define SvTEMP_off(sv)          (SvFLAGS(sv) &= ~SVs_TEMP)
      |                                              ^~
SDBM_File.c:540:13: note: in expansion of macro 'DBM_ckFilter'
  540 |             DBM_ckFilter(RETVALSV, filter[fetch_key],"filter_fetch_key");
      |             ^~~~~~~~~~~~
In file included from ../../perl.h:4161:
SDBM_File.c: In function 'boot_SDBM_File':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SDBM_File.c:625:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  625 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SDBM_File.c:625:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  625 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I../.. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."  -DSDBM -DDUFF hash.c
hash.c: In function 'sdbm_hash':
hash.c:46:16: warning: conversion to 'long int' from 'long unsigned int' may change the sign of the result [-Wsign-conversion]
   46 |         return n;
      |                ^
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I../.. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."  -DSDBM -DDUFF pair.c
pair.c: In function 'sdbm__fitpair':
pair.c:56:30: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
   56 |         free = off - (n + 1) * sizeof(short);
      |                              ^
pair.c:56:20: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
   56 |         free = off - (n + 1) * sizeof(short);
      |                    ^
pair.c:56:16: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
   56 |         free = off - (n + 1) * sizeof(short);
      |                ^~~
pair.c:57:14: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
   57 |         need += 2 * sizeof(short);
      |              ^~
pair.c:57:17: warning: conversion to 'int' from 'unsigned int' may change the sign of the result [-Wsign-conversion]
   57 |         need += 2 * sizeof(short);
      |                 ^
pair.c: In function 'sdbm__putpair':
pair.c:76:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   76 |         (void) memcpy(pag + off, key.dptr, key.dsize);
      |                                            ~~~^~~~~~
pair.c:77:22: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
   77 |         ino[n + 1] = off;
      |                      ^~~
pair.c:82:47: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   82 |         (void) memcpy(pag + off, val.dptr, val.dsize);
      |                                            ~~~^~~~~~
pair.c:83:22: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
   83 |         ino[n + 2] = off;
      |                      ^~~
pair.c: In function 'sdbm__delpair':
pair.c:202:34: warning: conversion from 'int' to 'short int' may change value [-Wconversion]
  202 |                         ino[i] = ino[i + 2] + zoo;
      |                                  ^~~
In file included from pair.c:16:
pair.c: In function 'seepair':
pair.c:224:46: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  224 |                     memEQ(key, pag + ino[i], siz))
      |                                              ^~~
sdbm.h:193:39: note: in definition of macro 'memEQ'
  193 | #define memEQ(s1,s2,l) (!memcmp(s1,s2,l))
      |                                       ^
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c  -I../.. -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.15\" -DXS_VERSION=\"1.15\" -fPIC -Wno-unused-function "-I../.."  -DSDBM -DDUFF sdbm.c
sdbm.c: In function 'sdbm_prep':
sdbm.c:152:46: warning: conversion from '__off64_t' {aka 'long long int'} to 'long int' may change value [-Wconversion]
  152 |                                 db->maxbno = dstat.st_size * BYTESIZ;
      |                                              ^~~~~
rm -f ../../lib/auto/SDBM_File/SDBM_File.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  SDBM_File.o hash.o pair.o sdbm.o  -o ../../lib/auto/SDBM_File/SDBM_File.so  \
      \
  
chmod 755 ../../lib/auto/SDBM_File/SDBM_File.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/SDBM_File'
./miniperl_top make_ext_Makefile.pl ext/Sys-Hostname/Makefile.PL
Creating ext/Sys-Hostname/Makefile.PL for Sys::Hostname
cd ext/Sys-Hostname/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for Sys::Hostname
make -C ext/Sys-Hostname/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Sys-Hostname'
cp Hostname.pm ../../lib/Sys/Hostname.pm
Running Mkbootstrap for Hostname ()
chmod 644 "Hostname.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Sys-Hostname/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Hostname.bs ../../lib/auto/Sys/Hostname/Hostname.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Sys-Hostname/../../lib/ExtUtils/typemap'  Hostname.xs > Hostname.xsc
mv Hostname.xsc Hostname.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.24\" -DXS_VERSION=\"1.24\" -fPIC -Wno-unused-function "-I../.."   Hostname.c
In file included from ../../perl.h:7246,
                 from Hostname.xs:4:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
Hostname.c: In function 'boot_Sys__Hostname':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hostname.c:249:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  249 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hostname.c:249:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  249 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/Sys/Hostname/Hostname.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  Hostname.o  -o ../../lib/auto/Sys/Hostname/Hostname.so  \
      \
  
chmod 755 ../../lib/auto/Sys/Hostname/Hostname.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/Sys-Hostname'
cd ext/XS-APItest/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for XS::APItest
make -C ext/XS-APItest/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest'
cp APItest.pm ../../lib/XS/APItest.pm
Running Mkbootstrap for APItest ()
Writing APItest.bs
chmod 644 "APItest.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- APItest.bs ../../lib/auto/XS/APItest/APItest.bs 644
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/typemap'  APItest.xs > APItest.xsc
mv APItest.xsc APItest.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   APItest.c
In file included from ../../perl.h:7246,
                 from APItest.xs:10:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
APItest.xs: In function 'bitflip_key':
../../sv.h:1401:49: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1401 |                 (((XPV*)  SvANY(sv))->xpv_cur = (val)); } STMT_END
      |                                                 ^
APItest.xs:279:13: note: in expansion of macro 'SvCUR_set'
  279 |             SvCUR_set(newkey, new_p - new_p_orig);
      |             ^~~~~~~~~
In file included from ../../perl.h:5841:
APItest.xs: In function 'blockhook_csc_start':
APItest.xs:401:56: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  401 |             av_store(new_av, i, newSVsv(*av_fetch(cur, i, 0)));
      |                                                        ^
../../embed.h:71:57: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                         ^
../../sv.h:2424:21: note: in expansion of macro 'newSVsv_flags'
 2424 | #define newSVsv(sv) newSVsv_flags((sv), SV_GMAGIC|SV_NOSTEAL)
      |                     ^~~~~~~~~~~~~
APItest.xs:401:33: note: in expansion of macro 'newSVsv'
  401 |             av_store(new_av, i, newSVsv(*av_fetch(cur, i, 0)));
      |                                 ^~~~~~~
APItest.xs:401:42: note: in expansion of macro 'av_fetch'
  401 |             av_store(new_av, i, newSVsv(*av_fetch(cur, i, 0)));
      |                                          ^~~~~~~~
APItest.xs:401:30: warning: conversion to 'ssize_t' {aka 'int'} from 'size_t' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  401 |             av_store(new_av, i, newSVsv(*av_fetch(cur, i, 0)));
      |                              ^
../../embed.h:71:55: note: in definition of macro 'av_store'
   71 | #define av_store(a,b,c)         Perl_av_store(aTHX_ a,b,c)
      |                                                       ^
APItest.xs: In function 'THX_mkUNOP':
APItest.xs:610:23: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  610 |     unop->op_type   = (OPCODE)type;
      |                       ^
APItest.xs: In function 'THX_mkBINOP':
APItest.xs:621:27: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  621 |     binop->op_type      = (OPCODE)type;
      |                           ^
APItest.xs: In function 'THX_mkLISTOP':
APItest.xs:633:27: warning: conversion from 'short unsigned int' to 'short unsigned int:9' may change value [-Wconversion]
  633 |     listop->op_type     = (OPCODE)type;
      |                           ^
APItest.xs: In function 'THX_parse_var':
APItest.xs:821:37: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  821 |     varpos = pad_findmy_pvn(start, s-start, 0);
      |                                    ~^~~~~~
../../embed.h:445:61: note: in definition of macro 'pad_findmy_pvn'
  445 | #define pad_findmy_pvn(a,b,c)   Perl_pad_findmy_pvn(aTHX_ a,b,c)
      |                                                             ^
APItest.xs: In function 'THX_parse_rpn_expr':
APItest.xs:859:34: warning: conversion to 'long unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  859 |                     val = 10*val + (c - '0');
      |                                  ^
APItest.xs: In function 'THX_sv_cat_c':
APItest.xs:1161:25: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1161 |     sv_catpvn(sv, ds, d - ds);
      |                       ~~^~~~
../../embed.h:598:72: note: in definition of macro 'sv_catpvn_flags'
  598 | #define sv_catpvn_flags(a,b,c,d)        Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
      |                                                                        ^
APItest.xs:1161:5: note: in expansion of macro 'sv_catpvn'
 1161 |     sv_catpvn(sv, ds, d - ds);
      |     ^~~~~~~~~
APItest.xs: In function 'THX_parse_keyword_with_vars':
APItest.xs:1187:28: warning: conversion to 'UV' {aka 'long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1187 |         if (!isIDFIRST_uni(c)) {
      |                            ^
../../embed.h:42:65: note: in definition of macro '_is_uni_perl_idstart'
   42 | #define _is_uni_perl_idstart(a) Perl__is_uni_perl_idstart(aTHX_ a)
      |                                                                 ^
../../handy.h:2089:21: note: in expansion of macro '_generic_uvchr'
 2089 |                     _generic_uvchr(_CC_IDFIRST, _is_uni_perl_idstart, c)
      |                     ^~~~~~~~~~~~~~
../../handy.h:2117:33: note: in expansion of macro 'isIDFIRST_uvchr'
 2117 | #define isIDFIRST_uni(c)        isIDFIRST_uvchr(c)
      |                                 ^~~~~~~~~~~~~~~
APItest.xs:1187:14: note: in expansion of macro 'isIDFIRST_uni'
 1187 |         if (!isIDFIRST_uni(c)) {
      |              ^~~~~~~~~~~~~
APItest.xs:1196:27: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1196 |         sv_cat_c(varname, c);
      |                           ^
APItest.xs:1154:45: note: in definition of macro 'sv_cat_c'
 1154 | #define sv_cat_c(a,b) THX_sv_cat_c(aTHX_ a, b)
      |                                             ^
APItest.xs:1199:65: warning: conversion to 'UV' {aka 'long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1199 |         while (c = lex_peek_unichar(0), c != -1 && isIDCONT_uni(c)) {
      |                                                                 ^
../../embed.h:41:64: note: in definition of macro '_is_uni_perl_idcont'
   41 | #define _is_uni_perl_idcont(a)  Perl__is_uni_perl_idcont(aTHX_ a)
      |                                                                ^
../../handy.h:2087:21: note: in expansion of macro '_generic_uvchr'
 2087 |                     _generic_uvchr(_CC_WORDCHAR, _is_uni_perl_idcont, c)
      |                     ^~~~~~~~~~~~~~
../../handy.h:2116:33: note: in expansion of macro 'isIDCONT_uvchr'
 2116 | #define isIDCONT_uni(c)         isIDCONT_uvchr(c)
      |                                 ^~~~~~~~~~~~~~
APItest.xs:1199:52: note: in expansion of macro 'isIDCONT_uni'
 1199 |         while (c = lex_peek_unichar(0), c != -1 && isIDCONT_uni(c)) {
      |                                                    ^~~~~~~~~~~~
APItest.xs:1200:31: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 1200 |             sv_cat_c(varname, c);
      |                               ^
APItest.xs:1154:45: note: in definition of macro 'sv_cat_c'
 1154 | #define sv_cat_c(a,b) THX_sv_cat_c(aTHX_ a, b)
      |                                             ^
APItest.xs: In function 'filter_call':
../../sv.h:1319:41: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~
../../sv.h:1319:41: note: in definition of macro 'SvCUR'
 1319 | #    define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
      |                                         ^~
APItest.xs: In function 'addissub_myck_add':
APItest.xs:1419:14: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-5' [-Wsign-conversion]
 1419 |     flags &= ~OPf_KIDS;
      |              ^
APItest.xs: In function 'XS_XS__APItest__utf8_test_uvchr_to_utf8_flags':
APItest.xs:1623:46: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1623 |         RETVAL = newSVpvn((char *) dest, ret - dest);
      |                                          ~~~~^~~~~~
../../embed.h:400:55: note: in definition of macro 'newSVpvn'
  400 | #define newSVpvn(a,b)           Perl_newSVpvn(aTHX_ a,b)
      |                                                       ^
APItest.xs: In function 'XS_XS__APItest__utf8_test_uvchr_to_utf8_flags_msgs':
APItest.xs:1645:57: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1645 |             av_push(RETVAL, newSVpvn((char *) dest, ret - dest));
      |                                                     ~~~~^~~~~~
../../embed.h:69:54: note: in definition of macro 'av_push'
   69 | #define av_push(a,b)            Perl_av_push(aTHX_ a,b)
      |                                                      ^
APItest.xs:1645:29: note: in expansion of macro 'newSVpvn'
 1645 |             av_push(RETVAL, newSVpvn((char *) dest, ret - dest));
      |                             ^~~~~~~~
In file included from ../../perl.h:4161:
APItest.xs: In function 'XS_XS__APItest__XSUB_XS_VERSION_defined':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:346:23: note: in expansion of macro 'HS_KEY'
  346 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__,   \
      |                       ^~~~~~
APItest.xs:1711:9: note: in expansion of macro 'XS_VERSION_BOOTCHECK'
 1711 |         XS_VERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:346:23: note: in expansion of macro 'HS_KEY'
  346 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__,   \
      |                       ^~~~~~
APItest.xs:1711:9: note: in expansion of macro 'XS_VERSION_BOOTCHECK'
 1711 |         XS_VERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~
APItest.xs: In function 'XS_XS__APItest__XSUB_XS_APIVERSION_valid':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:353:23: note: in expansion of macro 'HS_KEY'
  353 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""),    \
      |                       ^~~~~~
APItest.xs:1717:9: note: in expansion of macro 'XS_APIVERSION_BOOTCHECK'
 1717 |         XS_APIVERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:353:23: note: in expansion of macro 'HS_KEY'
  353 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""),    \
      |                       ^~~~~~
APItest.xs:1717:9: note: in expansion of macro 'XS_APIVERSION_BOOTCHECK'
 1717 |         XS_APIVERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4168:
APItest.xs: In function 'XS_XS__APItest__Hash_test_share_unshare_pvn':
APItest.xs:2027:27: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2027 |         p = sharepvn(pvx, len, hash);
      |                           ^~~
../../hv.h:425:34: note: in definition of macro 'HEK_KEY'
  425 | #define HEK_KEY(hek)            (hek)->hek_key
      |                                  ^~~
../../hv.h:468:46: note: in expansion of macro 'share_hek'
  468 | #define Perl_sharepvn(pv, len, hash) HEK_KEY(share_hek(pv, len, hash))
      |                                              ^~~~~~~~~
../../hv.h:469:38: note: in expansion of macro 'Perl_sharepvn'
  469 | #define sharepvn(pv, len, hash)      Perl_sharepvn(pv, len, hash)
      |                                      ^~~~~~~~~~~~~
APItest.xs:2027:13: note: in expansion of macro 'sharepvn'
 2027 |         p = sharepvn(pvx, len, hash);
      |             ^~~~~~~~
APItest.xs:2029:23: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
 2029 |         unsharepvn(p, len, hash);
      |                       ^~~
../../embed.h:752:57: note: in definition of macro 'unsharepvn'
  752 | #define unsharepvn(a,b,c)       Perl_unsharepvn(aTHX_ a,b,c)
      |                                                         ^
APItest.xs: In function 'XS_XS__APItest__Hash_test_force_keys':
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
../../hv.h:391:33: note: in expansion of macro 'HEK_LEN'
  391 | #define HeKLEN(he)              HEK_LEN(HeKEY_hek(he))
      |                                 ^~~~~~~
../../hv.h:413:50: note: in expansion of macro 'HeKLEN'
  413 |                                                  HeKLEN(he),            \
      |                                                  ^~~~~~
APItest.xs:2067:22: note: in expansion of macro 'HeSVKEY_force'
 2067 |             SV *sv = HeSVKEY_force(he);
      |                      ^~~~~~~~~~~~~
In file included from ../../perl.h:5782:
APItest.c: In function 'XS_XS__APItest__PtrTable_fetch':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:3289:9: note: in expansion of macro 'PUSHu'
 3289 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:4167:
APItest.xs: In function 'XS_XS__APItest_xop_clear':
../../op.h:949:50: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-2' to '4294967294' [-Wsign-conversion]
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: note: in definition of macro 'XopDISABLE'
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-3' to '4294967293' [-Wsign-conversion]
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: note: in definition of macro 'XopDISABLE'
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: note: in definition of macro 'XopDISABLE'
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-9' to '4294967287' [-Wsign-conversion]
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
../../op.h:949:50: note: in definition of macro 'XopDISABLE'
  949 | #define XopDISABLE(xop, which) ((xop)->xop_flags &= ~XOPf_ ## which)
      |                                                  ^~
APItest.xs: In function 'XS_XS__APItest_newCONSTSUB':
APItest.xs:2671:40: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2671 |                  stash, pv, len, flags | SvUTF8(name), SvOK(sv) ? SvREFCNT_inc(sv) : NULL
      |                                        ^
../../embed.h:355:76: note: in definition of macro 'newCONSTSUB_flags'
  355 | #define newCONSTSUB_flags(a,b,c,d,e)    Perl_newCONSTSUB_flags(aTHX_ a,b,c,d,e)
      |                                                                            ^
APItest.xs: In function 'XS_XS__APItest_gv_init_type':
../../hv.h:507:44: warning: conversion to 'I32' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  507 |     ((SV**) hv_common_key_len((hv), (key), (klen), (lval)               \
      |                                            ^~~~~~
../../embed.h:249:74: note: in definition of macro 'hv_common_key_len'
  249 | #define hv_common_key_len(a,b,c,d,e,f)  Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
      |                                                                          ^
APItest.xs:2689:25: note: in expansion of macro 'hv_fetch'
 2689 |         GV *gv = *(GV**)hv_fetch(PL_defstash, name, len, TRUE);
      |                         ^~~~~~~~
APItest.xs:2699:52: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2699 |                gv_init_sv(gv, PL_defstash, namesv, flags);
      |                                                    ^~~~~
../../embed.h:240:61: note: in definition of macro 'gv_init_sv'
  240 | #define gv_init_sv(a,b,c,d)     Perl_gv_init_sv(aTHX_ a,b,c,d)
      |                                                             ^
APItest.xs:2702:56: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2702 |                gv_init_pv(gv, PL_defstash, name, flags | SvUTF8(namesv));
      |                                                        ^
../../embed.h:238:61: note: in definition of macro 'gv_init_pv'
  238 | #define gv_init_pv(a,b,c,d)     Perl_gv_init_pv(aTHX_ a,b,c,d)
      |                                                             ^
APItest.xs:2705:62: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2705 |                gv_init_pvn(gv, PL_defstash, name, len, flags | SvUTF8(namesv));
      |                                                              ^
../../embed.h:239:64: note: in definition of macro 'gv_init_pvn'
  239 | #define gv_init_pvn(a,b,c,d,e)  Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
      |                                                                ^
APItest.xs: In function 'XS_XS__APItest_gv_fetchmeth_type':
APItest.xs:2727:61: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2727 |                gv = gv_fetchmeth_sv(stash, methname, level, flags);
      |                                                             ^~~~~
../../embed.h:224:74: note: in definition of macro 'gv_fetchmeth_sv'
  224 | #define gv_fetchmeth_sv(a,b,c,d)        Perl_gv_fetchmeth_sv(aTHX_ a,b,c,d)
      |                                                                          ^
APItest.xs:2730:63: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2730 |                gv = gv_fetchmeth_pv(stash, name, level, flags | SvUTF8(methname));
      |                                                               ^
../../embed.h:220:74: note: in definition of macro 'gv_fetchmeth_pv'
  220 | #define gv_fetchmeth_pv(a,b,c,d)        Perl_gv_fetchmeth_pv(aTHX_ a,b,c,d)
      |                                                                          ^
APItest.xs:2733:69: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2733 |                gv = gv_fetchmeth_pvn(stash, name, len, level, flags | SvUTF8(methname));
      |                                                                     ^
../../embed.h:222:77: note: in definition of macro 'gv_fetchmeth_pvn'
  222 | #define gv_fetchmeth_pvn(a,b,c,d,e)     Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
      |                                                                             ^
APItest.xs: In function 'XS_XS__APItest_gv_fetchmeth_autoload_type':
APItest.xs:2755:70: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2755 |                gv = gv_fetchmeth_sv_autoload(stash, methname, level, flags);
      |                                                                      ^~~~~
../../embed.h:225:91: note: in definition of macro 'gv_fetchmeth_sv_autoload'
  225 | #define gv_fetchmeth_sv_autoload(a,b,c,d)       Perl_gv_fetchmeth_sv_autoload(aTHX_ a,b,c,d)
      |                                                                                           ^
APItest.xs:2758:72: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2758 |                gv = gv_fetchmeth_pv_autoload(stash, name, level, flags | SvUTF8(methname));
      |                                                                        ^
../../embed.h:221:91: note: in definition of macro 'gv_fetchmeth_pv_autoload'
  221 | #define gv_fetchmeth_pv_autoload(a,b,c,d)       Perl_gv_fetchmeth_pv_autoload(aTHX_ a,b,c,d)
      |                                                                                           ^
APItest.xs:2761:78: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2761 |                gv = gv_fetchmeth_pvn_autoload(stash, name, len, level, flags | SvUTF8(methname));
      |                                                                              ^
../../embed.h:223:94: note: in definition of macro 'gv_fetchmeth_pvn_autoload'
  223 | #define gv_fetchmeth_pvn_autoload(a,b,c,d,e)    Perl_gv_fetchmeth_pvn_autoload(aTHX_ a,b,c,d,e)
      |                                                                                              ^
APItest.xs: In function 'XS_XS__APItest_gv_fetchmethod_flags_type':
APItest.xs:2777:72: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2777 |                gv = gv_fetchmethod_flags(stash, SvPVX_const(methname), flags);
      |                                                                        ^~~~~
../../embed.h:227:80: note: in definition of macro 'gv_fetchmethod_pv_flags'
  227 | #define gv_fetchmethod_pv_flags(a,b,c)  Perl_gv_fetchmethod_pv_flags(aTHX_ a,b,c)
      |                                                                                ^
APItest.xs:2777:21: note: in expansion of macro 'gv_fetchmethod_flags'
 2777 |                gv = gv_fetchmethod_flags(stash, SvPVX_const(methname), flags);
      |                     ^~~~~~~~~~~~~~~~~~~~
APItest.xs:2780:62: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2780 |                gv = gv_fetchmethod_sv_flags(stash, methname, flags);
      |                                                              ^~~~~
../../embed.h:229:80: note: in definition of macro 'gv_fetchmethod_sv_flags'
  229 | #define gv_fetchmethod_sv_flags(a,b,c)  Perl_gv_fetchmethod_sv_flags(aTHX_ a,b,c)
      |                                                                                ^
APItest.xs:2783:80: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2783 |                gv = gv_fetchmethod_pv_flags(stash, SvPV_nolen(methname), flags | SvUTF8(methname));
      |                                                                                ^
../../embed.h:227:80: note: in definition of macro 'gv_fetchmethod_pv_flags'
  227 | #define gv_fetchmethod_pv_flags(a,b,c)  Perl_gv_fetchmethod_pv_flags(aTHX_ a,b,c)
      |                                                                                ^
APItest.xs:2788:70: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2788 |                gv = gv_fetchmethod_pvn_flags(stash, name, len, flags | SvUTF8(methname));
      |                                                                      ^
../../embed.h:228:91: note: in definition of macro 'gv_fetchmethod_pvn_flags'
  228 | #define gv_fetchmethod_pvn_flags(a,b,c,d)       Perl_gv_fetchmethod_pvn_flags(aTHX_ a,b,c,d)
      |                                                                                           ^
APItest.xs:2793:46: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2793 |                                              flags, SvUTF8(methname));
      |                                              ^~~~~
../../embed.h:228:89: note: in definition of macro 'gv_fetchmethod_pvn_flags'
  228 | #define gv_fetchmethod_pvn_flags(a,b,c,d)       Perl_gv_fetchmethod_pvn_flags(aTHX_ a,b,c,d)
      |                                                                                         ^
APItest.xs: In function 'XS_XS__APItest_gv_autoload_type':
APItest.xs:2814:53: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2814 |                gv = gv_autoload_sv(stash, methname, flags);
      |                                                     ^~~~~
../../embed.h:210:63: note: in definition of macro 'gv_autoload_sv'
  210 | #define gv_autoload_sv(a,b,c)   Perl_gv_autoload_sv(aTHX_ a,b,c)
      |                                                               ^
APItest.xs:2817:55: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2817 |                gv = gv_autoload_pv(stash, name, flags | SvUTF8(methname));
      |                                                       ^
../../embed.h:208:63: note: in definition of macro 'gv_autoload_pv'
  208 | #define gv_autoload_pv(a,b,c)   Perl_gv_autoload_pv(aTHX_ a,b,c)
      |                                                               ^
APItest.xs:2820:61: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 2820 |                gv = gv_autoload_pvn(stash, name, len, flags | SvUTF8(methname));
      |                                                             ^
../../embed.h:209:74: note: in definition of macro 'gv_autoload_pvn'
  209 | #define gv_autoload_pvn(a,b,c,d)        Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
      |                                                                          ^
APItest.xs: In function 'XS_XS__APItest_my_exit':
APItest.xs:3134:17: warning: conversion to 'U32' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 3134 |         my_exit(exitcode);
      |                 ^~~~~~~~
../../embed.h:337:52: note: in definition of macro 'my_exit'
  337 | #define my_exit(a)              Perl_my_exit(aTHX_ a)
      |                                                    ^
APItest.c: In function 'XS_XS__APItest_first_byte':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:5234:9: note: in expansion of macro 'PUSHu'
 5234 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.xs: In function 'XS_XS__APItest_test_op_contextualize':
APItest.xs:3233:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 3233 |         o->op_flags &= ~OPf_WANT;
      |                        ^
APItest.xs:3240:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 3240 |         o->op_flags &= ~OPf_WANT;
      |                        ^
APItest.xs:3247:24: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-4' [-Wsign-conversion]
 3247 |         o->op_flags &= ~OPf_WANT;
      |                        ^
APItest.xs: In function 'XS_XS__APItest_test_rv2cv_op_cv':
APItest.xs:3269:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 3269 |         o->op_private &= ~OPpENTERSUB_AMPER;
      |                          ^
APItest.xs:3291:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 3291 |         o->op_private &= ~OPpENTERSUB_AMPER;
      |                          ^
APItest.xs:3302:26: warning: unsigned conversion from 'int' to 'U8' {aka 'unsigned char'} changes the value of '-9' [-Wsign-conversion]
 3302 |         o->op_private &= ~OPpENTERSUB_AMPER;
      |                          ^
APItest.c: In function 'XS_XS__APItest_SvIsCOW':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:6784:9: note: in expansion of macro 'PUSHu'
 6784 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_underscore_length':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:6873:9: note: in expansion of macro 'PUSHu'
 6873 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.xs: In function 'XS_XS__APItest_HvENAME':
APItest.xs:4254:17: warning: the comparison will always evaluate as 'true' for the address of 'hek_key' will never be NULL [-Waddress]
 4254 |     RETVAL = hv && HvENAME(hv)
      |                 ^~
../../hv.h:60:17: note: 'hek_key' declared here
   60 |      char       hek_key[1];        /* variable-length hash key */
      |                 ^~~~~~~
../../hv.h:340:64: warning: conversion to 'STRLEN' {aka 'const unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  339 |    ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) \
      |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  340 |                                  ? HEK_LEN(HvENAME_HEK_NN(hv)) : 0)
      |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
../../embed.h:401:61: note: in definition of macro 'newSVpvn_flags'
  401 | #define newSVpvn_flags(a,b,c)   Perl_newSVpvn_flags(aTHX_ a,b,c)
      |                                                             ^
../../hv.h:300:25: note: in expansion of macro 'HvENAMELEN_get'
  300 | #define HvENAMELEN(hv)  HvENAMELEN_get(hv)
      |                         ^~~~~~~~~~~~~~
APItest.xs:4256:31: note: in expansion of macro 'HvENAMELEN'
 4256 |                   HvENAME(hv),HvENAMELEN(hv),
      |                               ^~~~~~~~~~
APItest.xs: In function 'XS_XS__APItest_get_cv_flags':
APItest.xs:4542:40: warning: conversion to 'I32' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
 4542 |         RETVAL = get_cvn_flags(s, len, flags);
      |                                        ^~~~~
../../embed.h:191:62: note: in definition of macro 'get_cvn_flags'
  191 | #define get_cvn_flags(a,b,c)    Perl_get_cvn_flags(aTHX_ a,b,c)
      |                                                              ^
APItest.c: In function 'XS_XS__APItest__Magic_test_get_vtbl':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:8009:9: note: in expansion of macro 'PUSHu'
 8009 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from ../../perl.h:3003:
APItest.xs: In function 'XS_XS__APItest_test_isALPHA':
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
../../handy.h:1821:22: note: in expansion of macro 'isALPHA_A'
 1821 | #define isALPHA(c)   isALPHA_A(c)
      |                      ^~~~~~~~~
APItest.xs:5036:18: note: in expansion of macro 'isALPHA'
 5036 |         RETVAL = isALPHA(ord);
      |                  ^~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_isALPHA_A':
../../handy.h:1614:50: warning: unsigned conversion from 'int' to 'long unsigned int' changes value from '-33' to '4294967263' [-Wsign-conversion]
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                                                  ^
../../handy.h:1444:24: note: in definition of macro 'withinCOUNT_KNOWN_VALID_'
 1444 |     ((((WIDEST_UTYPE) (c)) - ASSERT_NOT_PTR(l))                             \
      |                        ^
../../handy.h:1453:36: note: in expansion of macro 'inRANGE_helper_'
 1453 |     : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u)))     \
      |                                    ^~~~~~~~~~~~~~~
../../handy.h:1614:28: note: in expansion of macro 'inRANGE'
 1614 | #     define isALPHA_A(c)  inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
      |                            ^~~~~~~
APItest.xs:5043:18: note: in expansion of macro 'isALPHA_A'
 5043 |         RETVAL = isALPHA_A(ord);
      |                  ^~~~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_isOCTAL':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
../../handy.h:2409:29: note: in expansion of macro 'isOCTAL_A'
 2409 | #define isOCTAL(c)          isOCTAL_A(c)
      |                             ^~~~~~~~~
APItest.xs:5389:18: note: in expansion of macro 'isOCTAL'
 5389 |         RETVAL = isOCTAL(ord);
      |                  ^~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_isOCTAL_A':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
APItest.xs:5396:18: note: in expansion of macro 'isOCTAL_A'
 5396 |         RETVAL = isOCTAL_A(ord);
      |                  ^~~~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_isOCTAL_L1':
../../handy.h:1486:60: warning: unsigned conversion from 'int' to 'long long unsigned int' changes value from '-8' to '18446744073709551608' [-Wsign-conversion]
 1486 | #define isOCTAL_A(c)  ((((WIDEST_UTYPE) ASSERT_NOT_PTR(c)) & ~7) == '0')
      |                                                            ^
../../handy.h:2410:29: note: in expansion of macro 'isOCTAL_A'
 2410 | #define isOCTAL_L1(c)       isOCTAL_A(c)
      |                             ^~~~~~~~~
APItest.xs:5403:18: note: in expansion of macro 'isOCTAL_L1'
 5403 |         RETVAL = isOCTAL_L1(ord);
      |                  ^~~~~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_UTF8_IS_REPLACEMENT':
../../perl.h:3871:45: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'long int' may change the sign of the result [-Wsign-conversion]
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                             ^~~~~~~~~~~~~~~~
../../perl.h:3871:45: note: in definition of macro 'EXPECT'
 3871 | #  define EXPECT(expr,val)                  __builtin_expect(expr,val)
      |                                             ^~~~~~~~~~~~~~~~
../../utf8.h:921:5: note: in expansion of macro 'UNLIKELY'
  921 |     UNLIKELY(                                                                \
      |     ^~~~~~~~
APItest.xs:6206:18: note: in expansion of macro 'UTF8_IS_REPLACEMENT'
 6206 |         RETVAL = UTF8_IS_REPLACEMENT(s, s + len);
      |                  ^~~~~~~~~~~~~~~~~~~
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11649:9: note: in expansion of macro 'PUSHu'
11649 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_OFFUNISKIP':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11689:9: note: in expansion of macro 'PUSHu'
11689 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_UVCHR_SKIP':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11767:9: note: in expansion of macro 'PUSHu'
11767 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_UTF8_SKIP':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11788:9: note: in expansion of macro 'PUSHu'
11788 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_isUTF8_CHAR':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11925:9: note: in expansion of macro 'PUSHu'
11925 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_isUTF8_CHAR_flags':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11950:9: note: in expansion of macro 'PUSHu'
11950 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_isSTRICT_UTF8_CHAR':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11973:9: note: in expansion of macro 'PUSHu'
11973 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_isC9_STRICT_UTF8_CHAR':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:11996:9: note: in expansion of macro 'PUSHu'
11996 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_variant_under_utf8_count':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12121:9: note: in expansion of macro 'PUSHu'
12121 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_utf8_length':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12146:9: note: in expansion of macro 'PUSHu'
12146 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toLOWER':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12643:9: note: in expansion of macro 'PUSHu'
12643 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toLOWER_L1':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12664:9: note: in expansion of macro 'PUSHu'
12664 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toLOWER_LC':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12685:9: note: in expansion of macro 'PUSHu'
12685 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toFOLD':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12833:9: note: in expansion of macro 'PUSHu'
12833 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toFOLD_LC':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:12854:9: note: in expansion of macro 'PUSHu'
12854 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toUPPER':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13002:9: note: in expansion of macro 'PUSHu'
13002 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toUPPER_LC':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13023:9: note: in expansion of macro 'PUSHu'
13023 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest_test_toTITLE':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13171:9: note: in expansion of macro 'PUSHu'
13171 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.xs: In function 'XS_XS__APItest_test_delimcpy':
APItest.xs:6928:33: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6928 |         av_push(RETVAL, newSVuv(retlen));
      |                                 ^~~~~~
../../embed.h:69:54: note: in definition of macro 'av_push'
   69 | #define av_push(a,b)            Perl_av_push(aTHX_ a,b)
      |                                                      ^
APItest.xs:6928:25: note: in expansion of macro 'newSVuv'
 6928 |         av_push(RETVAL, newSVuv(retlen));
      |                         ^~~~~~~
APItest.xs:6929:53: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6929 |         av_push(RETVAL, newSVuv(from_pos_after_copy - from));
      |                                 ~~~~~~~~~~~~~~~~~~~~^~~~~~
../../embed.h:69:54: note: in definition of macro 'av_push'
   69 | #define av_push(a,b)            Perl_av_push(aTHX_ a,b)
      |                                                      ^
APItest.xs:6929:25: note: in expansion of macro 'newSVuv'
 6929 |         av_push(RETVAL, newSVuv(from_pos_after_copy - from));
      |                         ^~~~~~~
APItest.xs: In function 'XS_XS__APItest_test_delimcpy_no_escape':
APItest.xs:6954:29: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
 6954 |         av_push(av, newSVuv(retlen));
      |                             ^~~~~~
../../embed.h:69:54: note: in definition of macro 'av_push'
   69 | #define av_push(a,b)            Perl_av_push(aTHX_ a,b)
      |                                                      ^
APItest.xs:6954:21: note: in expansion of macro 'newSVuv'
 6954 |         av_push(av, newSVuv(retlen));
      |                     ^~~~~~~
APItest.xs:6955:49: warning: conversion to 'UV' {aka 'const long unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 6955 |         av_push(av, newSVuv(from_pos_after_copy - from));
      |                             ~~~~~~~~~~~~~~~~~~~~^~~~~~
../../embed.h:69:54: note: in definition of macro 'av_push'
   69 | #define av_push(a,b)            Perl_av_push(aTHX_ a,b)
      |                                                      ^
APItest.xs:6955:21: note: in expansion of macro 'newSVuv'
 6955 |         av_push(av, newSVuv(from_pos_after_copy - from));
      |                     ^~~~~~~
APItest.c: In function 'XS_XS__APItest__HvMacro_u8_to_u16_le':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13706:9: note: in expansion of macro 'PUSHu'
13706 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest__HvMacro_rotl32':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13731:9: note: in expansion of macro 'PUSHu'
13731 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'XS_XS__APItest__HvMacro_rotr32':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
APItest.c:13756:9: note: in expansion of macro 'PUSHu'
13756 |         PUSHu((UV)RETVAL);
      |         ^~~~~
APItest.c: In function 'boot_XS__APItest':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
APItest.c:14374:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
14374 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
APItest.c:14374:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
14374 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../../perl.h:4165:
../../cv.h:179:46: warning: unsigned conversion from 'int' to 'cv_flags_t' {aka 'unsigned int'} changes value from '-5' to '4294967291' [-Wsign-conversion]
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../cv.h:179:46: note: in definition of macro 'CvCONST_off'
  179 | #define CvCONST_off(cv)         (CvFLAGS(cv) &= ~CVf_CONST)
      |                                              ^~
../../hv.h:424:38: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  424 | #define HEK_LEN(hek)            (hek)->hek_len
      |                                 ~~~~~^~~~~~~~~
../../embed.h:248:68: note: in definition of macro 'hv_common'
  248 | #define hv_common(a,b,c,d,e,f,g,h)      Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
      |                                                                    ^
./const-xs.inc:236:32: note: in expansion of macro 'HEK_LEN'
  236 |                                HEK_LEN(hek), HEK_FLAGS(hek), HV_FETCH_ISSTORE,
      |                                ^~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/typemap'  XSUB-undef-XS_VERSION.xs > XSUB-undef-XS_VERSION.xsc
mv XSUB-undef-XS_VERSION.xsc XSUB-undef-XS_VERSION.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   XSUB-undef-XS_VERSION.c
In file included from ../../perl.h:7246,
                 from XSUB-undef-XS_VERSION.xs:2:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
XSUB-undef-XS_VERSION.c: In function 'boot_XS__APItest__XSUB':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:380:23: note: in expansion of macro 'HS_KEY'
  380 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, ""),      \
      |                       ^~~~~~
../../XSUB.h:388:54: note: in expansion of macro 'XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  388 | #  define XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XSUB-undef-XS_VERSION.c:200:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  200 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:380:23: note: in expansion of macro 'HS_KEY'
  380 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, ""),      \
      |                       ^~~~~~
../../XSUB.h:388:54: note: in expansion of macro 'XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  388 | #  define XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK XS_APIVERSION_SETXSUBFN_POPMARK_BOOTCHECK
      |                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XSUB-undef-XS_VERSION.c:200:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  200 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/../../lib/ExtUtils/typemap' -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest/typemap'  XSUB-redefined-macros.xs > XSUB-redefined-macros.xsc
mv XSUB-redefined-macros.xsc XSUB-redefined-macros.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   XSUB-redefined-macros.c
In file included from ../../perl.h:7246,
                 from XSUB-redefined-macros.xs:2:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:4161:
XSUB-redefined-macros.xs: In function 'XS_XS__APItest__XSUB_XS_VERSION_empty':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:346:23: note: in expansion of macro 'HS_KEY'
  346 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__,   \
      |                       ^~~~~~
XSUB-redefined-macros.xs:22:9: note: in expansion of macro 'XS_VERSION_BOOTCHECK'
   22 |         XS_VERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:346:23: note: in expansion of macro 'HS_KEY'
  346 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "", XS_VERSION), HS_CXT, __FILE__,   \
      |                       ^~~~~~
XSUB-redefined-macros.xs:22:9: note: in expansion of macro 'XS_VERSION_BOOTCHECK'
   22 |         XS_VERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~
XSUB-redefined-macros.xs: In function 'XS_XS__APItest__XSUB_XS_APIVERSION_invalid':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:353:23: note: in expansion of macro 'HS_KEY'
  353 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""),    \
      |                       ^~~~~~
XSUB-redefined-macros.xs:28:9: note: in expansion of macro 'XS_APIVERSION_BOOTCHECK'
   28 |         XS_APIVERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:353:23: note: in expansion of macro 'HS_KEY'
  353 |     Perl_xs_handshake(HS_KEY(FALSE, FALSE, "v" PERL_API_VERSION_STRING, ""),    \
      |                       ^~~~~~
XSUB-redefined-macros.xs:28:9: note: in expansion of macro 'XS_APIVERSION_BOOTCHECK'
   28 |         XS_APIVERSION_BOOTCHECK;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
XSUB-redefined-macros.c: In function 'boot_XS__APItest__XSUB1':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XSUB-redefined-macros.c:222:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  222 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XSUB-redefined-macros.c:222:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
  222 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   core.c
In file included from ../../perl.h:7246,
                 from core_or_not.inc:4,
                 from core.c:2:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
../../inline.h: In function 'S_strip_spaces':
../../inline.h:203:12: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
  203 |     *len = tmps - SvPVX(tmpsv);
      |            ^~~~
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'S_sv_or_pv_pos_u2b':
../../inline.h:474:41: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  474 |         U8 *hopped = utf8_hop((U8 *)pv, pos);
      |                                         ^~~
../../inline.h:475:53: warning: conversion to 'ssize_t' {aka 'int'} from 'STRLEN' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  475 |         if (lenp) *lenp = (STRLEN)(utf8_hop(hopped, *lenp) - hopped);
      |                                                     ^~~~~
../../inline.h: In function 'Perl_is_utf8_non_invariant_string':
../../inline.h:1279:46: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1279 |     return is_utf8_string(first_variant, len - (first_variant - s));
      |                                              ^
../../inline.h:1237:58: note: in definition of macro 'is_utf8_string'
 1237 | #define is_utf8_string(s, len)  is_utf8_string_loclen(s, len, NULL, NULL)
      |                                                          ^~~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   exception.c
In file included from ../../perl.h:7246,
                 from exception.c:2:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=   -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wno-deprecated-declarations -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"1.22\" -DXS_VERSION=\"1.22\" -fPIC -Wno-unused-function "-I../.."   notcore.c
In file included from ../../perl.h:7246,
                 from core_or_not.inc:4,
                 from notcore.c:2:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/XS/APItest/APItest.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  APItest.o XSUB-undef-XS_VERSION.o XSUB-redefined-macros.o core.o exception.o notcore.o  -o ../../lib/auto/XS/APItest/APItest.so  \
      \
  
chmod 755 ../../lib/auto/XS/APItest/APItest.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-APItest'
cd ext/XS-Typemap/ && ../../miniperl_top -I../../lib Makefile.PL \
 INSTALLDIRS=perl INSTALLMAN1DIR=none INSTALLMAN3DIR=none \
 PERL_CORE=1 LIBPERL_A=libperl.so.5.36.0 PERL="../../miniperl_top"
Generating a Unix-style Makefile
Writing Makefile for XS::Typemap
make -C ext/XS-Typemap/ PERL_CORE=1 LIBPERL=libperl.so.5.36.0 LINKTYPE=dynamic
make[2]: Entering directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-Typemap'
cp Typemap.pm ../../lib/XS/Typemap.pm
Running Mkbootstrap for Typemap ()
chmod 644 "Typemap.bs"
/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-Typemap/../../miniperl_top "-I../../lib" -MExtUtils::Command::MM -e 'cp_nonempty' -- Typemap.bs ../../lib/auto/XS/Typemap/Typemap.bs 644
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.19\" -DXS_VERSION=\"0.19\" -fPIC -Wno-unused-function "-I../.."   stdio.c
"../../miniperl_top" "-I../../lib" "../../lib/ExtUtils/xsubpp"  -typemap '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-Typemap/../../lib/ExtUtils/typemap'  Typemap.xs > Typemap.xsc
mv Typemap.xsc Typemap.c
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot -c   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0 -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0 -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot= -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native= -Wconversion -Wno-error -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -Wall -Werror=pointer-arith -Werror=vla -Wextra -Wno-long-long -Wno-declaration-after-statement -Wc++-compat -Wwrite-strings -fwrapv -fno-strict-aliasing   -DVERSION=\"0.19\" -DXS_VERSION=\"0.19\" -fPIC -Wno-unused-function "-I../.."   Typemap.c
In file included from ../../perl.h:7246,
                 from Typemap.xs:12:
../../inline.h: In function 'Perl_av_count':
../../inline.h:57:23: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
   57 |     return AvFILL(av) + 1;
In file included from ../../perl.h:4159:
../../inline.h: In function 'Perl_SvAMAGIC_off':
../../sv.h:1037:46: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-268435457' to '4026531839' [-Wsign-conversion]
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../sv.h:1037:46: note: in definition of macro 'HvAMAGIC_off'
 1037 | #define HvAMAGIC_off(hv)        (SvFLAGS(hv) &=~ SVf_AMAGIC)
      |                                              ^~
../../inline.h: In function 'Perl_SvPADSTALE_off':
../../inline.h:466:24: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-262145' to '4294705151' [-Wsign-conversion]
  466 |     return SvFLAGS(sv) &= ~SVs_PADSTALE;
      |                        ^~
../../inline.h: In function 'Perl_is_utf8_string_flags':
../../inline.h:1419:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1419 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:1425:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 1425 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h: In function 'Perl_is_utf8_string_loclen':
../../inline.h:1501:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1501 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_isUTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1667:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1667 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isSTRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1737:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1737 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_isC9_STRICT_UTF8_CHAR':
../../inline.h:1588:43: warning: conversion to 'size_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1588 | #define DFA_RETURN_SUCCESS_      return s - s0
      |                                         ~~^~~~
../../inline.h:1611:17: note: in definition of macro 'PERL_IS_UTF8_CHAR_DFA'
 1611 |                 accept_action;                                              \
      |                 ^~~~~~~~~~~~~
../../inline.h:1792:27: note: in expansion of macro 'DFA_RETURN_SUCCESS_'
 1792 |                           DFA_RETURN_SUCCESS_,
      |                           ^~~~~~~~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_strict_utf8_string_loclen':
../../inline.h:1852:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1852 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_c9strict_utf8_string_loclen':
../../inline.h:1929:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 1929 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_is_utf8_string_loclen_flags':
../../inline.h:2003:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2003 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2009:16: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-16385' to '4294950911' [-Wsign-conversion]
 2009 |     if ((flags & ~UTF8_DISALLOW_PERL_EXTENDED)
      |                ^
../../inline.h:2029:25: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2029 |         STRLEN outlen = first_variant - s;
      |                         ^~~~~~~~~~~~~
../../inline.h: In function 'Perl_utf8n_to_uvchr_msgs':
../../inline.h:2538:19: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2538 |         *retlen = s - s0 + 1;
      |                   ^
In file included from ../../regexp.h:21,
                 from ../../perl.h:4160:
../../inline.h: In function 'Perl_utf8_to_uvchr_buf_helper':
../../inline.h:2562:39: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                                  ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2562:16: note: in expansion of macro 'utf8n_to_uvchr'
 2562 |         return utf8n_to_uvchr(s, send - s, retlen,
      |                ^~~~~~~~~~~~~~
../../inline.h:2566:41: warning: conversion to 'STRLEN' {aka 'unsigned int'} from 'int' may change the sign of the result [-Wsign-conversion]
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                                    ~~~~~^~~
../../utf8.h:83:48: note: in definition of macro 'utf8n_to_uvchr_error'
   83 |                         utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)
      |                                                ^~~
../../inline.h:2566:18: note: in expansion of macro 'utf8n_to_uvchr'
 2566 |         UV ret = utf8n_to_uvchr(s, send - s, retlen, 0);
      |                  ^~~~~~~~~~~~~~
In file included from ../../perl.h:7247:
../../sv_inline.h: In function 'Perl_newSV_type':
../../sv_inline.h:373:17: warning: unsigned conversion from 'int' to 'U32' {aka 'unsigned int'} changes value from '-256' to '4294967040' [-Wsign-conversion]
  373 |     SvFLAGS(sv) &= ~SVTYPEMASK;
      |                 ^~
In file included from ../../perl.h:3003:
Typemap.xs: In function 'intArrayPtr':
../../handy.h:2761:99: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
 2761 | #define Newx(v,n,t)     (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
      |                                                                                                   ^
../../handy.h:2752:35: note: in definition of macro 'MEM_LOG_ALLOC'
 2752 | #define MEM_LOG_ALLOC(n,t,a)     (a)
      |                                   ^
Typemap.xs:65:5: note: in expansion of macro 'Newx'
   65 |     Newx(array, nelem, intArray);
      |     ^~~~
In file included from ../../perl.h:5841:
Typemap.xs: In function 'XS_unpack_anotherstructPtrPtr':
Typemap.xs:171:32: warning: conversion to 'ssize_t' {aka 'int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  171 |         elem = av_fetch(inary, i, 0);
      |                                ^
../../embed.h:62:55: note: in definition of macro 'av_fetch'
   62 | #define av_fetch(a,b,c)         Perl_av_fetch(aTHX_ a,b,c)
      |                                                       ^
In file included from ../../perl.h:5782:
Typemap.c: In function 'XS_XS__Typemap_T_UV':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Typemap.c:858:9: note: in expansion of macro 'PUSHu'
  858 |         PUSHu((UV)RETVAL);
      |         ^~~~~
Typemap.c: In function 'XS_XS__Typemap_T_U_INT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Typemap.c:1000:9: note: in expansion of macro 'PUSHu'
 1000 |         PUSHu((UV)RETVAL);
      |         ^~~~~
Typemap.c: In function 'XS_XS__Typemap_T_U_SHORT':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Typemap.c:1042:9: note: in expansion of macro 'PUSHu'
 1042 |         PUSHu((UV)RETVAL);
      |         ^~~~~
Typemap.c: In function 'XS_XS__Typemap_T_U_LONG':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Typemap.c:1084:9: note: in expansion of macro 'PUSHu'
 1084 |         PUSHu((UV)RETVAL);
      |         ^~~~~
Typemap.c: In function 'XS_XS__Typemap_T_U_CHAR':
../../pp.h:445:33: warning: conversion to 'IV' {aka 'long int'} from 'UV' {aka 'long unsigned int'} may change the sign of the result [-Wsign-conversion]
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
../../pp.h:445:33: note: in definition of macro 'TARGu'
  445 |             TARG->sv_u.svu_iv = TARGu_uv;                               \
      |                                 ^~~~~~~~
Typemap.c:1126:9: note: in expansion of macro 'PUSHu'
 1126 |         PUSHu((UV)RETVAL);
      |         ^~~~~
In file included from Typemap.xs:13:
Typemap.xs: In function 'XS_XS__Typemap_T_PACKEDARRAY_in':
../../XSUB.h:326:29: warning: conversion to 'IV' {aka 'const long int'} from 'unsigned int' may change the sign of the result [-Wsign-conversion]
  326 |         const IV tmpXSoff = (off);                      \
      |                             ^
Typemap.xs:868:3: note: in expansion of macro 'XSRETURN'
  868 |   XSRETURN(3*i);
      |   ^~~~~~~~
Typemap.xs: In function 'XS_XS__Typemap_T_PACKEDARRAY_out':
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:343:26: note: in definition of macro 'SvFLAGS'
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                          ^~
../../sv.h:1821:19: note: in expansion of macro 'SvIOK_nog'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                   ^~~~~~~~~
Typemap.xs:882:20: note: in expansion of macro 'SvIV'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                    ^~~~
Typemap.xs:882:25: note: in expansion of macro 'ST'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:342:26: note: in definition of macro 'SvANY'
  342 | #define SvANY(sv)       (sv)->sv_any
      |                          ^~
../../sv.h:1821:35: note: in expansion of macro 'SvIVX'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                   ^~~~~
Typemap.xs:882:20: note: in expansion of macro 'SvIV'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                    ^~~~
Typemap.xs:882:25: note: in expansion of macro 'ST'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../embed.h:581:57: note: in definition of macro 'sv_2iv_flags'
  581 | #define sv_2iv_flags(a,b)       Perl_sv_2iv_flags(aTHX_ a,b)
      |                                                         ^
../../sv.h:1821:47: note: in expansion of macro 'sv_2iv'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                               ^~~~~~
Typemap.xs:882:20: note: in expansion of macro 'SvIV'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                    ^~~~
Typemap.xs:882:25: note: in expansion of macro 'ST'
  882 |     RETVAL[i]->a = SvIV(ST(3*i));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:343:26: note: in definition of macro 'SvFLAGS'
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                          ^~
../../sv.h:1821:19: note: in expansion of macro 'SvIOK_nog'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                   ^~~~~~~~~
Typemap.xs:883:20: note: in expansion of macro 'SvIV'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                    ^~~~
Typemap.xs:883:25: note: in expansion of macro 'ST'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:342:26: note: in definition of macro 'SvANY'
  342 | #define SvANY(sv)       (sv)->sv_any
      |                          ^~
../../sv.h:1821:35: note: in expansion of macro 'SvIVX'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                   ^~~~~
Typemap.xs:883:20: note: in expansion of macro 'SvIV'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                    ^~~~
Typemap.xs:883:25: note: in expansion of macro 'ST'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../embed.h:581:57: note: in definition of macro 'sv_2iv_flags'
  581 | #define sv_2iv_flags(a,b)       Perl_sv_2iv_flags(aTHX_ a,b)
      |                                                         ^
../../sv.h:1821:47: note: in expansion of macro 'sv_2iv'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                               ^~~~~~
Typemap.xs:883:20: note: in expansion of macro 'SvIV'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                    ^~~~
Typemap.xs:883:25: note: in expansion of macro 'ST'
  883 |     RETVAL[i]->b = SvIV(ST(3*i+1));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:343:26: note: in definition of macro 'SvFLAGS'
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                          ^~
../../sv.h:1823:19: note: in expansion of macro 'SvNOK_nog'
 1823 | #define SvNV(sv) (SvNOK_nog(sv) ? SvNVX(sv) : sv_2nv(sv))
      |                   ^~~~~~~~~
Typemap.xs:884:20: note: in expansion of macro 'SvNV'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                    ^~~~
Typemap.xs:884:25: note: in expansion of macro 'ST'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:342:26: note: in definition of macro 'SvANY'
  342 | #define SvANY(sv)       (sv)->sv_any
      |                          ^~
../../sv.h:1823:35: note: in expansion of macro 'SvNVX'
 1823 | #define SvNV(sv) (SvNOK_nog(sv) ? SvNVX(sv) : sv_2nv(sv))
      |                                   ^~~~~
Typemap.xs:884:20: note: in expansion of macro 'SvNV'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                    ^~~~
Typemap.xs:884:25: note: in expansion of macro 'ST'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                         ^~
../../XSUB.h:117:34: warning: conversion to 'unsigned int' from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../embed.h:583:57: note: in definition of macro 'sv_2nv_flags'
  583 | #define sv_2nv_flags(a,b)       Perl_sv_2nv_flags(aTHX_ a,b)
      |                                                         ^
../../sv.h:1823:47: note: in expansion of macro 'sv_2nv'
 1823 | #define SvNV(sv) (SvNOK_nog(sv) ? SvNVX(sv) : sv_2nv(sv))
      |                                               ^~~~~~
Typemap.xs:884:20: note: in expansion of macro 'SvNV'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                    ^~~~
Typemap.xs:884:25: note: in expansion of macro 'ST'
  884 |     RETVAL[i]->c = SvNV(ST(3*i+2));
      |                         ^~
Typemap.c: In function 'XS_XS__Typemap_T_ARRAY':
../../XSUB.h:117:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:343:26: note: in definition of macro 'SvFLAGS'
  343 | #define SvFLAGS(sv)     (sv)->sv_flags
      |                          ^~
../../sv.h:1821:19: note: in expansion of macro 'SvIOK_nog'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                   ^~~~~~~~~
Typemap.c:1785:44: note: in expansion of macro 'SvIV'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                            ^~~~
Typemap.c:1785:49: note: in expansion of macro 'ST'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                                 ^~
../../XSUB.h:117:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../sv.h:342:26: note: in definition of macro 'SvANY'
  342 | #define SvANY(sv)       (sv)->sv_any
      |                          ^~
../../sv.h:1821:35: note: in expansion of macro 'SvIVX'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                   ^~~~~
Typemap.c:1785:44: note: in expansion of macro 'SvIV'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                            ^~~~
Typemap.c:1785:49: note: in expansion of macro 'ST'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                                 ^~
../../XSUB.h:117:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../embed.h:581:57: note: in definition of macro 'sv_2iv_flags'
  581 | #define sv_2iv_flags(a,b)       Perl_sv_2iv_flags(aTHX_ a,b)
      |                                                         ^
../../sv.h:1821:47: note: in expansion of macro 'sv_2iv'
 1821 | #define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
      |                                               ^~~~~~
Typemap.c:1785:44: note: in expansion of macro 'SvIV'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                            ^~~~
Typemap.c:1785:49: note: in expansion of macro 'ST'
 1785 |                 array[ix_array - 1] = (int)SvIV(ST(ix_array))
      |                                                 ^~
../../XSUB.h:117:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
Typemap.c:1813:17: note: in expansion of macro 'ST'
 1813 |                 ST(ix_RETVAL) = sv_newmortal();
      |                 ^~
../../XSUB.h:117:34: warning: conversion to 'U32' {aka 'unsigned int'} from 'I32' {aka 'int'} may change the sign of the result [-Wsign-conversion]
  117 | #define ST(off) PL_stack_base[ax + (off)]
      |                                  ^
../../embed.h:681:53: note: in definition of macro 'sv_setiv'
  681 | #define sv_setiv(a,b)           Perl_sv_setiv(aTHX_ a,b)
      |                                                     ^
Typemap.c:1814:26: note: in expansion of macro 'ST'
 1814 |                 sv_setiv(ST(ix_RETVAL), (IV)RETVAL[ix_RETVAL]);
      |                          ^~
../../XSUB.h:326:29: warning: conversion to 'IV' {aka 'const long int'} from 'U32' {aka 'unsigned int'} may change the sign of the result [-Wsign-conversion]
  326 |         const IV tmpXSoff = (off);                      \
      |                             ^
Typemap.xs:927:3: note: in expansion of macro 'XSRETURN'
  927 |   XSRETURN(size_RETVAL);
      |   ^~~~~~~~
In file included from ../../perl.h:4161:
Typemap.c: In function 'boot_XS__Typemap':
../../util.h:211:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  211 |         : (xsverlen) << 8) \
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Typemap.c:2057:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2057 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../util.h:217:9: warning: conversion to 'unsigned int' from 'int' may change the sign of the result [-Wsign-conversion]
  217 |         : (apiverlen)))
      |         ^
../../util.h:226:5: note: in expansion of macro 'HS_KEYp'
  226 |     HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, \
      |     ^~~~~~~
../../XSUB.h:384:23: note: in expansion of macro 'HS_KEY'
  384 |     Perl_xs_handshake(HS_KEY(TRUE, TRUE, "v" PERL_API_VERSION_STRING, XS_VERSION),\
      |                       ^~~~~~
../../XSUB.h:177:18: note: in expansion of macro 'XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK'
  177 |         I32 ax = XS_BOTHVERSION_SETXSUBFN_POPMARK_BOOTCHECK;    \
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Typemap.c:2057:11: note: in expansion of macro 'dXSBOOTARGSXSAPIVERCHK'
 2057 |     dVAR; dXSBOOTARGSXSAPIVERCHK;
      |           ^~~~~~~~~~~~~~~~~~~~~~
../../sv_inline.h: At top level:
../../sv_inline.h:519:1: warning: 'always_inline' function might not be inlinable [-Wattributes]
  519 | Perl_newSV_type_mortal(pTHX_ const svtype type)
      | ^~~~~~~~~~~~~~~~~~~~~~
rm -f ../../lib/auto/XS/Typemap/Typemap.so
arm-openbmc-linux-gnueabi-gcc  -march=armv7-a -mfpu=vfpv4-d16 -mfloat-abi=hard -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot  -shared -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  -Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0=/usr/src/debug/perl/5.36.0-r0  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build=/usr/src/debug/perl/5.36.0-r0  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fmacro-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot=  -fdebug-prefix-map=/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/recipe-sysroot-native=  -Wl,-z,relro,-z,now  stdio.o  Typemap.o  -o ../../lib/auto/XS/Typemap/Typemap.so  \
      \
  
chmod 755 ../../lib/auto/XS/Typemap/Typemap.so
make[2]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build/ext/XS-Typemap'
./miniperl_top autodoc.pl
PERL_BUILD_DATE has no documentation
./miniperl_top pod/perlmodlib.PL -q
ln -sf perldelta.pod pod/perl5360delta.pod
./miniperl_top -f pod/buildtoc -q
make[1]: Leaving directory '/home/matt/tmp/build/obmc-y2038/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/perl/5.36.0-r0/perl-5.36.0-build'
DEBUG: Shell function do_compile finished
